 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree156(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 18, (DAAL_DATA_TYPE)-2.0784999999999996);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 25, (DAAL_DATA_TYPE)1.3245000000000002);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 26, (DAAL_DATA_TYPE)1.0315000000000001);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 2, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    builder.addLeafNode(treeId, nodeIds[4], 0, (DAAL_DATA_TYPE)0.0081864014826714994);
    builder.addLeafNode(treeId, nodeIds[4], 1, (DAAL_DATA_TYPE)-0.0039373461604118344);
    builder.addLeafNode(treeId, nodeIds[3], 1, (DAAL_DATA_TYPE)0.010993361784494483);
    builder.addLeafNode(treeId, nodeIds[2], 1, (DAAL_DATA_TYPE)-0.0042475414329341482);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[1], 1, 24, (DAAL_DATA_TYPE)0.64150000000000007);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[9], 0, 7, (DAAL_DATA_TYPE)1.5615000000000003);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[10], 0, 5, (DAAL_DATA_TYPE)1.2185000000000004);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[11], 0, 3, (DAAL_DATA_TYPE)1.4035000000000002);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[12], 0, 23, (DAAL_DATA_TYPE)0.97950000000000015);
    builder.addLeafNode(treeId, nodeIds[13], 0, (DAAL_DATA_TYPE)-0.0072530392650514836);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[13], 1, 15, (DAAL_DATA_TYPE)0.7915000000000002);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[15], 0, 1, (DAAL_DATA_TYPE)-0.62849999999999995);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[16], 0, 6, (DAAL_DATA_TYPE)-0.19799999999999998);
    builder.addLeafNode(treeId, nodeIds[17], 0, (DAAL_DATA_TYPE)0.0018694191209731566);
    builder.addLeafNode(treeId, nodeIds[17], 1, (DAAL_DATA_TYPE)0.012377581178494123);
    nodeIds[20] = builder.addSplitNode(treeId, nodeIds[16], 1, 24, (DAAL_DATA_TYPE)0.5675);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[20], 0, 10, (DAAL_DATA_TYPE)0.7915000000000002);
    builder.addLeafNode(treeId, nodeIds[21], 0, (DAAL_DATA_TYPE)-0.010819173219780891);
    builder.addLeafNode(treeId, nodeIds[21], 1, (DAAL_DATA_TYPE)0.0011404551057652994);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[20], 1, 17, (DAAL_DATA_TYPE)0.99950000000000017);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[24], 0, 14, (DAAL_DATA_TYPE)-0.22149999999999997);
    builder.addLeafNode(treeId, nodeIds[25], 0, (DAAL_DATA_TYPE)-0.0086431244250248975);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[25], 1, 13, (DAAL_DATA_TYPE)0.6645000000000002);
    builder.addLeafNode(treeId, nodeIds[27], 0, (DAAL_DATA_TYPE)0.0098671868164092319);
    builder.addLeafNode(treeId, nodeIds[27], 1, (DAAL_DATA_TYPE)-0.0039190853333898957);
    builder.addLeafNode(treeId, nodeIds[24], 1, (DAAL_DATA_TYPE)0.0092369811834189398);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[15], 1, 23, (DAAL_DATA_TYPE)0.98850000000000005);
    builder.addLeafNode(treeId, nodeIds[31], 0, (DAAL_DATA_TYPE)0.010350229266362313);
    builder.addLeafNode(treeId, nodeIds[31], 1, (DAAL_DATA_TYPE)0.0010397420334629715);
    builder.addLeafNode(treeId, nodeIds[12], 1, (DAAL_DATA_TYPE)-0.007027428536093794);
    builder.addLeafNode(treeId, nodeIds[11], 1, (DAAL_DATA_TYPE)0.005097158410437945);
    builder.addLeafNode(treeId, nodeIds[10], 1, (DAAL_DATA_TYPE)0.011660320595230747);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[9], 1, 2, (DAAL_DATA_TYPE)1.7240000000000004);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[37], 0, 5, (DAAL_DATA_TYPE)0.88150000000000006);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[38], 0, 5, (DAAL_DATA_TYPE)0.84950000000000003);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[39], 0, 0, (DAAL_DATA_TYPE)2.3275000000000001);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[40], 0, 17, (DAAL_DATA_TYPE)0.72750000000000015);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[41], 0, 3, (DAAL_DATA_TYPE)1.6545000000000003);
    builder.addLeafNode(treeId, nodeIds[42], 0, (DAAL_DATA_TYPE)-0.0024071107810643331);
    builder.addLeafNode(treeId, nodeIds[42], 1, (DAAL_DATA_TYPE)0.0044848748670503974);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[41], 1, 13, (DAAL_DATA_TYPE)1.4305000000000001);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[45], 0, 1, (DAAL_DATA_TYPE)-1.2064999999999999);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[46], 0, 6, (DAAL_DATA_TYPE)0.62050000000000016);
    builder.addLeafNode(treeId, nodeIds[47], 0, (DAAL_DATA_TYPE)-0.0023592474162612326);
    builder.addLeafNode(treeId, nodeIds[47], 1, (DAAL_DATA_TYPE)-0.015182503424584866);
    builder.addLeafNode(treeId, nodeIds[46], 1, (DAAL_DATA_TYPE)0.00027467608782731005);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[45], 1, 0, (DAAL_DATA_TYPE)0.59450000000000014);
    builder.addLeafNode(treeId, nodeIds[51], 0, (DAAL_DATA_TYPE)-0.0037776976983462059);
    builder.addLeafNode(treeId, nodeIds[51], 1, (DAAL_DATA_TYPE)0.0070294734723358836);
    builder.addLeafNode(treeId, nodeIds[40], 1, (DAAL_DATA_TYPE)0.006493418242194151);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[39], 1, 4, (DAAL_DATA_TYPE)1.0155000000000001);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[55], 0, 15, (DAAL_DATA_TYPE)0.33900000000000008);
    builder.addLeafNode(treeId, nodeIds[56], 0, (DAAL_DATA_TYPE)-0.0030045180343000626);
    builder.addLeafNode(treeId, nodeIds[56], 1, (DAAL_DATA_TYPE)-0.011981411533905011);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)0.0037513114153765719);
    builder.addLeafNode(treeId, nodeIds[38], 1, (DAAL_DATA_TYPE)0.00018251932622440927);
    builder.addLeafNode(treeId, nodeIds[37], 1, (DAAL_DATA_TYPE)0.0053184132605298036);

}

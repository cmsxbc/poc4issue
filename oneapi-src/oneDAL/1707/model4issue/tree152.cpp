 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree152(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 15, (DAAL_DATA_TYPE)-1.5714999999999997);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 1, (DAAL_DATA_TYPE)-0.070499999999999993);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 22, (DAAL_DATA_TYPE)1.0605000000000002);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 2, (DAAL_DATA_TYPE)-0.31749999999999995);
    builder.addLeafNode(treeId, nodeIds[4], 0, (DAAL_DATA_TYPE)0.014673075262600414);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[4], 1, 10, (DAAL_DATA_TYPE)-0.25449999999999995);
    builder.addLeafNode(treeId, nodeIds[6], 0, (DAAL_DATA_TYPE)0.009808805653204522);
    builder.addLeafNode(treeId, nodeIds[6], 1, (DAAL_DATA_TYPE)-0.0010588107334280556);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[3], 1, 6, (DAAL_DATA_TYPE)-0.65849999999999997);
    builder.addLeafNode(treeId, nodeIds[9], 0, (DAAL_DATA_TYPE)-0.0057882020772508855);
    builder.addLeafNode(treeId, nodeIds[9], 1, (DAAL_DATA_TYPE)0.0065371145361236161);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[2], 1, 4, (DAAL_DATA_TYPE)1.0045000000000002);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[12], 0, 26, (DAAL_DATA_TYPE)0.85350000000000004);
    builder.addLeafNode(treeId, nodeIds[13], 0, (DAAL_DATA_TYPE)-0.0096947920940271253);
    builder.addLeafNode(treeId, nodeIds[13], 1, (DAAL_DATA_TYPE)-7.0756188313081815e-05);
    builder.addLeafNode(treeId, nodeIds[12], 1, (DAAL_DATA_TYPE)0.0088856216442460816);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[1], 1, 25, (DAAL_DATA_TYPE)0.30650000000000005);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[17], 0, 17, (DAAL_DATA_TYPE)1.0505000000000002);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[18], 0, 25, (DAAL_DATA_TYPE)0.22450000000000003);
    builder.addLeafNode(treeId, nodeIds[19], 0, (DAAL_DATA_TYPE)0.00079856153690453747);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[19], 1, 6, (DAAL_DATA_TYPE)-0.62449999999999994);
    builder.addLeafNode(treeId, nodeIds[21], 0, (DAAL_DATA_TYPE)0.016094468995773544);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[21], 1, 2, (DAAL_DATA_TYPE)0.068500000000000019);
    builder.addLeafNode(treeId, nodeIds[23], 0, (DAAL_DATA_TYPE)-0.00083959560841321938);
    builder.addLeafNode(treeId, nodeIds[23], 1, (DAAL_DATA_TYPE)0.010976452092009207);
    builder.addLeafNode(treeId, nodeIds[18], 1, (DAAL_DATA_TYPE)-0.0029783941329353386);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[17], 1, 22, (DAAL_DATA_TYPE)0.71350000000000013);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[27], 0, 13, (DAAL_DATA_TYPE)0.40450000000000008);
    builder.addLeafNode(treeId, nodeIds[28], 0, (DAAL_DATA_TYPE)-0.0042381453350008955);
    nodeIds[30] = builder.addSplitNode(treeId, nodeIds[28], 1, 17, (DAAL_DATA_TYPE)0.40150000000000008);
    builder.addLeafNode(treeId, nodeIds[30], 0, (DAAL_DATA_TYPE)-0.0061669097878038889);
    builder.addLeafNode(treeId, nodeIds[30], 1, (DAAL_DATA_TYPE)0.003298404401105542);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[27], 1, 24, (DAAL_DATA_TYPE)0.75750000000000017);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[33], 0, 22, (DAAL_DATA_TYPE)0.87250000000000016);
    builder.addLeafNode(treeId, nodeIds[34], 0, (DAAL_DATA_TYPE)-0.001632474047729658);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[34], 1, 6, (DAAL_DATA_TYPE)1.3260000000000003);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[36], 0, 24, (DAAL_DATA_TYPE)0.69150000000000011);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[37], 0, 19, (DAAL_DATA_TYPE)1.1345000000000003);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[38], 0, 6, (DAAL_DATA_TYPE)1.0375000000000003);
    builder.addLeafNode(treeId, nodeIds[39], 0, (DAAL_DATA_TYPE)0.0013561515418944745);
    builder.addLeafNode(treeId, nodeIds[39], 1, (DAAL_DATA_TYPE)0.012414739517262206);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[38], 1, 14, (DAAL_DATA_TYPE)-0.16549999999999998);
    builder.addLeafNode(treeId, nodeIds[42], 0, (DAAL_DATA_TYPE)0.0018405152813476676);
    builder.addLeafNode(treeId, nodeIds[42], 1, (DAAL_DATA_TYPE)-0.0097271175380461879);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[37], 1, 0, (DAAL_DATA_TYPE)0.65250000000000019);
    builder.addLeafNode(treeId, nodeIds[45], 0, (DAAL_DATA_TYPE)0.0075478463976954421);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[45], 1, 3, (DAAL_DATA_TYPE)0.68650000000000022);
    builder.addLeafNode(treeId, nodeIds[47], 0, (DAAL_DATA_TYPE)0.0055240176603547301);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[47], 1, 20, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    builder.addLeafNode(treeId, nodeIds[49], 0, (DAAL_DATA_TYPE)0.0030342636941695367);
    builder.addLeafNode(treeId, nodeIds[49], 1, (DAAL_DATA_TYPE)-0.0057100850458179295);
    builder.addLeafNode(treeId, nodeIds[36], 1, (DAAL_DATA_TYPE)-0.0043403965064927061);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[33], 1, 24, (DAAL_DATA_TYPE)0.77350000000000019);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[53], 0, 9, (DAAL_DATA_TYPE)0.82350000000000001);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[54], 0, 13, (DAAL_DATA_TYPE)0.8155);
    builder.addLeafNode(treeId, nodeIds[55], 0, (DAAL_DATA_TYPE)-0.0029464824860425372);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)-0.014843214924136797);
    nodeIds[58] = builder.addSplitNode(treeId, nodeIds[54], 1, 1, (DAAL_DATA_TYPE)-0.36449999999999994);
    builder.addLeafNode(treeId, nodeIds[58], 0, (DAAL_DATA_TYPE)-0.0080957173327492037);
    builder.addLeafNode(treeId, nodeIds[58], 1, (DAAL_DATA_TYPE)0.0042682547814604883);
    builder.addLeafNode(treeId, nodeIds[53], 1, (DAAL_DATA_TYPE)-0.00033146649085785836);

}

 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree173(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 4, (DAAL_DATA_TYPE)1.6505000000000003);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 0, (DAAL_DATA_TYPE)0.29350000000000004);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 16, (DAAL_DATA_TYPE)1.9110000000000003);
    builder.addLeafNode(treeId, nodeIds[3], 0, (DAAL_DATA_TYPE)0.00092366582527756693);
    builder.addLeafNode(treeId, nodeIds[3], 1, (DAAL_DATA_TYPE)-0.0092756136013194927);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[2], 1, 4, (DAAL_DATA_TYPE)1.6155000000000002);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[6], 0, 17, (DAAL_DATA_TYPE)0.53850000000000009);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 19, (DAAL_DATA_TYPE)1.0630000000000004);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[8], 0, 4, (DAAL_DATA_TYPE)-1.4314999999999998);
    builder.addLeafNode(treeId, nodeIds[9], 0, (DAAL_DATA_TYPE)0.0075531477600617224);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[9], 1, 23, (DAAL_DATA_TYPE)1.0005000000000002);
    builder.addLeafNode(treeId, nodeIds[11], 0, (DAAL_DATA_TYPE)0.00049673472865179535);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[11], 1, 24, (DAAL_DATA_TYPE)1.2895000000000001);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[13], 0, 19, (DAAL_DATA_TYPE)-0.026499999999999996);
    builder.addLeafNode(treeId, nodeIds[14], 0, (DAAL_DATA_TYPE)-0.0012357453986916733);
    builder.addLeafNode(treeId, nodeIds[14], 1, (DAAL_DATA_TYPE)0.0079581016114853489);
    builder.addLeafNode(treeId, nodeIds[13], 1, (DAAL_DATA_TYPE)0.013958773101049086);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[8], 1, 0, (DAAL_DATA_TYPE)0.97550000000000014);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[18], 0, 19, (DAAL_DATA_TYPE)1.6285000000000001);
    nodeIds[20] = builder.addSplitNode(treeId, nodeIds[19], 0, 3, (DAAL_DATA_TYPE)1.3105000000000002);
    builder.addLeafNode(treeId, nodeIds[20], 0, (DAAL_DATA_TYPE)-0.010594789463688028);
    builder.addLeafNode(treeId, nodeIds[20], 1, (DAAL_DATA_TYPE)-0.00026345700646440191);
    builder.addLeafNode(treeId, nodeIds[19], 1, (DAAL_DATA_TYPE)0.0032434775680303578);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[18], 1, 10, (DAAL_DATA_TYPE)-0.28949999999999992);
    builder.addLeafNode(treeId, nodeIds[24], 0, (DAAL_DATA_TYPE)0.0088092586273948361);
    builder.addLeafNode(treeId, nodeIds[24], 1, (DAAL_DATA_TYPE)-0.0030453543670268522);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[7], 1, 6, (DAAL_DATA_TYPE)-1.0984999999999998);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[27], 0, 14, (DAAL_DATA_TYPE)1.4185000000000001);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[28], 0, 3, (DAAL_DATA_TYPE)1.3665000000000003);
    nodeIds[30] = builder.addSplitNode(treeId, nodeIds[29], 0, 21, (DAAL_DATA_TYPE)1.0995000000000001);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[30], 0, 19, (DAAL_DATA_TYPE)0.028500000000000004);
    builder.addLeafNode(treeId, nodeIds[31], 0, (DAAL_DATA_TYPE)0.0015802621530989808);
    builder.addLeafNode(treeId, nodeIds[31], 1, (DAAL_DATA_TYPE)0.0063966483642480913);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[30], 1, 24, (DAAL_DATA_TYPE)1.0515000000000001);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[34], 0, 24, (DAAL_DATA_TYPE)0.90050000000000019);
    builder.addLeafNode(treeId, nodeIds[35], 0, (DAAL_DATA_TYPE)-0.00046252042341690799);
    builder.addLeafNode(treeId, nodeIds[35], 1, (DAAL_DATA_TYPE)-0.013101678676903247);
    builder.addLeafNode(treeId, nodeIds[34], 1, (DAAL_DATA_TYPE)0.0039347910107328339);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[29], 1, 18, (DAAL_DATA_TYPE)-1.0009999999999997);
    builder.addLeafNode(treeId, nodeIds[39], 0, (DAAL_DATA_TYPE)0.0075741276018443);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[39], 1, 5, (DAAL_DATA_TYPE)1.3665000000000003);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[41], 0, 19, (DAAL_DATA_TYPE)0.72200000000000009);
    builder.addLeafNode(treeId, nodeIds[42], 0, (DAAL_DATA_TYPE)-0.0096826841193690619);
    builder.addLeafNode(treeId, nodeIds[42], 1, (DAAL_DATA_TYPE)0.0020226322961124509);
    builder.addLeafNode(treeId, nodeIds[41], 1, (DAAL_DATA_TYPE)0.0035984758086587219);
    builder.addLeafNode(treeId, nodeIds[28], 1, (DAAL_DATA_TYPE)-0.0088075850445490621);
    builder.addLeafNode(treeId, nodeIds[27], 1, (DAAL_DATA_TYPE)-0.00028401893053234912);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[6], 1, 19, (DAAL_DATA_TYPE)-0.42199999999999993);
    builder.addLeafNode(treeId, nodeIds[48], 0, (DAAL_DATA_TYPE)0.0039996353816241026);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[48], 1, 21, (DAAL_DATA_TYPE)0.89050000000000018);
    builder.addLeafNode(treeId, nodeIds[50], 0, (DAAL_DATA_TYPE)-0.0024508073100481522);
    builder.addLeafNode(treeId, nodeIds[50], 1, (DAAL_DATA_TYPE)-0.011953450344583911);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[1], 1, 3, (DAAL_DATA_TYPE)0.36150000000000004);
    builder.addLeafNode(treeId, nodeIds[53], 0, (DAAL_DATA_TYPE)-0.0034676165117517761);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[53], 1, 6, (DAAL_DATA_TYPE)0.53250000000000008);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[55], 0, 3, (DAAL_DATA_TYPE)0.88750000000000007);
    builder.addLeafNode(treeId, nodeIds[56], 0, (DAAL_DATA_TYPE)0.0028609090544099067);
    builder.addLeafNode(treeId, nodeIds[56], 1, (DAAL_DATA_TYPE)0.0093374132932651614);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[55], 1, 14, (DAAL_DATA_TYPE)0.10950000000000001);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)-0.0065396661515392009);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)0.005166165512055159);

}

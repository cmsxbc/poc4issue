 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree40(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 5, (DAAL_DATA_TYPE)2.0995000000000004);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 25, (DAAL_DATA_TYPE)2.1950000000000007);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 3, (DAAL_DATA_TYPE)1.5555000000000001);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 22, (DAAL_DATA_TYPE)1.0705000000000002);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 12, (DAAL_DATA_TYPE)1.6610000000000003);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 10, (DAAL_DATA_TYPE)-1.3779999999999999);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[6], 0, 25, (DAAL_DATA_TYPE)0.47750000000000004);
    builder.addLeafNode(treeId, nodeIds[7], 0, (DAAL_DATA_TYPE)-0.014232205972075463);
    builder.addLeafNode(treeId, nodeIds[7], 1, (DAAL_DATA_TYPE)-0.0016798334412796553);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[6], 1, 4, (DAAL_DATA_TYPE)0.9145000000000002);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[10], 0, 10, (DAAL_DATA_TYPE)-1.1014999999999999);
    builder.addLeafNode(treeId, nodeIds[11], 0, (DAAL_DATA_TYPE)0.0080612014219598859);
    builder.addLeafNode(treeId, nodeIds[11], 1, (DAAL_DATA_TYPE)0.0017939168725955726);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[10], 1, 22, (DAAL_DATA_TYPE)0.78850000000000009);
    builder.addLeafNode(treeId, nodeIds[14], 0, (DAAL_DATA_TYPE)0.0050360841595608261);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[14], 1, 13, (DAAL_DATA_TYPE)0.58550000000000002);
    builder.addLeafNode(treeId, nodeIds[16], 0, (DAAL_DATA_TYPE)-0.012629174513201561);
    builder.addLeafNode(treeId, nodeIds[16], 1, (DAAL_DATA_TYPE)-0.0023317387020679271);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[5], 1, 26, (DAAL_DATA_TYPE)0.76450000000000007);
    nodeIds[20] = builder.addSplitNode(treeId, nodeIds[19], 0, 11, (DAAL_DATA_TYPE)0.055500000000000008);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[20], 0, 3, (DAAL_DATA_TYPE)0.64550000000000007);
    builder.addLeafNode(treeId, nodeIds[21], 0, (DAAL_DATA_TYPE)-0.017393425006705984);
    builder.addLeafNode(treeId, nodeIds[21], 1, (DAAL_DATA_TYPE)-0.0053279271797288825);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[20], 1, 13, (DAAL_DATA_TYPE)0.93050000000000022);
    builder.addLeafNode(treeId, nodeIds[24], 0, (DAAL_DATA_TYPE)-0.0055616089220469206);
    builder.addLeafNode(treeId, nodeIds[24], 1, (DAAL_DATA_TYPE)0.0083034223931677201);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[19], 1, 27, (DAAL_DATA_TYPE)0.84650000000000014);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[27], 0, 25, (DAAL_DATA_TYPE)1.1885000000000001);
    builder.addLeafNode(treeId, nodeIds[28], 0, (DAAL_DATA_TYPE)0.0028625004619887446);
    builder.addLeafNode(treeId, nodeIds[28], 1, (DAAL_DATA_TYPE)-0.0045280149403740385);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[27], 1, 26, (DAAL_DATA_TYPE)0.93350000000000011);
    builder.addLeafNode(treeId, nodeIds[31], 0, (DAAL_DATA_TYPE)-0.010015498584225065);
    builder.addLeafNode(treeId, nodeIds[31], 1, (DAAL_DATA_TYPE)-0.0024277993532426964);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[4], 1, 6, (DAAL_DATA_TYPE)-1.2184999999999999);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[34], 0, 18, (DAAL_DATA_TYPE)0.68350000000000011);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[35], 0, 9, (DAAL_DATA_TYPE)1.0555000000000001);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[36], 0, 20, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    builder.addLeafNode(treeId, nodeIds[37], 0, (DAAL_DATA_TYPE)-0.014923165564735731);
    builder.addLeafNode(treeId, nodeIds[37], 1, (DAAL_DATA_TYPE)0.0006111312438459958);
    builder.addLeafNode(treeId, nodeIds[36], 1, (DAAL_DATA_TYPE)0.0044825584627687931);
    builder.addLeafNode(treeId, nodeIds[35], 1, (DAAL_DATA_TYPE)-0.016621695695952936);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[34], 1, 24, (DAAL_DATA_TYPE)0.77650000000000008);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[42], 0, 25, (DAAL_DATA_TYPE)1.3145000000000002);
    builder.addLeafNode(treeId, nodeIds[43], 0, (DAAL_DATA_TYPE)0.0055941831428113833);
    builder.addLeafNode(treeId, nodeIds[43], 1, (DAAL_DATA_TYPE)0.021013069800708606);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[42], 1, 18, (DAAL_DATA_TYPE)-0.86649999999999994);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[46], 0, 11, (DAAL_DATA_TYPE)1.1185000000000003);
    builder.addLeafNode(treeId, nodeIds[47], 0, (DAAL_DATA_TYPE)-0.0061342551118948249);
    builder.addLeafNode(treeId, nodeIds[47], 1, (DAAL_DATA_TYPE)0.0090344721856324573);
    builder.addLeafNode(treeId, nodeIds[46], 1, (DAAL_DATA_TYPE)0.0031332459045793622);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[3], 1, 10, (DAAL_DATA_TYPE)-1.3164999999999998);
    builder.addLeafNode(treeId, nodeIds[51], 0, (DAAL_DATA_TYPE)-0.01071487961185945);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[51], 1, 11, (DAAL_DATA_TYPE)0.087500000000000008);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[53], 0, 23, (DAAL_DATA_TYPE)1.0125000000000002);
    builder.addLeafNode(treeId, nodeIds[54], 0, (DAAL_DATA_TYPE)-0.0016794420364830229);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)0.0057789319211192305);
    builder.addLeafNode(treeId, nodeIds[53], 1, (DAAL_DATA_TYPE)-0.004980601073407075);
    builder.addLeafNode(treeId, nodeIds[2], 1, (DAAL_DATA_TYPE)-0.0077677274471133709);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[1], 1, 8, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)0.008868955628198831);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)-0.0022941491162439564);

}

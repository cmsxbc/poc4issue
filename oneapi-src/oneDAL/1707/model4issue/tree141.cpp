 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree141(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 23, (DAAL_DATA_TYPE)1.0485000000000002);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 17, (DAAL_DATA_TYPE)2.1945000000000001);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 21, (DAAL_DATA_TYPE)1.8955000000000002);
    builder.addLeafNode(treeId, nodeIds[3], 0, (DAAL_DATA_TYPE)-0.00024962496418190478);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[3], 1, 13, (DAAL_DATA_TYPE)0.82750000000000001);
    builder.addLeafNode(treeId, nodeIds[5], 0, (DAAL_DATA_TYPE)-0.0078207396414990606);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[5], 1, 2, (DAAL_DATA_TYPE)0.49150000000000005);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 24, (DAAL_DATA_TYPE)1.4355000000000002);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[8], 0, 18, (DAAL_DATA_TYPE)0.37950000000000006);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[9], 0, 18, (DAAL_DATA_TYPE)-0.36349999999999993);
    builder.addLeafNode(treeId, nodeIds[10], 0, (DAAL_DATA_TYPE)-0.00068804718727289251);
    builder.addLeafNode(treeId, nodeIds[10], 1, (DAAL_DATA_TYPE)-0.011916799495077651);
    builder.addLeafNode(treeId, nodeIds[9], 1, (DAAL_DATA_TYPE)0.0060727726629314326);
    builder.addLeafNode(treeId, nodeIds[8], 1, (DAAL_DATA_TYPE)-0.01237348595261574);
    builder.addLeafNode(treeId, nodeIds[7], 1, (DAAL_DATA_TYPE)0.0041248412891838919);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[2], 1, 14, (DAAL_DATA_TYPE)-0.13249999999999998);
    builder.addLeafNode(treeId, nodeIds[16], 0, (DAAL_DATA_TYPE)-0.0020440006109420212);
    builder.addLeafNode(treeId, nodeIds[16], 1, (DAAL_DATA_TYPE)0.0072509963403468679);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[1], 1, 13, (DAAL_DATA_TYPE)0.34650000000000003);
    builder.addLeafNode(treeId, nodeIds[19], 0, (DAAL_DATA_TYPE)-0.0084869562461972244);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[19], 1, 0, (DAAL_DATA_TYPE)1.0265000000000002);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[21], 0, 0, (DAAL_DATA_TYPE)0.96350000000000013);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[22], 0, 18, (DAAL_DATA_TYPE)-1.8059999999999998);
    builder.addLeafNode(treeId, nodeIds[23], 0, (DAAL_DATA_TYPE)0.010349934074011717);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[23], 1, 0, (DAAL_DATA_TYPE)0.89350000000000007);
    builder.addLeafNode(treeId, nodeIds[25], 0, (DAAL_DATA_TYPE)0.0020788476188234322);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[25], 1, 2, (DAAL_DATA_TYPE)-0.38299999999999995);
    builder.addLeafNode(treeId, nodeIds[27], 0, (DAAL_DATA_TYPE)-0.012155901660899754);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[27], 1, 5, (DAAL_DATA_TYPE)0.90050000000000019);
    builder.addLeafNode(treeId, nodeIds[29], 0, (DAAL_DATA_TYPE)-0.0053515122798473945);
    builder.addLeafNode(treeId, nodeIds[29], 1, (DAAL_DATA_TYPE)0.0067020581741989759);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[22], 1, 25, (DAAL_DATA_TYPE)0.98950000000000016);
    builder.addLeafNode(treeId, nodeIds[32], 0, (DAAL_DATA_TYPE)0.004409197081501285);
    builder.addLeafNode(treeId, nodeIds[32], 1, (DAAL_DATA_TYPE)0.016067570839077235);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[21], 1, 7, (DAAL_DATA_TYPE)1.4635000000000002);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[35], 0, 7, (DAAL_DATA_TYPE)-0.10199999999999999);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[36], 0, 2, (DAAL_DATA_TYPE)-0.85549999999999982);
    builder.addLeafNode(treeId, nodeIds[37], 0, (DAAL_DATA_TYPE)-0.0092567984446338038);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[37], 1, 21, (DAAL_DATA_TYPE)0.7965000000000001);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[39], 0, 17, (DAAL_DATA_TYPE)0.74450000000000005);
    builder.addLeafNode(treeId, nodeIds[40], 0, (DAAL_DATA_TYPE)0.00037041455507278446);
    builder.addLeafNode(treeId, nodeIds[40], 1, (DAAL_DATA_TYPE)-0.010766476931582605);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[39], 1, 14, (DAAL_DATA_TYPE)-0.43749999999999994);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[43], 0, 25, (DAAL_DATA_TYPE)0.77850000000000008);
    builder.addLeafNode(treeId, nodeIds[44], 0, (DAAL_DATA_TYPE)0.0040557216852903366);
    builder.addLeafNode(treeId, nodeIds[44], 1, (DAAL_DATA_TYPE)-0.0067693737678621944);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[43], 1, 13, (DAAL_DATA_TYPE)0.76550000000000018);
    builder.addLeafNode(treeId, nodeIds[47], 0, (DAAL_DATA_TYPE)-0.0020292669493595468);
    builder.addLeafNode(treeId, nodeIds[47], 1, (DAAL_DATA_TYPE)0.0066061891044477284);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[36], 1, 0, (DAAL_DATA_TYPE)2.4065000000000003);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[50], 0, 0, (DAAL_DATA_TYPE)1.1075000000000002);
    builder.addLeafNode(treeId, nodeIds[51], 0, (DAAL_DATA_TYPE)-0.0035578118895904886);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[51], 1, 26, (DAAL_DATA_TYPE)1.1165000000000003);
    builder.addLeafNode(treeId, nodeIds[53], 0, (DAAL_DATA_TYPE)0.0019366361165665232);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[53], 1, 15, (DAAL_DATA_TYPE)0.40450000000000008);
    builder.addLeafNode(treeId, nodeIds[55], 0, (DAAL_DATA_TYPE)0.011274721499325501);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)0.0016072538867592811);
    builder.addLeafNode(treeId, nodeIds[50], 1, (DAAL_DATA_TYPE)-0.0072501072002088898);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[35], 1, 1, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)-0.012841275357059204);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)-5.1093338565392925e-05);

}

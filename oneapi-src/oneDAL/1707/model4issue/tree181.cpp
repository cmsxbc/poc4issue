 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree181(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 11, (DAAL_DATA_TYPE)-1.7314999999999998);
    builder.addLeafNode(treeId, nodeIds[1], 0, (DAAL_DATA_TYPE)-0.0081742796248623316);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[1], 1, 6, (DAAL_DATA_TYPE)-2.7564999999999995);
    builder.addLeafNode(treeId, nodeIds[3], 0, (DAAL_DATA_TYPE)-0.0073902310803532602);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[3], 1, 5, (DAAL_DATA_TYPE)1.6690000000000003);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 27, (DAAL_DATA_TYPE)0.72450000000000003);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[6], 0, 2, (DAAL_DATA_TYPE)1.2805000000000002);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 26, (DAAL_DATA_TYPE)0.83850000000000013);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[8], 0, 7, (DAAL_DATA_TYPE)1.4795000000000003);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[9], 0, 26, (DAAL_DATA_TYPE)0.72850000000000004);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[10], 0, 23, (DAAL_DATA_TYPE)0.98050000000000004);
    builder.addLeafNode(treeId, nodeIds[11], 0, (DAAL_DATA_TYPE)-0.0062108181056476407);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[11], 1, 0, (DAAL_DATA_TYPE)1.5195000000000001);
    builder.addLeafNode(treeId, nodeIds[13], 0, (DAAL_DATA_TYPE)0.00097973961397004677);
    builder.addLeafNode(treeId, nodeIds[13], 1, (DAAL_DATA_TYPE)0.010280284533898038);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[10], 1, 17, (DAAL_DATA_TYPE)0.46450000000000008);
    builder.addLeafNode(treeId, nodeIds[16], 0, (DAAL_DATA_TYPE)0.012612429734629891);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[16], 1, 17, (DAAL_DATA_TYPE)1.1315000000000002);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[18], 0, 10, (DAAL_DATA_TYPE)0.12450000000000001);
    builder.addLeafNode(treeId, nodeIds[19], 0, (DAAL_DATA_TYPE)-0.0006520283089852647);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[19], 1, 11, (DAAL_DATA_TYPE)-0.44649999999999995);
    builder.addLeafNode(treeId, nodeIds[21], 0, (DAAL_DATA_TYPE)9.1880330195029584e-05);
    builder.addLeafNode(treeId, nodeIds[21], 1, (DAAL_DATA_TYPE)0.010671785378303284);
    builder.addLeafNode(treeId, nodeIds[18], 1, (DAAL_DATA_TYPE)0.0096715487444247964);
    builder.addLeafNode(treeId, nodeIds[9], 1, (DAAL_DATA_TYPE)-0.0029279755738874278);
    builder.addLeafNode(treeId, nodeIds[8], 1, (DAAL_DATA_TYPE)-0.0061485283835618588);
    builder.addLeafNode(treeId, nodeIds[7], 1, (DAAL_DATA_TYPE)-0.0046019161082804204);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[6], 1, 5, (DAAL_DATA_TYPE)0.42950000000000005);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[28], 0, 4, (DAAL_DATA_TYPE)-1.1214999999999999);
    builder.addLeafNode(treeId, nodeIds[29], 0, (DAAL_DATA_TYPE)-0.0099588563399655491);
    builder.addLeafNode(treeId, nodeIds[29], 1, (DAAL_DATA_TYPE)0.0057268283927959266);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[28], 1, 4, (DAAL_DATA_TYPE)-1.5154999999999996);
    builder.addLeafNode(treeId, nodeIds[32], 0, (DAAL_DATA_TYPE)0.0017023614348827638);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[32], 1, 26, (DAAL_DATA_TYPE)0.77250000000000008);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[34], 0, 27, (DAAL_DATA_TYPE)0.79050000000000009);
    builder.addLeafNode(treeId, nodeIds[35], 0, (DAAL_DATA_TYPE)-0.0067002946823668573);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[35], 1, 0, (DAAL_DATA_TYPE)1.4495000000000002);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[37], 0, 15, (DAAL_DATA_TYPE)0.76450000000000007);
    builder.addLeafNode(treeId, nodeIds[38], 0, (DAAL_DATA_TYPE)1.7719096301690391e-05);
    builder.addLeafNode(treeId, nodeIds[38], 1, (DAAL_DATA_TYPE)0.01227229709870049);
    builder.addLeafNode(treeId, nodeIds[37], 1, (DAAL_DATA_TYPE)-0.0055334586650133133);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[34], 1, 27, (DAAL_DATA_TYPE)0.78650000000000009);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[42], 0, 2, (DAAL_DATA_TYPE)-0.88449999999999995);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[43], 0, 14, (DAAL_DATA_TYPE)-0.22149999999999997);
    builder.addLeafNode(treeId, nodeIds[44], 0, (DAAL_DATA_TYPE)0.0025485190097242595);
    builder.addLeafNode(treeId, nodeIds[44], 1, (DAAL_DATA_TYPE)-0.0067966153997735222);
    builder.addLeafNode(treeId, nodeIds[43], 1, (DAAL_DATA_TYPE)0.0025240083376383434);
    builder.addLeafNode(treeId, nodeIds[42], 1, (DAAL_DATA_TYPE)-0.00088414985001305515);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[5], 1, 0, (DAAL_DATA_TYPE)1.9325000000000003);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[49], 0, 4, (DAAL_DATA_TYPE)1.4005000000000003);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[50], 0, 13, (DAAL_DATA_TYPE)0.95150000000000012);
    builder.addLeafNode(treeId, nodeIds[51], 0, (DAAL_DATA_TYPE)-0.0019851566977404918);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[51], 1, 15, (DAAL_DATA_TYPE)1.2345000000000004);
    builder.addLeafNode(treeId, nodeIds[53], 0, (DAAL_DATA_TYPE)0.0037108559163541279);
    builder.addLeafNode(treeId, nodeIds[53], 1, (DAAL_DATA_TYPE)-0.003213259659154072);
    builder.addLeafNode(treeId, nodeIds[50], 1, (DAAL_DATA_TYPE)0.0087121961426667189);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[49], 1, 23, (DAAL_DATA_TYPE)0.99350000000000016);
    builder.addLeafNode(treeId, nodeIds[57], 0, (DAAL_DATA_TYPE)0.0034163581556640567);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[57], 1, 15, (DAAL_DATA_TYPE)0.25750000000000006);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)-0.013846752038225532);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)-0.0035064283836012088);

}

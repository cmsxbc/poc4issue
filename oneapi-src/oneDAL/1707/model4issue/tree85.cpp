 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree85(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 1, (DAAL_DATA_TYPE)2.2625000000000006);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 3, (DAAL_DATA_TYPE)1.7785000000000002);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 5, (DAAL_DATA_TYPE)0.88150000000000006);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 0, (DAAL_DATA_TYPE)1.9155000000000002);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 11, (DAAL_DATA_TYPE)-1.5004999999999997);
    builder.addLeafNode(treeId, nodeIds[5], 0, (DAAL_DATA_TYPE)-0.0049103974506164655);
    builder.addLeafNode(treeId, nodeIds[5], 1, (DAAL_DATA_TYPE)-0.00053692755975225331);
    builder.addLeafNode(treeId, nodeIds[4], 1, (DAAL_DATA_TYPE)0.0066911832080222668);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[3], 1, 0, (DAAL_DATA_TYPE)1.7645000000000002);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[9], 0, 5, (DAAL_DATA_TYPE)1.7110000000000001);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[10], 0, 6, (DAAL_DATA_TYPE)1.3790000000000002);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[11], 0, 19, (DAAL_DATA_TYPE)1.4335000000000002);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[12], 0, 6, (DAAL_DATA_TYPE)-1.4399999999999997);
    builder.addLeafNode(treeId, nodeIds[13], 0, (DAAL_DATA_TYPE)-0.0037851356338554376);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[13], 1, 25, (DAAL_DATA_TYPE)1.8525000000000003);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[15], 0, 25, (DAAL_DATA_TYPE)0.58150000000000002);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[16], 0, 1, (DAAL_DATA_TYPE)-1.2704999999999997);
    builder.addLeafNode(treeId, nodeIds[17], 0, (DAAL_DATA_TYPE)0.0099232941710700601);
    builder.addLeafNode(treeId, nodeIds[17], 1, (DAAL_DATA_TYPE)-0.0028190211225185336);
    builder.addLeafNode(treeId, nodeIds[16], 1, (DAAL_DATA_TYPE)0.0028204694887699797);
    builder.addLeafNode(treeId, nodeIds[15], 1, (DAAL_DATA_TYPE)-0.0017361832767104112);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[12], 1, 14, (DAAL_DATA_TYPE)0.75200000000000011);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[22], 0, 19, (DAAL_DATA_TYPE)1.5375000000000003);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[23], 0, 13, (DAAL_DATA_TYPE)0.86850000000000016);
    builder.addLeafNode(treeId, nodeIds[24], 0, (DAAL_DATA_TYPE)-0.00017500634750594265);
    builder.addLeafNode(treeId, nodeIds[24], 1, (DAAL_DATA_TYPE)-0.016301965036175467);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[23], 1, 0, (DAAL_DATA_TYPE)0.65250000000000019);
    builder.addLeafNode(treeId, nodeIds[27], 0, (DAAL_DATA_TYPE)0.013973814316771247);
    builder.addLeafNode(treeId, nodeIds[27], 1, (DAAL_DATA_TYPE)1.378410245076968e-05);
    builder.addLeafNode(treeId, nodeIds[22], 1, (DAAL_DATA_TYPE)-0.011094306571115006);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[11], 1, 22, (DAAL_DATA_TYPE)0.99250000000000005);
    builder.addLeafNode(treeId, nodeIds[31], 0, (DAAL_DATA_TYPE)-4.6802609393449687e-05);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[31], 1, 27, (DAAL_DATA_TYPE)1.1835000000000002);
    builder.addLeafNode(treeId, nodeIds[33], 0, (DAAL_DATA_TYPE)-0.014725456398093341);
    builder.addLeafNode(treeId, nodeIds[33], 1, (DAAL_DATA_TYPE)-0.0018724673688411714);
    builder.addLeafNode(treeId, nodeIds[10], 1, (DAAL_DATA_TYPE)0.0043398551978281741);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[9], 1, 26, (DAAL_DATA_TYPE)1.8445000000000003);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[37], 0, 4, (DAAL_DATA_TYPE)-0.42349999999999993);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[38], 0, 0, (DAAL_DATA_TYPE)2.1250000000000004);
    builder.addLeafNode(treeId, nodeIds[39], 0, (DAAL_DATA_TYPE)-0.0024370104403180237);
    builder.addLeafNode(treeId, nodeIds[39], 1, (DAAL_DATA_TYPE)0.0066097997172619221);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[38], 1, 2, (DAAL_DATA_TYPE)-1.2954999999999999);
    builder.addLeafNode(treeId, nodeIds[42], 0, (DAAL_DATA_TYPE)0.007942240741103888);
    builder.addLeafNode(treeId, nodeIds[42], 1, (DAAL_DATA_TYPE)-0.0051441416934879872);
    builder.addLeafNode(treeId, nodeIds[37], 1, (DAAL_DATA_TYPE)-0.012386410934445652);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[2], 1, 22, (DAAL_DATA_TYPE)0.87650000000000017);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[46], 0, 19, (DAAL_DATA_TYPE)0.75350000000000017);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[47], 0, 19, (DAAL_DATA_TYPE)-1.1314999999999997);
    builder.addLeafNode(treeId, nodeIds[48], 0, (DAAL_DATA_TYPE)-0.0025539353048722995);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[48], 1, 5, (DAAL_DATA_TYPE)0.74150000000000016);
    builder.addLeafNode(treeId, nodeIds[50], 0, (DAAL_DATA_TYPE)-0.0035856849700212482);
    builder.addLeafNode(treeId, nodeIds[50], 1, (DAAL_DATA_TYPE)0.0096590717090293769);
    builder.addLeafNode(treeId, nodeIds[47], 1, (DAAL_DATA_TYPE)-0.0068443006079178309);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[46], 1, 22, (DAAL_DATA_TYPE)1.1235000000000002);
    builder.addLeafNode(treeId, nodeIds[54], 0, (DAAL_DATA_TYPE)-0.0055341103262803032);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[54], 1, 24, (DAAL_DATA_TYPE)1.5375000000000003);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[56], 0, 25, (DAAL_DATA_TYPE)1.0285000000000002);
    builder.addLeafNode(treeId, nodeIds[57], 0, (DAAL_DATA_TYPE)0.010080970442149699);
    builder.addLeafNode(treeId, nodeIds[57], 1, (DAAL_DATA_TYPE)-0.0034301800387246274);
    builder.addLeafNode(treeId, nodeIds[56], 1, (DAAL_DATA_TYPE)-0.0055841355081537522);
    builder.addLeafNode(treeId, nodeIds[1], 1, (DAAL_DATA_TYPE)-0.0092619515793479004);

}

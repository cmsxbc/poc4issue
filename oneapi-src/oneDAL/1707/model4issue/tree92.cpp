 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree92(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 1, (DAAL_DATA_TYPE)1.6995000000000002);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 18, (DAAL_DATA_TYPE)-2.0784999999999996);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 19, (DAAL_DATA_TYPE)1.0630000000000004);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 21, (DAAL_DATA_TYPE)0.95750000000000013);
    builder.addLeafNode(treeId, nodeIds[4], 0, (DAAL_DATA_TYPE)0.0016653759073879983);
    builder.addLeafNode(treeId, nodeIds[4], 1, (DAAL_DATA_TYPE)0.011125048076690632);
    builder.addLeafNode(treeId, nodeIds[3], 1, (DAAL_DATA_TYPE)-0.0045480543666559714);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[2], 1, 18, (DAAL_DATA_TYPE)-1.2709999999999997);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[8], 0, 19, (DAAL_DATA_TYPE)0.83800000000000008);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[9], 0, 10, (DAAL_DATA_TYPE)1.0070000000000003);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[10], 0, 9, (DAAL_DATA_TYPE)0.50950000000000017);
    builder.addLeafNode(treeId, nodeIds[11], 0, (DAAL_DATA_TYPE)0.0071263610355315676);
    builder.addLeafNode(treeId, nodeIds[11], 1, (DAAL_DATA_TYPE)-0.0022446552221895353);
    builder.addLeafNode(treeId, nodeIds[10], 1, (DAAL_DATA_TYPE)0.010460242132345837);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[9], 1, 17, (DAAL_DATA_TYPE)0.61350000000000005);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[15], 0, 4, (DAAL_DATA_TYPE)-0.34949999999999992);
    builder.addLeafNode(treeId, nodeIds[16], 0, (DAAL_DATA_TYPE)-0.020175696994093332);
    builder.addLeafNode(treeId, nodeIds[16], 1, (DAAL_DATA_TYPE)-0.0050678832012982598);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[15], 1, 13, (DAAL_DATA_TYPE)0.86850000000000016);
    builder.addLeafNode(treeId, nodeIds[19], 0, (DAAL_DATA_TYPE)-0.0076239571613924851);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[19], 1, 8, (DAAL_DATA_TYPE)1.6300000000000001);
    builder.addLeafNode(treeId, nodeIds[21], 0, (DAAL_DATA_TYPE)-0.0053048691542988483);
    builder.addLeafNode(treeId, nodeIds[21], 1, (DAAL_DATA_TYPE)0.01000742972384961);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[8], 1, 25, (DAAL_DATA_TYPE)0.53150000000000019);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[24], 0, 18, (DAAL_DATA_TYPE)0.10650000000000001);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[25], 0, 6, (DAAL_DATA_TYPE)-0.24549999999999997);
    builder.addLeafNode(treeId, nodeIds[26], 0, (DAAL_DATA_TYPE)-0.00033339990791259939);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[26], 1, 11, (DAAL_DATA_TYPE)1.0995000000000001);
    builder.addLeafNode(treeId, nodeIds[28], 0, (DAAL_DATA_TYPE)-0.0090207876406671588);
    builder.addLeafNode(treeId, nodeIds[28], 1, (DAAL_DATA_TYPE)0.0016867734382257742);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[25], 1, 17, (DAAL_DATA_TYPE)1.3915000000000002);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[31], 0, 5, (DAAL_DATA_TYPE)0.76550000000000018);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[32], 0, 21, (DAAL_DATA_TYPE)1.1605000000000001);
    builder.addLeafNode(treeId, nodeIds[33], 0, (DAAL_DATA_TYPE)0.000911557384663158);
    builder.addLeafNode(treeId, nodeIds[33], 1, (DAAL_DATA_TYPE)0.015263754166662695);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[32], 1, 2, (DAAL_DATA_TYPE)-0.98749999999999993);
    builder.addLeafNode(treeId, nodeIds[36], 0, (DAAL_DATA_TYPE)-0.012199607328511775);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[36], 1, 2, (DAAL_DATA_TYPE)-0.24149999999999996);
    builder.addLeafNode(treeId, nodeIds[38], 0, (DAAL_DATA_TYPE)0.0095254317891818509);
    builder.addLeafNode(treeId, nodeIds[38], 1, (DAAL_DATA_TYPE)-0.0040500680159888062);
    builder.addLeafNode(treeId, nodeIds[31], 1, (DAAL_DATA_TYPE)0.0092978939075361606);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[24], 1, 11, (DAAL_DATA_TYPE)1.4915000000000003);
    builder.addLeafNode(treeId, nodeIds[42], 0, (DAAL_DATA_TYPE)0.00079812305096290097);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[42], 1, 27, (DAAL_DATA_TYPE)0.83050000000000013);
    builder.addLeafNode(treeId, nodeIds[44], 0, (DAAL_DATA_TYPE)0.0019735897868691436);
    builder.addLeafNode(treeId, nodeIds[44], 1, (DAAL_DATA_TYPE)-0.0049709640824432046);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[1], 1, 15, (DAAL_DATA_TYPE)1.0315000000000001);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[47], 0, 17, (DAAL_DATA_TYPE)0.64750000000000008);
    builder.addLeafNode(treeId, nodeIds[48], 0, (DAAL_DATA_TYPE)-0.010817298610798188);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[48], 1, 21, (DAAL_DATA_TYPE)0.89950000000000008);
    builder.addLeafNode(treeId, nodeIds[50], 0, (DAAL_DATA_TYPE)0.0025064705072769099);
    nodeIds[52] = builder.addSplitNode(treeId, nodeIds[50], 1, 13, (DAAL_DATA_TYPE)0.82350000000000001);
    builder.addLeafNode(treeId, nodeIds[52], 0, (DAAL_DATA_TYPE)-0.01651336499436928);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[52], 1, 21, (DAAL_DATA_TYPE)1.0775000000000003);
    builder.addLeafNode(treeId, nodeIds[54], 0, (DAAL_DATA_TYPE)-0.0079836850018741995);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)0.00385613304603359);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[47], 1, 25, (DAAL_DATA_TYPE)0.97650000000000003);
    nodeIds[58] = builder.addSplitNode(treeId, nodeIds[57], 0, 11, (DAAL_DATA_TYPE)-0.51849999999999985);
    builder.addLeafNode(treeId, nodeIds[58], 0, (DAAL_DATA_TYPE)-0.00016176333989609374);
    builder.addLeafNode(treeId, nodeIds[58], 1, (DAAL_DATA_TYPE)0.015628088368102908);
    builder.addLeafNode(treeId, nodeIds[57], 1, (DAAL_DATA_TYPE)-0.0054546532651875172);

}

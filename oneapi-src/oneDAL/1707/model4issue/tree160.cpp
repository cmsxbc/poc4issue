 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree160(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 18, (DAAL_DATA_TYPE)-2.0784999999999996);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 25, (DAAL_DATA_TYPE)1.3245000000000002);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 26, (DAAL_DATA_TYPE)1.0315000000000001);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 2, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    builder.addLeafNode(treeId, nodeIds[4], 0, (DAAL_DATA_TYPE)0.0069100308169921243);
    builder.addLeafNode(treeId, nodeIds[4], 1, (DAAL_DATA_TYPE)-0.0038994712159037591);
    builder.addLeafNode(treeId, nodeIds[3], 1, (DAAL_DATA_TYPE)0.0094102068978827447);
    builder.addLeafNode(treeId, nodeIds[2], 1, (DAAL_DATA_TYPE)-0.0036761330573686531);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[1], 1, 3, (DAAL_DATA_TYPE)2.6165000000000007);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[9], 0, 5, (DAAL_DATA_TYPE)0.88650000000000018);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[10], 0, 5, (DAAL_DATA_TYPE)0.84950000000000003);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[11], 0, 0, (DAAL_DATA_TYPE)2.3275000000000001);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[12], 0, 21, (DAAL_DATA_TYPE)0.40200000000000008);
    builder.addLeafNode(treeId, nodeIds[13], 0, (DAAL_DATA_TYPE)-0.00763778441818431);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[13], 1, 11, (DAAL_DATA_TYPE)1.1820000000000002);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[15], 0, 1, (DAAL_DATA_TYPE)0.14150000000000001);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[16], 0, 21, (DAAL_DATA_TYPE)1.1605000000000001);
    builder.addLeafNode(treeId, nodeIds[17], 0, (DAAL_DATA_TYPE)-0.00088697734358646251);
    builder.addLeafNode(treeId, nodeIds[17], 1, (DAAL_DATA_TYPE)-0.0055544556348004204);
    nodeIds[20] = builder.addSplitNode(treeId, nodeIds[16], 1, 25, (DAAL_DATA_TYPE)1.4645000000000004);
    builder.addLeafNode(treeId, nodeIds[20], 0, (DAAL_DATA_TYPE)8.0398563975952092e-05);
    builder.addLeafNode(treeId, nodeIds[20], 1, (DAAL_DATA_TYPE)0.0092903647368821583);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[15], 1, 11, (DAAL_DATA_TYPE)1.2435000000000003);
    builder.addLeafNode(treeId, nodeIds[23], 0, (DAAL_DATA_TYPE)0.01113537175533099);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[23], 1, 22, (DAAL_DATA_TYPE)1.1535000000000002);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[25], 0, 1, (DAAL_DATA_TYPE)1.2045000000000001);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[26], 0, 1, (DAAL_DATA_TYPE)-1.4484999999999999);
    builder.addLeafNode(treeId, nodeIds[27], 0, (DAAL_DATA_TYPE)-0.0071146774390298461);
    builder.addLeafNode(treeId, nodeIds[27], 1, (DAAL_DATA_TYPE)0.0023573228947434315);
    builder.addLeafNode(treeId, nodeIds[26], 1, (DAAL_DATA_TYPE)-0.0075549424406798453);
    builder.addLeafNode(treeId, nodeIds[25], 1, (DAAL_DATA_TYPE)0.0090050956638725969);
    builder.addLeafNode(treeId, nodeIds[12], 1, (DAAL_DATA_TYPE)0.0060835846723057332);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[11], 1, 3, (DAAL_DATA_TYPE)0.57250000000000012);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[33], 0, 25, (DAAL_DATA_TYPE)0.82050000000000012);
    builder.addLeafNode(treeId, nodeIds[34], 0, (DAAL_DATA_TYPE)0.0091460066399088619);
    builder.addLeafNode(treeId, nodeIds[34], 1, (DAAL_DATA_TYPE)-0.0031323232243793383);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[33], 1, 3, (DAAL_DATA_TYPE)1.1045000000000003);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[37], 0, 21, (DAAL_DATA_TYPE)0.86550000000000005);
    builder.addLeafNode(treeId, nodeIds[38], 0, (DAAL_DATA_TYPE)-0.014589075557887556);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[38], 1, 22, (DAAL_DATA_TYPE)0.93950000000000011);
    builder.addLeafNode(treeId, nodeIds[40], 0, (DAAL_DATA_TYPE)0.0033358583247966389);
    builder.addLeafNode(treeId, nodeIds[40], 1, (DAAL_DATA_TYPE)-0.010677978321909906);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[37], 1, 11, (DAAL_DATA_TYPE)-0.58649999999999991);
    builder.addLeafNode(treeId, nodeIds[43], 0, (DAAL_DATA_TYPE)-0.0086105308309197427);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[43], 1, 11, (DAAL_DATA_TYPE)0.28550000000000003);
    builder.addLeafNode(treeId, nodeIds[45], 0, (DAAL_DATA_TYPE)0.0099625729210674769);
    builder.addLeafNode(treeId, nodeIds[45], 1, (DAAL_DATA_TYPE)-0.0021707531572742896);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[10], 1, 18, (DAAL_DATA_TYPE)2.1345000000000005);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[48], 0, 5, (DAAL_DATA_TYPE)0.91550000000000009);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[49], 0, 0, (DAAL_DATA_TYPE)0.59150000000000003);
    builder.addLeafNode(treeId, nodeIds[50], 0, (DAAL_DATA_TYPE)0.010391203269887812);
    nodeIds[52] = builder.addSplitNode(treeId, nodeIds[50], 1, 6, (DAAL_DATA_TYPE)-0.097499999999999989);
    builder.addLeafNode(treeId, nodeIds[52], 0, (DAAL_DATA_TYPE)0.0059581857077332578);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[52], 1, 13, (DAAL_DATA_TYPE)0.81950000000000001);
    builder.addLeafNode(treeId, nodeIds[54], 0, (DAAL_DATA_TYPE)-0.011791727697180416);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)0.00037443798623586959);
    builder.addLeafNode(treeId, nodeIds[49], 1, (DAAL_DATA_TYPE)9.9965609843959968e-05);
    builder.addLeafNode(treeId, nodeIds[48], 1, (DAAL_DATA_TYPE)0.0065972863069663828);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[9], 1, 11, (DAAL_DATA_TYPE)-1.1194999999999997);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)0.0036160396412014961);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)-0.0052563651210882452);

}

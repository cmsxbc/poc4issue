 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree131(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 9, (DAAL_DATA_TYPE)0.29900000000000004);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 5, (DAAL_DATA_TYPE)0.7835000000000002);
    builder.addLeafNode(treeId, nodeIds[2], 0, (DAAL_DATA_TYPE)0.011789812418547544);
    builder.addLeafNode(treeId, nodeIds[2], 1, (DAAL_DATA_TYPE)0.00029086467499534288);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[1], 1, 11, (DAAL_DATA_TYPE)1.6385000000000003);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 11, (DAAL_DATA_TYPE)1.4445000000000003);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[6], 0, 22, (DAAL_DATA_TYPE)0.72750000000000015);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 2, (DAAL_DATA_TYPE)1.3075000000000003);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[8], 0, 1, (DAAL_DATA_TYPE)0.28150000000000003);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[9], 0, 15, (DAAL_DATA_TYPE)-1.3554999999999999);
    builder.addLeafNode(treeId, nodeIds[10], 0, (DAAL_DATA_TYPE)0.010203249650922688);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[10], 1, 13, (DAAL_DATA_TYPE)0.7855000000000002);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[12], 0, 6, (DAAL_DATA_TYPE)0.5525000000000001);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[13], 0, 19, (DAAL_DATA_TYPE)-1.0454999999999999);
    builder.addLeafNode(treeId, nodeIds[14], 0, (DAAL_DATA_TYPE)0.006457597477982864);
    builder.addLeafNode(treeId, nodeIds[14], 1, (DAAL_DATA_TYPE)-0.0038434715658659116);
    builder.addLeafNode(treeId, nodeIds[13], 1, (DAAL_DATA_TYPE)-0.01158099064603448);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[12], 1, 6, (DAAL_DATA_TYPE)-0.64949999999999986);
    builder.addLeafNode(treeId, nodeIds[18], 0, (DAAL_DATA_TYPE)0.0094087851575265329);
    builder.addLeafNode(treeId, nodeIds[18], 1, (DAAL_DATA_TYPE)0.00056395241214583325);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[9], 1, 23, (DAAL_DATA_TYPE)0.98650000000000004);
    builder.addLeafNode(treeId, nodeIds[21], 0, (DAAL_DATA_TYPE)-0.00082179222748998335);
    builder.addLeafNode(treeId, nodeIds[21], 1, (DAAL_DATA_TYPE)0.0068636792300130469);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[8], 1, 2, (DAAL_DATA_TYPE)1.5365000000000002);
    builder.addLeafNode(treeId, nodeIds[24], 0, (DAAL_DATA_TYPE)-0.012591440767049789);
    builder.addLeafNode(treeId, nodeIds[24], 1, (DAAL_DATA_TYPE)0.00011839921421864455);
    builder.addLeafNode(treeId, nodeIds[7], 1, (DAAL_DATA_TYPE)-0.0002555228291456232);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[6], 1, 3, (DAAL_DATA_TYPE)0.60550000000000004);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[28], 0, 6, (DAAL_DATA_TYPE)-0.15049999999999997);
    nodeIds[30] = builder.addSplitNode(treeId, nodeIds[29], 0, 6, (DAAL_DATA_TYPE)-0.73249999999999982);
    builder.addLeafNode(treeId, nodeIds[30], 0, (DAAL_DATA_TYPE)-0.0080606092736125005);
    builder.addLeafNode(treeId, nodeIds[30], 1, (DAAL_DATA_TYPE)0.0058575634285807608);
    builder.addLeafNode(treeId, nodeIds[29], 1, (DAAL_DATA_TYPE)-0.011606257934123279);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[28], 1, 0, (DAAL_DATA_TYPE)0.95250000000000001);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[34], 0, 22, (DAAL_DATA_TYPE)1.1065000000000003);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[35], 0, 5, (DAAL_DATA_TYPE)0.7945000000000001);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[36], 0, 10, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    builder.addLeafNode(treeId, nodeIds[37], 0, (DAAL_DATA_TYPE)0.0004601435006960579);
    builder.addLeafNode(treeId, nodeIds[37], 1, (DAAL_DATA_TYPE)-0.012924105946261151);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[36], 1, 13, (DAAL_DATA_TYPE)0.74050000000000005);
    builder.addLeafNode(treeId, nodeIds[40], 0, (DAAL_DATA_TYPE)-0.0056309693196619102);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[40], 1, 5, (DAAL_DATA_TYPE)1.0855000000000004);
    builder.addLeafNode(treeId, nodeIds[42], 0, (DAAL_DATA_TYPE)0.011222334876656533);
    builder.addLeafNode(treeId, nodeIds[42], 1, (DAAL_DATA_TYPE)-0.00089893983521809181);
    builder.addLeafNode(treeId, nodeIds[35], 1, (DAAL_DATA_TYPE)-0.010309792396922908);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[34], 1, 18, (DAAL_DATA_TYPE)0.42150000000000004);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[46], 0, 3, (DAAL_DATA_TYPE)1.5250000000000001);
    builder.addLeafNode(treeId, nodeIds[47], 0, (DAAL_DATA_TYPE)0.0088689214150820452);
    builder.addLeafNode(treeId, nodeIds[47], 1, (DAAL_DATA_TYPE)-0.00079964680713601416);
    builder.addLeafNode(treeId, nodeIds[46], 1, (DAAL_DATA_TYPE)-0.0043661999885978948);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[5], 1, 14, (DAAL_DATA_TYPE)-0.92549999999999988);
    builder.addLeafNode(treeId, nodeIds[51], 0, (DAAL_DATA_TYPE)0.0097718890763879313);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[51], 1, 1, (DAAL_DATA_TYPE)0.72850000000000004);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[53], 0, 14, (DAAL_DATA_TYPE)-0.39849999999999997);
    builder.addLeafNode(treeId, nodeIds[54], 0, (DAAL_DATA_TYPE)-0.0053023739312977897);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[54], 1, 26, (DAAL_DATA_TYPE)0.86050000000000015);
    builder.addLeafNode(treeId, nodeIds[56], 0, (DAAL_DATA_TYPE)0.012461543053388598);
    nodeIds[58] = builder.addSplitNode(treeId, nodeIds[56], 1, 22, (DAAL_DATA_TYPE)0.99450000000000005);
    builder.addLeafNode(treeId, nodeIds[58], 0, (DAAL_DATA_TYPE)-0.0016518135969009664);
    builder.addLeafNode(treeId, nodeIds[58], 1, (DAAL_DATA_TYPE)0.010925406927708537);
    builder.addLeafNode(treeId, nodeIds[53], 1, (DAAL_DATA_TYPE)-0.0054742551109354413);

}

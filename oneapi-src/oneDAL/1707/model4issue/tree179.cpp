 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree179(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 23, (DAAL_DATA_TYPE)0.97750000000000015);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 26, (DAAL_DATA_TYPE)1.2855000000000001);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 26, (DAAL_DATA_TYPE)0.74950000000000017);
    builder.addLeafNode(treeId, nodeIds[3], 0, (DAAL_DATA_TYPE)-0.0038194444612599911);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[3], 1, 25, (DAAL_DATA_TYPE)0.68250000000000022);
    builder.addLeafNode(treeId, nodeIds[5], 0, (DAAL_DATA_TYPE)0.011436401310493239);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[5], 1, 14, (DAAL_DATA_TYPE)-0.88249999999999995);
    builder.addLeafNode(treeId, nodeIds[7], 0, (DAAL_DATA_TYPE)0.011648793243803085);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[7], 1, 26, (DAAL_DATA_TYPE)0.97650000000000003);
    builder.addLeafNode(treeId, nodeIds[9], 0, (DAAL_DATA_TYPE)-0.0029828854596924558);
    builder.addLeafNode(treeId, nodeIds[9], 1, (DAAL_DATA_TYPE)0.005799529854622152);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[2], 1, 26, (DAAL_DATA_TYPE)1.5475000000000001);
    builder.addLeafNode(treeId, nodeIds[12], 0, (DAAL_DATA_TYPE)-0.0089943514216602564);
    builder.addLeafNode(treeId, nodeIds[12], 1, (DAAL_DATA_TYPE)0.002515197765703003);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[1], 1, 23, (DAAL_DATA_TYPE)0.97950000000000015);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[15], 0, 4, (DAAL_DATA_TYPE)1.1480000000000004);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[16], 0, 2, (DAAL_DATA_TYPE)-0.53949999999999998);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[17], 0, 15, (DAAL_DATA_TYPE)-0.44849999999999995);
    builder.addLeafNode(treeId, nodeIds[18], 0, (DAAL_DATA_TYPE)-0.012462390614673496);
    builder.addLeafNode(treeId, nodeIds[18], 1, (DAAL_DATA_TYPE)-0.0014979197829961778);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[17], 1, 15, (DAAL_DATA_TYPE)-0.41399999999999992);
    builder.addLeafNode(treeId, nodeIds[21], 0, (DAAL_DATA_TYPE)0.0078066087130638263);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[21], 1, 27, (DAAL_DATA_TYPE)0.82850000000000013);
    builder.addLeafNode(treeId, nodeIds[23], 0, (DAAL_DATA_TYPE)0.0017236057309603964);
    builder.addLeafNode(treeId, nodeIds[23], 1, (DAAL_DATA_TYPE)-0.0086713473421696115);
    builder.addLeafNode(treeId, nodeIds[16], 1, (DAAL_DATA_TYPE)-0.010173792353598402);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[15], 1, 17, (DAAL_DATA_TYPE)0.41850000000000004);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[27], 0, 2, (DAAL_DATA_TYPE)0.29050000000000004);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[28], 0, 19, (DAAL_DATA_TYPE)1.0630000000000004);
    nodeIds[30] = builder.addSplitNode(treeId, nodeIds[29], 0, 3, (DAAL_DATA_TYPE)0.6775000000000001);
    builder.addLeafNode(treeId, nodeIds[30], 0, (DAAL_DATA_TYPE)-0.0048854038649206533);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[30], 1, 21, (DAAL_DATA_TYPE)0.62050000000000016);
    builder.addLeafNode(treeId, nodeIds[32], 0, (DAAL_DATA_TYPE)0.0091254943473772568);
    builder.addLeafNode(treeId, nodeIds[32], 1, (DAAL_DATA_TYPE)0.00072854896256279562);
    builder.addLeafNode(treeId, nodeIds[29], 1, (DAAL_DATA_TYPE)-0.0071006005047820515);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[28], 1, 9, (DAAL_DATA_TYPE)0.69950000000000012);
    builder.addLeafNode(treeId, nodeIds[36], 0, (DAAL_DATA_TYPE)-0.00076363670329252886);
    builder.addLeafNode(treeId, nodeIds[36], 1, (DAAL_DATA_TYPE)0.0065804304049645618);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[27], 1, 1, (DAAL_DATA_TYPE)-1.3104999999999998);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[39], 0, 10, (DAAL_DATA_TYPE)-0.36249999999999993);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[40], 0, 11, (DAAL_DATA_TYPE)-1.5004999999999997);
    builder.addLeafNode(treeId, nodeIds[41], 0, (DAAL_DATA_TYPE)0.0089998451706308595);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[41], 1, 26, (DAAL_DATA_TYPE)0.91350000000000009);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[43], 0, 19, (DAAL_DATA_TYPE)-0.58149999999999979);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[44], 0, 18, (DAAL_DATA_TYPE)-0.12949999999999998);
    builder.addLeafNode(treeId, nodeIds[45], 0, (DAAL_DATA_TYPE)0.00684835286411856);
    builder.addLeafNode(treeId, nodeIds[45], 1, (DAAL_DATA_TYPE)-0.0041621711663901812);
    builder.addLeafNode(treeId, nodeIds[44], 1, (DAAL_DATA_TYPE)-0.0047764726337045441);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[43], 1, 27, (DAAL_DATA_TYPE)1.1715000000000002);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[49], 0, 8, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    builder.addLeafNode(treeId, nodeIds[50], 0, (DAAL_DATA_TYPE)-0.0017524395935470238);
    builder.addLeafNode(treeId, nodeIds[50], 1, (DAAL_DATA_TYPE)0.0064395750650424466);
    builder.addLeafNode(treeId, nodeIds[49], 1, (DAAL_DATA_TYPE)-0.0050261456575809108);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[40], 1, 14, (DAAL_DATA_TYPE)-1.1534999999999997);
    builder.addLeafNode(treeId, nodeIds[54], 0, (DAAL_DATA_TYPE)-0.01179106938135293);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[54], 1, 6, (DAAL_DATA_TYPE)-1.1224999999999998);
    builder.addLeafNode(treeId, nodeIds[56], 0, (DAAL_DATA_TYPE)0.0046797508373856546);
    nodeIds[58] = builder.addSplitNode(treeId, nodeIds[56], 1, 21, (DAAL_DATA_TYPE)0.88450000000000017);
    builder.addLeafNode(treeId, nodeIds[58], 0, (DAAL_DATA_TYPE)-0.001528945220266714);
    builder.addLeafNode(treeId, nodeIds[58], 1, (DAAL_DATA_TYPE)-0.0076770213978120299);
    builder.addLeafNode(treeId, nodeIds[39], 1, (DAAL_DATA_TYPE)4.4770356809934761e-05);

}

 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree137(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 14, (DAAL_DATA_TYPE)2.5005000000000002);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 9, (DAAL_DATA_TYPE)0.68950000000000011);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 25, (DAAL_DATA_TYPE)1.2185000000000004);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 21, (DAAL_DATA_TYPE)0.80150000000000021);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 26, (DAAL_DATA_TYPE)0.65950000000000009);
    builder.addLeafNode(treeId, nodeIds[5], 0, (DAAL_DATA_TYPE)-0.007370264545942729);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[5], 1, 10, (DAAL_DATA_TYPE)-0.18749999999999997);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 17, (DAAL_DATA_TYPE)0.77650000000000008);
    builder.addLeafNode(treeId, nodeIds[8], 0, (DAAL_DATA_TYPE)0.00058968790326616735);
    builder.addLeafNode(treeId, nodeIds[8], 1, (DAAL_DATA_TYPE)-0.0065435690149455014);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[7], 1, 10, (DAAL_DATA_TYPE)0.13550000000000004);
    builder.addLeafNode(treeId, nodeIds[11], 0, (DAAL_DATA_TYPE)0.009546890323205541);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[11], 1, 11, (DAAL_DATA_TYPE)1.0375000000000003);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[13], 0, 23, (DAAL_DATA_TYPE)0.98650000000000004);
    builder.addLeafNode(treeId, nodeIds[14], 0, (DAAL_DATA_TYPE)0.00823441800095287);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[14], 1, 5, (DAAL_DATA_TYPE)0.85250000000000015);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[16], 0, 15, (DAAL_DATA_TYPE)0.27250000000000008);
    builder.addLeafNode(treeId, nodeIds[17], 0, (DAAL_DATA_TYPE)0.00093923111421030919);
    builder.addLeafNode(treeId, nodeIds[17], 1, (DAAL_DATA_TYPE)-0.012879981451596207);
    builder.addLeafNode(treeId, nodeIds[16], 1, (DAAL_DATA_TYPE)0.0055541610327782117);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[13], 1, 1, (DAAL_DATA_TYPE)0.22550000000000003);
    builder.addLeafNode(treeId, nodeIds[21], 0, (DAAL_DATA_TYPE)0.0044790249085053802);
    builder.addLeafNode(treeId, nodeIds[21], 1, (DAAL_DATA_TYPE)-0.016979150714663171);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[4], 1, 3, (DAAL_DATA_TYPE)1.3765000000000003);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[24], 0, 15, (DAAL_DATA_TYPE)-0.087499999999999981);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[25], 0, 4, (DAAL_DATA_TYPE)0.70150000000000012);
    builder.addLeafNode(treeId, nodeIds[26], 0, (DAAL_DATA_TYPE)0.0063087570437577569);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[26], 1, 7, (DAAL_DATA_TYPE)0.15650000000000003);
    builder.addLeafNode(treeId, nodeIds[28], 0, (DAAL_DATA_TYPE)0.0040134526941732604);
    builder.addLeafNode(treeId, nodeIds[28], 1, (DAAL_DATA_TYPE)-0.004959895298816264);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[25], 1, 23, (DAAL_DATA_TYPE)0.98350000000000015);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[31], 0, 1, (DAAL_DATA_TYPE)-0.18149999999999997);
    builder.addLeafNode(treeId, nodeIds[32], 0, (DAAL_DATA_TYPE)0.0016217777500527779);
    builder.addLeafNode(treeId, nodeIds[32], 1, (DAAL_DATA_TYPE)-0.011090696111998775);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[31], 1, 15, (DAAL_DATA_TYPE)0.85850000000000015);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[35], 0, 10, (DAAL_DATA_TYPE)-0.92049999999999998);
    builder.addLeafNode(treeId, nodeIds[36], 0, (DAAL_DATA_TYPE)-0.0092867117556856889);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[36], 1, 27, (DAAL_DATA_TYPE)0.83650000000000013);
    builder.addLeafNode(treeId, nodeIds[38], 0, (DAAL_DATA_TYPE)-0.0024646821041748703);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[38], 1, 19, (DAAL_DATA_TYPE)0.33450000000000008);
    builder.addLeafNode(treeId, nodeIds[40], 0, (DAAL_DATA_TYPE)0.015148624300956726);
    builder.addLeafNode(treeId, nodeIds[40], 1, (DAAL_DATA_TYPE)0.00098564164247363808);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[35], 1, 5, (DAAL_DATA_TYPE)0.5445000000000001);
    builder.addLeafNode(treeId, nodeIds[43], 0, (DAAL_DATA_TYPE)0.013500037768648733);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[43], 1, 5, (DAAL_DATA_TYPE)0.76150000000000018);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[45], 0, 2, (DAAL_DATA_TYPE)0.10850000000000001);
    builder.addLeafNode(treeId, nodeIds[46], 0, (DAAL_DATA_TYPE)0.0039806996198261486);
    builder.addLeafNode(treeId, nodeIds[46], 1, (DAAL_DATA_TYPE)-0.013393031938799791);
    builder.addLeafNode(treeId, nodeIds[45], 1, (DAAL_DATA_TYPE)0.0060800282118692144);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[24], 1, 21, (DAAL_DATA_TYPE)0.97850000000000004);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[50], 0, 24, (DAAL_DATA_TYPE)1.1375000000000002);
    builder.addLeafNode(treeId, nodeIds[51], 0, (DAAL_DATA_TYPE)-0.00071343969410428637);
    builder.addLeafNode(treeId, nodeIds[51], 1, (DAAL_DATA_TYPE)-0.009463951030844138);
    builder.addLeafNode(treeId, nodeIds[50], 1, (DAAL_DATA_TYPE)0.0033994941984291198);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[3], 1, 7, (DAAL_DATA_TYPE)1.3325000000000002);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[55], 0, 3, (DAAL_DATA_TYPE)1.5745000000000002);
    builder.addLeafNode(treeId, nodeIds[56], 0, (DAAL_DATA_TYPE)-0.0070024120120291151);
    builder.addLeafNode(treeId, nodeIds[56], 1, (DAAL_DATA_TYPE)0.0037662281623025515);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)0.0068140881322324284);
    builder.addLeafNode(treeId, nodeIds[2], 1, (DAAL_DATA_TYPE)-0.00040510570685274664);
    builder.addLeafNode(treeId, nodeIds[1], 1, (DAAL_DATA_TYPE)-0.0062734645615236317);

}

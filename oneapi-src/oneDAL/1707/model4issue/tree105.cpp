 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree105(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 10, (DAAL_DATA_TYPE)-2.5549999999999993);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 16, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    builder.addLeafNode(treeId, nodeIds[2], 0, (DAAL_DATA_TYPE)-0.012951246953823351);
    builder.addLeafNode(treeId, nodeIds[2], 1, (DAAL_DATA_TYPE)0.001079853397927114);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[1], 1, 3, (DAAL_DATA_TYPE)1.4915000000000003);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 24, (DAAL_DATA_TYPE)0.64150000000000007);
    builder.addLeafNode(treeId, nodeIds[6], 0, (DAAL_DATA_TYPE)0.0024768319602720616);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[6], 1, 4, (DAAL_DATA_TYPE)0.51550000000000018);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[8], 0, 0, (DAAL_DATA_TYPE)0.40750000000000003);
    builder.addLeafNode(treeId, nodeIds[9], 0, (DAAL_DATA_TYPE)0.0053207991300555681);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[9], 1, 19, (DAAL_DATA_TYPE)1.6935000000000002);
    builder.addLeafNode(treeId, nodeIds[11], 0, (DAAL_DATA_TYPE)0.00045619987951575419);
    builder.addLeafNode(treeId, nodeIds[11], 1, (DAAL_DATA_TYPE)-0.008823920172461145);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[8], 1, 9, (DAAL_DATA_TYPE)0.53150000000000019);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[14], 0, 15, (DAAL_DATA_TYPE)0.60850000000000015);
    builder.addLeafNode(treeId, nodeIds[15], 0, (DAAL_DATA_TYPE)-0.0085875228250568564);
    builder.addLeafNode(treeId, nodeIds[15], 1, (DAAL_DATA_TYPE)6.7406179538617532e-05);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[14], 1, 22, (DAAL_DATA_TYPE)1.6145000000000003);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[18], 0, 2, (DAAL_DATA_TYPE)1.6215000000000004);
    nodeIds[20] = builder.addSplitNode(treeId, nodeIds[19], 0, 10, (DAAL_DATA_TYPE)-1.1744999999999999);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[20], 0, 1, (DAAL_DATA_TYPE)-0.77549999999999997);
    builder.addLeafNode(treeId, nodeIds[21], 0, (DAAL_DATA_TYPE)-0.0018431023601442574);
    builder.addLeafNode(treeId, nodeIds[21], 1, (DAAL_DATA_TYPE)0.0099846372796365858);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[20], 1, 0, (DAAL_DATA_TYPE)1.8945000000000001);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[24], 0, 21, (DAAL_DATA_TYPE)0.61150000000000004);
    builder.addLeafNode(treeId, nodeIds[25], 0, (DAAL_DATA_TYPE)0.0060218199753939222);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[25], 1, 21, (DAAL_DATA_TYPE)1.3975000000000002);
    builder.addLeafNode(treeId, nodeIds[27], 0, (DAAL_DATA_TYPE)-0.0014989418178932587);
    builder.addLeafNode(treeId, nodeIds[27], 1, (DAAL_DATA_TYPE)0.0048151232157456316);
    builder.addLeafNode(treeId, nodeIds[24], 1, (DAAL_DATA_TYPE)-0.0067743632417850558);
    builder.addLeafNode(treeId, nodeIds[19], 1, (DAAL_DATA_TYPE)0.010166852548718453);
    builder.addLeafNode(treeId, nodeIds[18], 1, (DAAL_DATA_TYPE)-0.0072423965608080232);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[5], 1, 10, (DAAL_DATA_TYPE)-1.5414999999999999);
    builder.addLeafNode(treeId, nodeIds[33], 0, (DAAL_DATA_TYPE)-0.0075517373794520455);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[33], 1, 1, (DAAL_DATA_TYPE)-0.67849999999999999);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[35], 0, 21, (DAAL_DATA_TYPE)1.1465000000000003);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[36], 0, 15, (DAAL_DATA_TYPE)-0.99449999999999983);
    builder.addLeafNode(treeId, nodeIds[37], 0, (DAAL_DATA_TYPE)0.0094612060655509273);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[37], 1, 24, (DAAL_DATA_TYPE)1.0795000000000001);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[39], 0, 21, (DAAL_DATA_TYPE)0.83550000000000002);
    builder.addLeafNode(treeId, nodeIds[40], 0, (DAAL_DATA_TYPE)-0.012022804041594469);
    builder.addLeafNode(treeId, nodeIds[40], 1, (DAAL_DATA_TYPE)-0.0010492134041727541);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[39], 1, 9, (DAAL_DATA_TYPE)0.95650000000000002);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[43], 0, 18, (DAAL_DATA_TYPE)-0.20849999999999996);
    builder.addLeafNode(treeId, nodeIds[44], 0, (DAAL_DATA_TYPE)0.019090203907002102);
    builder.addLeafNode(treeId, nodeIds[44], 1, (DAAL_DATA_TYPE)0.00062859429289465363);
    builder.addLeafNode(treeId, nodeIds[43], 1, (DAAL_DATA_TYPE)-0.0049625665739630211);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[36], 1, 8, (DAAL_DATA_TYPE)1.6300000000000001);
    builder.addLeafNode(treeId, nodeIds[48], 0, (DAAL_DATA_TYPE)0.014180409251047034);
    builder.addLeafNode(treeId, nodeIds[48], 1, (DAAL_DATA_TYPE)0.00077796906349249196);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[35], 1, 21, (DAAL_DATA_TYPE)0.9195000000000001);
    nodeIds[52] = builder.addSplitNode(treeId, nodeIds[51], 0, 2, (DAAL_DATA_TYPE)0.80950000000000022);
    builder.addLeafNode(treeId, nodeIds[52], 0, (DAAL_DATA_TYPE)-0.0021090799578624133);
    builder.addLeafNode(treeId, nodeIds[52], 1, (DAAL_DATA_TYPE)0.005250664600500405);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[51], 1, 22, (DAAL_DATA_TYPE)0.77250000000000008);
    builder.addLeafNode(treeId, nodeIds[55], 0, (DAAL_DATA_TYPE)-0.017127416850555511);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[55], 1, 9, (DAAL_DATA_TYPE)0.50950000000000017);
    builder.addLeafNode(treeId, nodeIds[57], 0, (DAAL_DATA_TYPE)0.010168654631291118);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[57], 1, 6, (DAAL_DATA_TYPE)1.1275000000000002);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)-0.0050525461813141527);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)0.0039642532307066413);

}

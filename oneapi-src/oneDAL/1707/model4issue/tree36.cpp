 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree36(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 25, (DAAL_DATA_TYPE)0.96550000000000014);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 25, (DAAL_DATA_TYPE)0.67850000000000021);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 21, (DAAL_DATA_TYPE)0.83050000000000013);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 9, (DAAL_DATA_TYPE)1.0555000000000001);
    builder.addLeafNode(treeId, nodeIds[4], 0, (DAAL_DATA_TYPE)-0.0055091511519228826);
    builder.addLeafNode(treeId, nodeIds[4], 1, (DAAL_DATA_TYPE)0.0039175628125667572);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[3], 1, 27, (DAAL_DATA_TYPE)0.83850000000000013);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 1, (DAAL_DATA_TYPE)0.89550000000000007);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[8], 0, 19, (DAAL_DATA_TYPE)1.0630000000000004);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[9], 0, 21, (DAAL_DATA_TYPE)0.84950000000000003);
    builder.addLeafNode(treeId, nodeIds[10], 0, (DAAL_DATA_TYPE)-0.0066898421832808745);
    builder.addLeafNode(treeId, nodeIds[10], 1, (DAAL_DATA_TYPE)0.0065239931872257823);
    builder.addLeafNode(treeId, nodeIds[9], 1, (DAAL_DATA_TYPE)-0.0026454268714015405);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[8], 1, 16, (DAAL_DATA_TYPE)1.9110000000000003);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[14], 0, 25, (DAAL_DATA_TYPE)0.50100000000000011);
    builder.addLeafNode(treeId, nodeIds[15], 0, (DAAL_DATA_TYPE)-0.018011027659688678);
    builder.addLeafNode(treeId, nodeIds[15], 1, (DAAL_DATA_TYPE)-0.0011592047495974434);
    builder.addLeafNode(treeId, nodeIds[14], 1, (DAAL_DATA_TYPE)0.0045710596327598286);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[7], 1, 11, (DAAL_DATA_TYPE)1.3865000000000001);
    nodeIds[20] = builder.addSplitNode(treeId, nodeIds[19], 0, 18, (DAAL_DATA_TYPE)0.17350000000000002);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[20], 0, 9, (DAAL_DATA_TYPE)0.95150000000000012);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[21], 0, 9, (DAAL_DATA_TYPE)0.83350000000000002);
    builder.addLeafNode(treeId, nodeIds[22], 0, (DAAL_DATA_TYPE)-0.0047633338175462874);
    builder.addLeafNode(treeId, nodeIds[22], 1, (DAAL_DATA_TYPE)0.0090539168100804094);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[21], 1, 4, (DAAL_DATA_TYPE)0.48850000000000005);
    builder.addLeafNode(treeId, nodeIds[25], 0, (DAAL_DATA_TYPE)-0.017301303732628916);
    builder.addLeafNode(treeId, nodeIds[25], 1, (DAAL_DATA_TYPE)-9.0176325577955992e-05);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[20], 1, 24, (DAAL_DATA_TYPE)1.4555000000000002);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[28], 0, 21, (DAAL_DATA_TYPE)0.90950000000000009);
    builder.addLeafNode(treeId, nodeIds[29], 0, (DAAL_DATA_TYPE)-0.0050158292457864097);
    builder.addLeafNode(treeId, nodeIds[29], 1, (DAAL_DATA_TYPE)0.0095753543756224909);
    builder.addLeafNode(treeId, nodeIds[28], 1, (DAAL_DATA_TYPE)-0.0076579531485384163);
    builder.addLeafNode(treeId, nodeIds[19], 1, (DAAL_DATA_TYPE)-0.013124538715928794);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[2], 1, 26, (DAAL_DATA_TYPE)0.77250000000000008);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[34], 0, 12, (DAAL_DATA_TYPE)1.6610000000000003);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[35], 0, 5, (DAAL_DATA_TYPE)0.80150000000000021);
    builder.addLeafNode(treeId, nodeIds[36], 0, (DAAL_DATA_TYPE)-0.002663213086128235);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[36], 1, 1, (DAAL_DATA_TYPE)-0.44549999999999995);
    builder.addLeafNode(treeId, nodeIds[38], 0, (DAAL_DATA_TYPE)-0.0035550221123478633);
    builder.addLeafNode(treeId, nodeIds[38], 1, (DAAL_DATA_TYPE)0.013897543263678647);
    builder.addLeafNode(treeId, nodeIds[35], 1, (DAAL_DATA_TYPE)-0.0084986632165399579);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[34], 1, 0, (DAAL_DATA_TYPE)1.6975000000000002);
    builder.addLeafNode(treeId, nodeIds[42], 0, (DAAL_DATA_TYPE)0.0033168313567153657);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[42], 1, 27, (DAAL_DATA_TYPE)0.88250000000000017);
    builder.addLeafNode(treeId, nodeIds[44], 0, (DAAL_DATA_TYPE)0.0047202704714076355);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[44], 1, 21, (DAAL_DATA_TYPE)1.5230000000000004);
    builder.addLeafNode(treeId, nodeIds[46], 0, (DAAL_DATA_TYPE)-0.0107029919742897);
    builder.addLeafNode(treeId, nodeIds[46], 1, (DAAL_DATA_TYPE)0.0050621274681318376);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[1], 1, 5, (DAAL_DATA_TYPE)0.88650000000000018);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[49], 0, 11, (DAAL_DATA_TYPE)1.0525000000000002);
    builder.addLeafNode(treeId, nodeIds[50], 0, (DAAL_DATA_TYPE)-0.0053050541265283607);
    builder.addLeafNode(treeId, nodeIds[50], 1, (DAAL_DATA_TYPE)0.00084012833139496658);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[49], 1, 25, (DAAL_DATA_TYPE)1.8760000000000001);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[53], 0, 0, (DAAL_DATA_TYPE)2.2265000000000006);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[54], 0, 11, (DAAL_DATA_TYPE)1.4215000000000002);
    builder.addLeafNode(treeId, nodeIds[55], 0, (DAAL_DATA_TYPE)0.0018316666973090118);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)-0.0065342985485729423);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)-0.0087098727904019822);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[53], 1, 10, (DAAL_DATA_TYPE)1.0345000000000002);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)-0.0070154124635015518);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)0.003791042109546454);

}

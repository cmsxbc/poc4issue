 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree130(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 4, (DAAL_DATA_TYPE)1.6505000000000003);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 4, (DAAL_DATA_TYPE)1.6155000000000002);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 3, (DAAL_DATA_TYPE)1.6175000000000004);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 26, (DAAL_DATA_TYPE)2.5650000000000004);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 22, (DAAL_DATA_TYPE)1.6145000000000003);
    builder.addLeafNode(treeId, nodeIds[5], 0, (DAAL_DATA_TYPE)0.00026440860412857463);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[5], 1, 5, (DAAL_DATA_TYPE)1.3855000000000002);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 19, (DAAL_DATA_TYPE)0.70250000000000001);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[8], 0, 25, (DAAL_DATA_TYPE)1.0675000000000001);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[9], 0, 4, (DAAL_DATA_TYPE)-0.45249999999999996);
    builder.addLeafNode(treeId, nodeIds[10], 0, (DAAL_DATA_TYPE)-0.0049977886956185102);
    builder.addLeafNode(treeId, nodeIds[10], 1, (DAAL_DATA_TYPE)-0.017760981115348198);
    builder.addLeafNode(treeId, nodeIds[9], 1, (DAAL_DATA_TYPE)-0.001084105825672547);
    builder.addLeafNode(treeId, nodeIds[8], 1, (DAAL_DATA_TYPE)0.0024525839516094756);
    builder.addLeafNode(treeId, nodeIds[7], 1, (DAAL_DATA_TYPE)0.0022934156957154089);
    builder.addLeafNode(treeId, nodeIds[4], 1, (DAAL_DATA_TYPE)0.0073317147418856619);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[3], 1, 22, (DAAL_DATA_TYPE)1.1625000000000003);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[17], 0, 27, (DAAL_DATA_TYPE)0.7985000000000001);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[18], 0, 27, (DAAL_DATA_TYPE)0.75650000000000006);
    builder.addLeafNode(treeId, nodeIds[19], 0, (DAAL_DATA_TYPE)-0.0018168523361015579);
    builder.addLeafNode(treeId, nodeIds[19], 1, (DAAL_DATA_TYPE)0.0080042283632792543);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[18], 1, 26, (DAAL_DATA_TYPE)0.94950000000000012);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[22], 0, 10, (DAAL_DATA_TYPE)-0.025499999999999998);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[23], 0, 18, (DAAL_DATA_TYPE)-0.51649999999999985);
    builder.addLeafNode(treeId, nodeIds[24], 0, (DAAL_DATA_TYPE)0.0057005706131458287);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[24], 1, 23, (DAAL_DATA_TYPE)0.98950000000000016);
    builder.addLeafNode(treeId, nodeIds[26], 0, (DAAL_DATA_TYPE)-0.00046906876156017891);
    builder.addLeafNode(treeId, nodeIds[26], 1, (DAAL_DATA_TYPE)-0.012612596255811778);
    builder.addLeafNode(treeId, nodeIds[23], 1, (DAAL_DATA_TYPE)-0.011655119535348871);
    nodeIds[30] = builder.addSplitNode(treeId, nodeIds[22], 1, 27, (DAAL_DATA_TYPE)1.0965000000000003);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[30], 0, 14, (DAAL_DATA_TYPE)0.63750000000000007);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[31], 0, 15, (DAAL_DATA_TYPE)0.58250000000000013);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[32], 0, 10, (DAAL_DATA_TYPE)-0.52949999999999997);
    builder.addLeafNode(treeId, nodeIds[33], 0, (DAAL_DATA_TYPE)-0.011008393027536248);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[33], 1, 0, (DAAL_DATA_TYPE)0.54950000000000021);
    builder.addLeafNode(treeId, nodeIds[35], 0, (DAAL_DATA_TYPE)-0.00897929664116375);
    builder.addLeafNode(treeId, nodeIds[35], 1, (DAAL_DATA_TYPE)0.0035957425435566731);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[32], 1, 16, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    builder.addLeafNode(treeId, nodeIds[38], 0, (DAAL_DATA_TYPE)0.0095415460561136048);
    builder.addLeafNode(treeId, nodeIds[38], 1, (DAAL_DATA_TYPE)-0.0030809611436866582);
    builder.addLeafNode(treeId, nodeIds[31], 1, (DAAL_DATA_TYPE)0.0085963380311361772);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[30], 1, 26, (DAAL_DATA_TYPE)1.6445000000000001);
    builder.addLeafNode(treeId, nodeIds[42], 0, (DAAL_DATA_TYPE)-0.0057264273191214993);
    builder.addLeafNode(treeId, nodeIds[42], 1, (DAAL_DATA_TYPE)0.001602940923343836);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[17], 1, 15, (DAAL_DATA_TYPE)0.50800000000000012);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[45], 0, 25, (DAAL_DATA_TYPE)0.91350000000000009);
    builder.addLeafNode(treeId, nodeIds[46], 0, (DAAL_DATA_TYPE)0.011863112435676157);
    builder.addLeafNode(treeId, nodeIds[46], 1, (DAAL_DATA_TYPE)0.0012588373614966664);
    builder.addLeafNode(treeId, nodeIds[45], 1, (DAAL_DATA_TYPE)-0.006176452542115983);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[2], 1, 21, (DAAL_DATA_TYPE)0.85550000000000004);
    builder.addLeafNode(treeId, nodeIds[50], 0, (DAAL_DATA_TYPE)0.0025770611688494685);
    builder.addLeafNode(treeId, nodeIds[50], 1, (DAAL_DATA_TYPE)-0.010100732904604892);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[1], 1, 21, (DAAL_DATA_TYPE)0.94650000000000001);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[53], 0, 19, (DAAL_DATA_TYPE)-0.74749999999999994);
    builder.addLeafNode(treeId, nodeIds[54], 0, (DAAL_DATA_TYPE)-0.0074720272350878945);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[54], 1, 13, (DAAL_DATA_TYPE)1.0315000000000001);
    builder.addLeafNode(treeId, nodeIds[56], 0, (DAAL_DATA_TYPE)0.0082135959954134068);
    builder.addLeafNode(treeId, nodeIds[56], 1, (DAAL_DATA_TYPE)-0.0016446085167782648);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[53], 1, 15, (DAAL_DATA_TYPE)-0.11549999999999999);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)0.014908314885105939);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)0.0018262362480163574);

}

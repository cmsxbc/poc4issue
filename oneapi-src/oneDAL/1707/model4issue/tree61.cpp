 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree61(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 0, (DAAL_DATA_TYPE)2.7735000000000007);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 6, (DAAL_DATA_TYPE)-2.7564999999999995);
    builder.addLeafNode(treeId, nodeIds[2], 0, (DAAL_DATA_TYPE)-0.012189595190727194);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[2], 1, 5, (DAAL_DATA_TYPE)2.3995000000000002);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 22, (DAAL_DATA_TYPE)0.74450000000000005);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 21, (DAAL_DATA_TYPE)0.40200000000000008);
    builder.addLeafNode(treeId, nodeIds[6], 0, (DAAL_DATA_TYPE)-0.0062185283845815906);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[6], 1, 6, (DAAL_DATA_TYPE)0.85950000000000004);
    builder.addLeafNode(treeId, nodeIds[8], 0, (DAAL_DATA_TYPE)0.0040508110019613379);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[8], 1, 21, (DAAL_DATA_TYPE)0.9195000000000001);
    builder.addLeafNode(treeId, nodeIds[10], 0, (DAAL_DATA_TYPE)0.00056376688257612367);
    builder.addLeafNode(treeId, nodeIds[10], 1, (DAAL_DATA_TYPE)-0.015196970956666129);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[5], 1, 22, (DAAL_DATA_TYPE)0.96350000000000013);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[13], 0, 1, (DAAL_DATA_TYPE)-2.1154999999999995);
    builder.addLeafNode(treeId, nodeIds[14], 0, (DAAL_DATA_TYPE)0.009862518007004703);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[14], 1, 21, (DAAL_DATA_TYPE)0.57350000000000001);
    builder.addLeafNode(treeId, nodeIds[16], 0, (DAAL_DATA_TYPE)0.0028971034349227439);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[16], 1, 14, (DAAL_DATA_TYPE)0.65250000000000019);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[18], 0, 6, (DAAL_DATA_TYPE)-2.0489999999999995);
    builder.addLeafNode(treeId, nodeIds[19], 0, (DAAL_DATA_TYPE)0.0064999044618823318);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[19], 1, 21, (DAAL_DATA_TYPE)0.89550000000000007);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[21], 0, 27, (DAAL_DATA_TYPE)0.69550000000000012);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[22], 0, 0, (DAAL_DATA_TYPE)0.93350000000000011);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[23], 0, 10, (DAAL_DATA_TYPE)-0.21649999999999997);
    builder.addLeafNode(treeId, nodeIds[24], 0, (DAAL_DATA_TYPE)-0.011422088960321939);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[24], 1, 9, (DAAL_DATA_TYPE)0.59350000000000003);
    builder.addLeafNode(treeId, nodeIds[26], 0, (DAAL_DATA_TYPE)-0.007846272662281991);
    builder.addLeafNode(treeId, nodeIds[26], 1, (DAAL_DATA_TYPE)0.010436877630876773);
    builder.addLeafNode(treeId, nodeIds[23], 1, (DAAL_DATA_TYPE)0.010676613785326481);
    nodeIds[30] = builder.addSplitNode(treeId, nodeIds[22], 1, 26, (DAAL_DATA_TYPE)0.87350000000000005);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[30], 0, 12, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[31], 0, 27, (DAAL_DATA_TYPE)0.79250000000000009);
    builder.addLeafNode(treeId, nodeIds[32], 0, (DAAL_DATA_TYPE)0.00032239890014621576);
    builder.addLeafNode(treeId, nodeIds[32], 1, (DAAL_DATA_TYPE)-0.012463407607182213);
    builder.addLeafNode(treeId, nodeIds[31], 1, (DAAL_DATA_TYPE)-0.01239549840279555);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[30], 1, 27, (DAAL_DATA_TYPE)0.7965000000000001);
    builder.addLeafNode(treeId, nodeIds[36], 0, (DAAL_DATA_TYPE)0.0023511035594384415);
    builder.addLeafNode(treeId, nodeIds[36], 1, (DAAL_DATA_TYPE)-0.0046485588104198021);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[21], 1, 17, (DAAL_DATA_TYPE)0.60950000000000004);
    builder.addLeafNode(treeId, nodeIds[39], 0, (DAAL_DATA_TYPE)0.0033131862680117288);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[39], 1, 23, (DAAL_DATA_TYPE)0.98250000000000004);
    builder.addLeafNode(treeId, nodeIds[41], 0, (DAAL_DATA_TYPE)-0.0086479404421111981);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[41], 1, 10, (DAAL_DATA_TYPE)-1.4304999999999997);
    builder.addLeafNode(treeId, nodeIds[43], 0, (DAAL_DATA_TYPE)-0.0097800940036391615);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[43], 1, 23, (DAAL_DATA_TYPE)1.2810000000000004);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[45], 0, 26, (DAAL_DATA_TYPE)0.83850000000000013);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[46], 0, 2, (DAAL_DATA_TYPE)-1.1099999999999997);
    builder.addLeafNode(treeId, nodeIds[47], 0, (DAAL_DATA_TYPE)0.0071872661156313763);
    builder.addLeafNode(treeId, nodeIds[47], 1, (DAAL_DATA_TYPE)-0.0074838372959396037);
    builder.addLeafNode(treeId, nodeIds[46], 1, (DAAL_DATA_TYPE)0.000773662933906658);
    builder.addLeafNode(treeId, nodeIds[45], 1, (DAAL_DATA_TYPE)0.0094855116556088123);
    nodeIds[52] = builder.addSplitNode(treeId, nodeIds[18], 1, 27, (DAAL_DATA_TYPE)1.0545000000000002);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[52], 0, 11, (DAAL_DATA_TYPE)0.52550000000000019);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[53], 0, 27, (DAAL_DATA_TYPE)0.97750000000000015);
    builder.addLeafNode(treeId, nodeIds[54], 0, (DAAL_DATA_TYPE)-0.0017140069626377407);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)0.014358384203579691);
    builder.addLeafNode(treeId, nodeIds[53], 1, (DAAL_DATA_TYPE)0.0054143573610565153);
    builder.addLeafNode(treeId, nodeIds[52], 1, (DAAL_DATA_TYPE)-0.0057002618694899695);
    builder.addLeafNode(treeId, nodeIds[13], 1, (DAAL_DATA_TYPE)0.00062113925536109353);
    builder.addLeafNode(treeId, nodeIds[4], 1, (DAAL_DATA_TYPE)0.0052352838829645646);
    builder.addLeafNode(treeId, nodeIds[1], 1, (DAAL_DATA_TYPE)-0.0081341758376692191);

}

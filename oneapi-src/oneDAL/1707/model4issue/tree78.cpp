 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree78(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 25, (DAAL_DATA_TYPE)1.2815000000000001);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 18, (DAAL_DATA_TYPE)-2.1414999999999993);
    builder.addLeafNode(treeId, nodeIds[2], 0, (DAAL_DATA_TYPE)0.0075855658097720852);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[2], 1, 26, (DAAL_DATA_TYPE)0.86550000000000005);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 16, (DAAL_DATA_TYPE)1.9110000000000003);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 2, (DAAL_DATA_TYPE)1.4565000000000003);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[6], 0, 17, (DAAL_DATA_TYPE)1.8715000000000004);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 15, (DAAL_DATA_TYPE)-1.6139999999999997);
    builder.addLeafNode(treeId, nodeIds[8], 0, (DAAL_DATA_TYPE)-0.0084566370692364008);
    builder.addLeafNode(treeId, nodeIds[8], 1, (DAAL_DATA_TYPE)0.00085104828998124624);
    builder.addLeafNode(treeId, nodeIds[7], 1, (DAAL_DATA_TYPE)0.010383881409378614);
    builder.addLeafNode(treeId, nodeIds[6], 1, (DAAL_DATA_TYPE)-0.0057543225167842396);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[5], 1, 27, (DAAL_DATA_TYPE)0.76050000000000006);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[13], 0, 5, (DAAL_DATA_TYPE)0.37050000000000005);
    builder.addLeafNode(treeId, nodeIds[14], 0, (DAAL_DATA_TYPE)-0.011242847204208374);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[14], 1, 17, (DAAL_DATA_TYPE)0.86850000000000016);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[16], 0, 13, (DAAL_DATA_TYPE)0.65950000000000009);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[17], 0, 10, (DAAL_DATA_TYPE)-0.045499999999999992);
    builder.addLeafNode(treeId, nodeIds[18], 0, (DAAL_DATA_TYPE)0.012421847343444824);
    builder.addLeafNode(treeId, nodeIds[18], 1, (DAAL_DATA_TYPE)-0.0011104219752113994);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[17], 1, 3, (DAAL_DATA_TYPE)0.63450000000000017);
    builder.addLeafNode(treeId, nodeIds[21], 0, (DAAL_DATA_TYPE)-0.009817747389779816);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[21], 1, 18, (DAAL_DATA_TYPE)0.71350000000000013);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[23], 0, 6, (DAAL_DATA_TYPE)-0.36049999999999993);
    builder.addLeafNode(treeId, nodeIds[24], 0, (DAAL_DATA_TYPE)0.0033482299257929513);
    builder.addLeafNode(treeId, nodeIds[24], 1, (DAAL_DATA_TYPE)-0.0096994887199252852);
    builder.addLeafNode(treeId, nodeIds[23], 1, (DAAL_DATA_TYPE)0.006493609094698179);
    builder.addLeafNode(treeId, nodeIds[16], 1, (DAAL_DATA_TYPE)0.0032044834000574556);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[13], 1, 6, (DAAL_DATA_TYPE)-0.23949999999999996);
    nodeIds[30] = builder.addSplitNode(treeId, nodeIds[29], 0, 11, (DAAL_DATA_TYPE)0.76850000000000007);
    builder.addLeafNode(treeId, nodeIds[30], 0, (DAAL_DATA_TYPE)-0.0059450592178650003);
    builder.addLeafNode(treeId, nodeIds[30], 1, (DAAL_DATA_TYPE)-0.018066969205226217);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[29], 1, 23, (DAAL_DATA_TYPE)0.99850000000000005);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[33], 0, 10, (DAAL_DATA_TYPE)0.91150000000000009);
    builder.addLeafNode(treeId, nodeIds[34], 0, (DAAL_DATA_TYPE)-0.010295352078320687);
    builder.addLeafNode(treeId, nodeIds[34], 1, (DAAL_DATA_TYPE)0.0014814173569902779);
    builder.addLeafNode(treeId, nodeIds[33], 1, (DAAL_DATA_TYPE)0.0077463036589324481);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[4], 1, 25, (DAAL_DATA_TYPE)0.78850000000000009);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[38], 0, 4, (DAAL_DATA_TYPE)0.52850000000000008);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[39], 0, 10, (DAAL_DATA_TYPE)-1.5094999999999998);
    builder.addLeafNode(treeId, nodeIds[40], 0, (DAAL_DATA_TYPE)-0.0093898046269731712);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[40], 1, 10, (DAAL_DATA_TYPE)-0.95649999999999979);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[42], 0, 4, (DAAL_DATA_TYPE)0.051500000000000004);
    builder.addLeafNode(treeId, nodeIds[43], 0, (DAAL_DATA_TYPE)0.0090233531205895102);
    builder.addLeafNode(treeId, nodeIds[43], 1, (DAAL_DATA_TYPE)-0.0046782890842719518);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[42], 1, 26, (DAAL_DATA_TYPE)0.89050000000000018);
    builder.addLeafNode(treeId, nodeIds[46], 0, (DAAL_DATA_TYPE)0.0040062815009150659);
    builder.addLeafNode(treeId, nodeIds[46], 1, (DAAL_DATA_TYPE)-0.0032647850518834846);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[39], 1, 21, (DAAL_DATA_TYPE)1.7440000000000002);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[49], 0, 10, (DAAL_DATA_TYPE)-1.4604999999999999);
    builder.addLeafNode(treeId, nodeIds[50], 0, (DAAL_DATA_TYPE)0.011865311041474343);
    builder.addLeafNode(treeId, nodeIds[50], 1, (DAAL_DATA_TYPE)-0.00026907316446304322);
    builder.addLeafNode(treeId, nodeIds[49], 1, (DAAL_DATA_TYPE)0.01272768088749477);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[38], 1, 20, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    builder.addLeafNode(treeId, nodeIds[54], 0, (DAAL_DATA_TYPE)0.0026437794013800934);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[54], 1, 10, (DAAL_DATA_TYPE)0.19350000000000003);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[56], 0, 25, (DAAL_DATA_TYPE)0.94150000000000011);
    builder.addLeafNode(treeId, nodeIds[57], 0, (DAAL_DATA_TYPE)0.0012968639746064915);
    builder.addLeafNode(treeId, nodeIds[57], 1, (DAAL_DATA_TYPE)-0.0050621291978613422);
    builder.addLeafNode(treeId, nodeIds[56], 1, (DAAL_DATA_TYPE)0.0027582537348414793);
    builder.addLeafNode(treeId, nodeIds[1], 1, (DAAL_DATA_TYPE)-0.00145535124821049);

}

 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree52(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 22, (DAAL_DATA_TYPE)1.0065000000000002);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 22, (DAAL_DATA_TYPE)0.80750000000000022);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 13, (DAAL_DATA_TYPE)0.32350000000000007);
    builder.addLeafNode(treeId, nodeIds[3], 0, (DAAL_DATA_TYPE)-0.012834639714232514);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[3], 1, 13, (DAAL_DATA_TYPE)1.7615000000000001);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 25, (DAAL_DATA_TYPE)0.94550000000000012);
    builder.addLeafNode(treeId, nodeIds[6], 0, (DAAL_DATA_TYPE)0.0026812439278402697);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[6], 1, 5, (DAAL_DATA_TYPE)0.6605000000000002);
    builder.addLeafNode(treeId, nodeIds[8], 0, (DAAL_DATA_TYPE)-0.011419284234152121);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[8], 1, 2, (DAAL_DATA_TYPE)0.20900000000000002);
    builder.addLeafNode(treeId, nodeIds[10], 0, (DAAL_DATA_TYPE)0.0026495358839728478);
    builder.addLeafNode(treeId, nodeIds[10], 1, (DAAL_DATA_TYPE)-0.0049478045436290074);
    builder.addLeafNode(treeId, nodeIds[5], 1, (DAAL_DATA_TYPE)0.011144614199528823);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[2], 1, 24, (DAAL_DATA_TYPE)0.73550000000000015);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[14], 0, 17, (DAAL_DATA_TYPE)1.3325000000000002);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[15], 0, 15, (DAAL_DATA_TYPE)0.77850000000000008);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[16], 0, 2, (DAAL_DATA_TYPE)-0.85549999999999982);
    builder.addLeafNode(treeId, nodeIds[17], 0, (DAAL_DATA_TYPE)-0.0095566774683970013);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[17], 1, 17, (DAAL_DATA_TYPE)0.52050000000000007);
    builder.addLeafNode(treeId, nodeIds[19], 0, (DAAL_DATA_TYPE)-0.007651350517635761);
    builder.addLeafNode(treeId, nodeIds[19], 1, (DAAL_DATA_TYPE)0.0027218575360345061);
    builder.addLeafNode(treeId, nodeIds[16], 1, (DAAL_DATA_TYPE)0.0047057821262461042);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[15], 1, 0, (DAAL_DATA_TYPE)0.98850000000000005);
    builder.addLeafNode(treeId, nodeIds[23], 0, (DAAL_DATA_TYPE)0.01778781748106403);
    builder.addLeafNode(treeId, nodeIds[23], 1, (DAAL_DATA_TYPE)-0.001297088492323052);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[14], 1, 24, (DAAL_DATA_TYPE)0.99650000000000005);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[26], 0, 21, (DAAL_DATA_TYPE)0.61150000000000004);
    builder.addLeafNode(treeId, nodeIds[27], 0, (DAAL_DATA_TYPE)0.0043371587844663545);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[27], 1, 25, (DAAL_DATA_TYPE)0.29250000000000004);
    builder.addLeafNode(treeId, nodeIds[29], 0, (DAAL_DATA_TYPE)0.0067552704044750765);
    builder.addLeafNode(treeId, nodeIds[29], 1, (DAAL_DATA_TYPE)-0.0048061659122619945);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[26], 1, 15, (DAAL_DATA_TYPE)-0.99449999999999983);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[32], 0, 19, (DAAL_DATA_TYPE)1.2125000000000001);
    builder.addLeafNode(treeId, nodeIds[33], 0, (DAAL_DATA_TYPE)0.0053275201492101317);
    builder.addLeafNode(treeId, nodeIds[33], 1, (DAAL_DATA_TYPE)-0.0084645151737190432);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[32], 1, 17, (DAAL_DATA_TYPE)0.83250000000000013);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[36], 0, 7, (DAAL_DATA_TYPE)1.0590000000000004);
    builder.addLeafNode(treeId, nodeIds[37], 0, (DAAL_DATA_TYPE)-0.0020173025636994928);
    builder.addLeafNode(treeId, nodeIds[37], 1, (DAAL_DATA_TYPE)-0.010582750501917371);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[36], 1, 14, (DAAL_DATA_TYPE)1.7570000000000001);
    builder.addLeafNode(treeId, nodeIds[40], 0, (DAAL_DATA_TYPE)0.00050698664491798833);
    builder.addLeafNode(treeId, nodeIds[40], 1, (DAAL_DATA_TYPE)0.013650816103274172);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[1], 1, 21, (DAAL_DATA_TYPE)1.0205000000000002);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[43], 0, 3, (DAAL_DATA_TYPE)1.7315000000000003);
    builder.addLeafNode(treeId, nodeIds[44], 0, (DAAL_DATA_TYPE)0.0031335777017983805);
    builder.addLeafNode(treeId, nodeIds[44], 1, (DAAL_DATA_TYPE)-0.0038014265697267724);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[43], 1, 5, (DAAL_DATA_TYPE)1.4125000000000003);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[47], 0, 17, (DAAL_DATA_TYPE)0.39750000000000008);
    builder.addLeafNode(treeId, nodeIds[48], 0, (DAAL_DATA_TYPE)0.011410070024430752);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[48], 1, 18, (DAAL_DATA_TYPE)-2.1414999999999993);
    builder.addLeafNode(treeId, nodeIds[50], 0, (DAAL_DATA_TYPE)0.011278266764499924);
    nodeIds[52] = builder.addSplitNode(treeId, nodeIds[50], 1, 18, (DAAL_DATA_TYPE)-1.2709999999999997);
    builder.addLeafNode(treeId, nodeIds[52], 0, (DAAL_DATA_TYPE)-0.010025091540245784);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[52], 1, 22, (DAAL_DATA_TYPE)1.0605000000000002);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[54], 0, 20, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    builder.addLeafNode(treeId, nodeIds[55], 0, (DAAL_DATA_TYPE)-0.0032207588775683259);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)-0.015694474535329);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)-0.00045963173353039062);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[47], 1, 3, (DAAL_DATA_TYPE)1.8795000000000002);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)0.0062223128552706744);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)-0.0071436850974957158);

}

 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree4(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 25, (DAAL_DATA_TYPE)1.2815000000000001);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 26, (DAAL_DATA_TYPE)0.77650000000000008);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 5, (DAAL_DATA_TYPE)0.85250000000000015);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 24, (DAAL_DATA_TYPE)0.71850000000000003);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 22, (DAAL_DATA_TYPE)1.0865000000000002);
    builder.addLeafNode(treeId, nodeIds[5], 0, (DAAL_DATA_TYPE)-0.0057372341261190535);
    builder.addLeafNode(treeId, nodeIds[5], 1, (DAAL_DATA_TYPE)0.011196925370923934);
    builder.addLeafNode(treeId, nodeIds[4], 1, (DAAL_DATA_TYPE)-0.010861102928375376);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[3], 1, 27, (DAAL_DATA_TYPE)0.9195000000000001);
    builder.addLeafNode(treeId, nodeIds[9], 0, (DAAL_DATA_TYPE)0.003160775198723919);
    builder.addLeafNode(treeId, nodeIds[9], 1, (DAAL_DATA_TYPE)-0.019397512243853679);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[2], 1, 27, (DAAL_DATA_TYPE)0.90450000000000019);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[12], 0, 26, (DAAL_DATA_TYPE)0.87350000000000005);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[13], 0, 25, (DAAL_DATA_TYPE)0.94550000000000012);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[14], 0, 25, (DAAL_DATA_TYPE)0.62350000000000005);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[15], 0, 21, (DAAL_DATA_TYPE)0.82450000000000012);
    builder.addLeafNode(treeId, nodeIds[16], 0, (DAAL_DATA_TYPE)-0.012099220793125995);
    builder.addLeafNode(treeId, nodeIds[16], 1, (DAAL_DATA_TYPE)0.00367412144137967);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[15], 1, 27, (DAAL_DATA_TYPE)0.79950000000000021);
    builder.addLeafNode(treeId, nodeIds[19], 0, (DAAL_DATA_TYPE)0.013765091838679095);
    builder.addLeafNode(treeId, nodeIds[19], 1, (DAAL_DATA_TYPE)0.00029968286419773964);
    builder.addLeafNode(treeId, nodeIds[14], 1, (DAAL_DATA_TYPE)-0.0069053809050210694);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[13], 1, 25, (DAAL_DATA_TYPE)0.67850000000000021);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[23], 0, 9, (DAAL_DATA_TYPE)0.68950000000000011);
    builder.addLeafNode(treeId, nodeIds[24], 0, (DAAL_DATA_TYPE)-0.0086164132806292749);
    builder.addLeafNode(treeId, nodeIds[24], 1, (DAAL_DATA_TYPE)0.0088428987673035385);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[23], 1, 25, (DAAL_DATA_TYPE)0.98450000000000004);
    builder.addLeafNode(treeId, nodeIds[27], 0, (DAAL_DATA_TYPE)0.016457048336747278);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[27], 1, 26, (DAAL_DATA_TYPE)0.95850000000000002);
    builder.addLeafNode(treeId, nodeIds[29], 0, (DAAL_DATA_TYPE)-0.00061071544187143447);
    builder.addLeafNode(treeId, nodeIds[29], 1, (DAAL_DATA_TYPE)0.012420282143217918);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[12], 1, 22, (DAAL_DATA_TYPE)1.0485000000000002);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[32], 0, 24, (DAAL_DATA_TYPE)1.0435000000000001);
    builder.addLeafNode(treeId, nodeIds[33], 0, (DAAL_DATA_TYPE)-0.013487937070784115);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[33], 1, 25, (DAAL_DATA_TYPE)0.62350000000000005);
    builder.addLeafNode(treeId, nodeIds[35], 0, (DAAL_DATA_TYPE)-0.0071399201995858523);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[35], 1, 25, (DAAL_DATA_TYPE)0.99250000000000005);
    builder.addLeafNode(treeId, nodeIds[37], 0, (DAAL_DATA_TYPE)0.0061620085719502424);
    builder.addLeafNode(treeId, nodeIds[37], 1, (DAAL_DATA_TYPE)-0.002170711582866163);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[32], 1, 25, (DAAL_DATA_TYPE)0.69450000000000001);
    builder.addLeafNode(treeId, nodeIds[40], 0, (DAAL_DATA_TYPE)-0.0031169594796888671);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[40], 1, 9, (DAAL_DATA_TYPE)1.2815000000000001);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[42], 0, 4, (DAAL_DATA_TYPE)1.5885000000000002);
    builder.addLeafNode(treeId, nodeIds[43], 0, (DAAL_DATA_TYPE)0.0051071957181925065);
    builder.addLeafNode(treeId, nodeIds[43], 1, (DAAL_DATA_TYPE)-0.015073651682447503);
    builder.addLeafNode(treeId, nodeIds[42], 1, (DAAL_DATA_TYPE)0.012545676226030568);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[1], 1, 27, (DAAL_DATA_TYPE)0.89550000000000007);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[47], 0, 10, (DAAL_DATA_TYPE)1.1075000000000002);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[48], 0, 21, (DAAL_DATA_TYPE)1.0535000000000003);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[49], 0, 22, (DAAL_DATA_TYPE)0.94750000000000012);
    builder.addLeafNode(treeId, nodeIds[50], 0, (DAAL_DATA_TYPE)-0.010438009627439359);
    builder.addLeafNode(treeId, nodeIds[50], 1, (DAAL_DATA_TYPE)0.0018944139857041209);
    builder.addLeafNode(treeId, nodeIds[49], 1, (DAAL_DATA_TYPE)0.012928199622689224);
    builder.addLeafNode(treeId, nodeIds[48], 1, (DAAL_DATA_TYPE)-0.023840889010740364);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[47], 1, 24, (DAAL_DATA_TYPE)1.2485000000000002);
    builder.addLeafNode(treeId, nodeIds[55], 0, (DAAL_DATA_TYPE)-0.015872046244778275);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[55], 1, 25, (DAAL_DATA_TYPE)1.4755000000000003);
    builder.addLeafNode(treeId, nodeIds[57], 0, (DAAL_DATA_TYPE)0.0028752605062584546);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[57], 1, 3, (DAAL_DATA_TYPE)1.8975000000000002);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)-0.0071636707442147398);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)-0.023956520482897758);

}

 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree177(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 23, (DAAL_DATA_TYPE)0.97750000000000015);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 26, (DAAL_DATA_TYPE)1.2855000000000001);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 24, (DAAL_DATA_TYPE)0.88750000000000007);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 4, (DAAL_DATA_TYPE)-1.0364999999999998);
    builder.addLeafNode(treeId, nodeIds[4], 0, (DAAL_DATA_TYPE)-0.0064310054155066604);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[4], 1, 21, (DAAL_DATA_TYPE)0.92450000000000021);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[6], 0, 2, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    builder.addLeafNode(treeId, nodeIds[7], 0, (DAAL_DATA_TYPE)0.012527540065348147);
    builder.addLeafNode(treeId, nodeIds[7], 1, (DAAL_DATA_TYPE)0.0018275686857911447);
    builder.addLeafNode(treeId, nodeIds[6], 1, (DAAL_DATA_TYPE)-0.0052508426152847038);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[3], 1, 6, (DAAL_DATA_TYPE)0.42550000000000004);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[11], 0, 5, (DAAL_DATA_TYPE)1.0275000000000001);
    builder.addLeafNode(treeId, nodeIds[12], 0, (DAAL_DATA_TYPE)-0.0017083569931296205);
    builder.addLeafNode(treeId, nodeIds[12], 1, (DAAL_DATA_TYPE)0.011911417694673652);
    builder.addLeafNode(treeId, nodeIds[11], 1, (DAAL_DATA_TYPE)0.014349323536815315);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[2], 1, 25, (DAAL_DATA_TYPE)1.3335000000000001);
    builder.addLeafNode(treeId, nodeIds[16], 0, (DAAL_DATA_TYPE)-0.0087279096731673108);
    builder.addLeafNode(treeId, nodeIds[16], 1, (DAAL_DATA_TYPE)0.0030061164804335155);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[1], 1, 2, (DAAL_DATA_TYPE)-0.71599999999999986);
    nodeIds[20] = builder.addSplitNode(treeId, nodeIds[19], 0, 0, (DAAL_DATA_TYPE)0.64750000000000008);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[20], 0, 22, (DAAL_DATA_TYPE)1.6755000000000002);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[21], 0, 8, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[22], 0, 13, (DAAL_DATA_TYPE)1.0125000000000002);
    builder.addLeafNode(treeId, nodeIds[23], 0, (DAAL_DATA_TYPE)-0.0020120713685654597);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[23], 1, 5, (DAAL_DATA_TYPE)1.0895000000000004);
    builder.addLeafNode(treeId, nodeIds[25], 0, (DAAL_DATA_TYPE)0.0063524627168543447);
    builder.addLeafNode(treeId, nodeIds[25], 1, (DAAL_DATA_TYPE)-0.0025432276596139012);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[22], 1, 1, (DAAL_DATA_TYPE)-0.59249999999999992);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[28], 0, 18, (DAAL_DATA_TYPE)-0.27349999999999997);
    builder.addLeafNode(treeId, nodeIds[29], 0, (DAAL_DATA_TYPE)-0.0088572116551564675);
    builder.addLeafNode(treeId, nodeIds[29], 1, (DAAL_DATA_TYPE)0.0062078292937354845);
    builder.addLeafNode(treeId, nodeIds[28], 1, (DAAL_DATA_TYPE)-0.0064243570589119711);
    builder.addLeafNode(treeId, nodeIds[21], 1, (DAAL_DATA_TYPE)-0.012562381699681283);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[20], 1, 0, (DAAL_DATA_TYPE)0.69450000000000001);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[34], 0, 20, (DAAL_DATA_TYPE)2.3265000000000002);
    builder.addLeafNode(treeId, nodeIds[35], 0, (DAAL_DATA_TYPE)0.0090525908854786029);
    builder.addLeafNode(treeId, nodeIds[35], 1, (DAAL_DATA_TYPE)-0.0018358403172057409);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[34], 1, 1, (DAAL_DATA_TYPE)1.3405000000000002);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[38], 0, 19, (DAAL_DATA_TYPE)0.46850000000000008);
    builder.addLeafNode(treeId, nodeIds[39], 0, (DAAL_DATA_TYPE)0.0010753365558380322);
    builder.addLeafNode(treeId, nodeIds[39], 1, (DAAL_DATA_TYPE)-0.0018886719685801607);
    builder.addLeafNode(treeId, nodeIds[38], 1, (DAAL_DATA_TYPE)-0.005686945209890837);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[19], 1, 6, (DAAL_DATA_TYPE)1.4355000000000002);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[43], 0, 1, (DAAL_DATA_TYPE)-0.41049999999999992);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[44], 0, 17, (DAAL_DATA_TYPE)1.8485000000000003);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[45], 0, 2, (DAAL_DATA_TYPE)1.6325000000000001);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[46], 0, 2, (DAAL_DATA_TYPE)1.3075000000000003);
    builder.addLeafNode(treeId, nodeIds[47], 0, (DAAL_DATA_TYPE)-0.00053411647792909762);
    builder.addLeafNode(treeId, nodeIds[47], 1, (DAAL_DATA_TYPE)-0.005088816348888716);
    builder.addLeafNode(treeId, nodeIds[46], 1, (DAAL_DATA_TYPE)0.0052562196756040964);
    builder.addLeafNode(treeId, nodeIds[45], 1, (DAAL_DATA_TYPE)0.0044346410479587338);
    builder.addLeafNode(treeId, nodeIds[44], 1, (DAAL_DATA_TYPE)0.00093236263435915304);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[43], 1, 22, (DAAL_DATA_TYPE)1.9580000000000002);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[53], 0, 26, (DAAL_DATA_TYPE)0.87150000000000005);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[54], 0, 21, (DAAL_DATA_TYPE)0.99950000000000017);
    builder.addLeafNode(treeId, nodeIds[55], 0, (DAAL_DATA_TYPE)-0.001498120900806646);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)0.013308126218616961);
    nodeIds[58] = builder.addSplitNode(treeId, nodeIds[54], 1, 9, (DAAL_DATA_TYPE)1.3255000000000001);
    builder.addLeafNode(treeId, nodeIds[58], 0, (DAAL_DATA_TYPE)-0.008271377763148768);
    builder.addLeafNode(treeId, nodeIds[58], 1, (DAAL_DATA_TYPE)-0.00024920572653751484);
    builder.addLeafNode(treeId, nodeIds[53], 1, (DAAL_DATA_TYPE)0.0078385994370494573);

}

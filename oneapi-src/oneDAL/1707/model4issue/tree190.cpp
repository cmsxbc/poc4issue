 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree190(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 5, (DAAL_DATA_TYPE)1.3445000000000003);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 27, (DAAL_DATA_TYPE)1.5265000000000002);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 4, (DAAL_DATA_TYPE)1.7245000000000001);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 4, (DAAL_DATA_TYPE)1.6645000000000001);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 19, (DAAL_DATA_TYPE)1.0425000000000002);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 19, (DAAL_DATA_TYPE)1.0085000000000002);
    builder.addLeafNode(treeId, nodeIds[6], 0, (DAAL_DATA_TYPE)5.5853684933968424e-05);
    builder.addLeafNode(treeId, nodeIds[6], 1, (DAAL_DATA_TYPE)0.007062748576955576);
    builder.addLeafNode(treeId, nodeIds[5], 1, (DAAL_DATA_TYPE)-0.0010238351681547968);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[4], 1, 18, (DAAL_DATA_TYPE)-0.51649999999999985);
    builder.addLeafNode(treeId, nodeIds[10], 0, (DAAL_DATA_TYPE)-0.0011794025014186728);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[10], 1, 1, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    builder.addLeafNode(treeId, nodeIds[12], 0, (DAAL_DATA_TYPE)0.0034581771205094733);
    builder.addLeafNode(treeId, nodeIds[12], 1, (DAAL_DATA_TYPE)0.012525748390704396);
    builder.addLeafNode(treeId, nodeIds[3], 1, (DAAL_DATA_TYPE)-0.0067298284701762662);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[2], 1, 19, (DAAL_DATA_TYPE)1.0425000000000002);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[16], 0, 0, (DAAL_DATA_TYPE)0.45850000000000007);
    builder.addLeafNode(treeId, nodeIds[17], 0, (DAAL_DATA_TYPE)0.0029285901226103308);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[17], 1, 25, (DAAL_DATA_TYPE)1.2265000000000004);
    builder.addLeafNode(treeId, nodeIds[19], 0, (DAAL_DATA_TYPE)-0.0098403452030782195);
    builder.addLeafNode(treeId, nodeIds[19], 1, (DAAL_DATA_TYPE)-0.00090855413815006626);
    builder.addLeafNode(treeId, nodeIds[16], 1, (DAAL_DATA_TYPE)0.0032287322029116608);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[1], 1, 9, (DAAL_DATA_TYPE)1.2195000000000003);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[23], 0, 3, (DAAL_DATA_TYPE)0.63950000000000007);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[24], 0, 3, (DAAL_DATA_TYPE)0.46750000000000008);
    builder.addLeafNode(treeId, nodeIds[25], 0, (DAAL_DATA_TYPE)0.0035053398243376412);
    builder.addLeafNode(treeId, nodeIds[25], 1, (DAAL_DATA_TYPE)0.010810592209043748);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[24], 1, 0, (DAAL_DATA_TYPE)0.61550000000000005);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[28], 0, 25, (DAAL_DATA_TYPE)1.1635000000000002);
    builder.addLeafNode(treeId, nodeIds[29], 0, (DAAL_DATA_TYPE)0.0012754052059372536);
    builder.addLeafNode(treeId, nodeIds[29], 1, (DAAL_DATA_TYPE)-0.007814723526438078);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[28], 1, 21, (DAAL_DATA_TYPE)0.53150000000000019);
    builder.addLeafNode(treeId, nodeIds[32], 0, (DAAL_DATA_TYPE)-0.0045596660380916934);
    builder.addLeafNode(treeId, nodeIds[32], 1, (DAAL_DATA_TYPE)0.0028283693788096996);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[23], 1, 11, (DAAL_DATA_TYPE)-0.87049999999999994);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[35], 0, 14, (DAAL_DATA_TYPE)-0.73949999999999994);
    builder.addLeafNode(treeId, nodeIds[36], 0, (DAAL_DATA_TYPE)-0.011334660244174302);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[36], 1, 9, (DAAL_DATA_TYPE)1.5605000000000002);
    builder.addLeafNode(treeId, nodeIds[38], 0, (DAAL_DATA_TYPE)-0.0066602731619270581);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[38], 1, 24, (DAAL_DATA_TYPE)1.2285000000000001);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[40], 0, 25, (DAAL_DATA_TYPE)1.1095000000000004);
    builder.addLeafNode(treeId, nodeIds[41], 0, (DAAL_DATA_TYPE)0.0030156942180600832);
    builder.addLeafNode(treeId, nodeIds[41], 1, (DAAL_DATA_TYPE)-0.0076350846405451494);
    builder.addLeafNode(treeId, nodeIds[40], 1, (DAAL_DATA_TYPE)0.0072735337074846034);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[35], 1, 14, (DAAL_DATA_TYPE)-1.4454999999999998);
    builder.addLeafNode(treeId, nodeIds[45], 0, (DAAL_DATA_TYPE)0.0078240630566142506);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[45], 1, 23, (DAAL_DATA_TYPE)0.98850000000000005);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[47], 0, 24, (DAAL_DATA_TYPE)0.88550000000000006);
    builder.addLeafNode(treeId, nodeIds[48], 0, (DAAL_DATA_TYPE)-0.0022367521877943849);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[48], 1, 13, (DAAL_DATA_TYPE)1.7255000000000003);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[50], 0, 17, (DAAL_DATA_TYPE)0.90350000000000008);
    builder.addLeafNode(treeId, nodeIds[51], 0, (DAAL_DATA_TYPE)0.0025441548932576552);
    builder.addLeafNode(treeId, nodeIds[51], 1, (DAAL_DATA_TYPE)0.010960638686083258);
    builder.addLeafNode(treeId, nodeIds[50], 1, (DAAL_DATA_TYPE)-0.00049883987230714411);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[47], 1, 10, (DAAL_DATA_TYPE)-0.18749999999999997);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[55], 0, 11, (DAAL_DATA_TYPE)0.91550000000000009);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[56], 0, 15, (DAAL_DATA_TYPE)0.15350000000000003);
    builder.addLeafNode(treeId, nodeIds[57], 0, (DAAL_DATA_TYPE)-0.0068187134904100707);
    builder.addLeafNode(treeId, nodeIds[57], 1, (DAAL_DATA_TYPE)0.0037224096747065362);
    builder.addLeafNode(treeId, nodeIds[56], 1, (DAAL_DATA_TYPE)-0.010719513862083356);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)0.00045323217857303551);

}

 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree197(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 19, (DAAL_DATA_TYPE)-1.0864999999999998);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 17, (DAAL_DATA_TYPE)1.1175000000000004);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 21, (DAAL_DATA_TYPE)1.3545000000000003);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 24, (DAAL_DATA_TYPE)1.7450000000000003);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 7, (DAAL_DATA_TYPE)-1.0774999999999999);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 3, (DAAL_DATA_TYPE)0.61950000000000005);
    builder.addLeafNode(treeId, nodeIds[6], 0, (DAAL_DATA_TYPE)-0.00093163168339136361);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[6], 1, 8, (DAAL_DATA_TYPE)1.6300000000000001);
    builder.addLeafNode(treeId, nodeIds[8], 0, (DAAL_DATA_TYPE)0.0036871849011818301);
    builder.addLeafNode(treeId, nodeIds[8], 1, (DAAL_DATA_TYPE)0.014262788813738598);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[5], 1, 7, (DAAL_DATA_TYPE)-0.87449999999999994);
    builder.addLeafNode(treeId, nodeIds[11], 0, (DAAL_DATA_TYPE)-0.0087106034421594817);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[11], 1, 4, (DAAL_DATA_TYPE)1.6025000000000003);
    builder.addLeafNode(treeId, nodeIds[13], 0, (DAAL_DATA_TYPE)0.00059851248431001401);
    builder.addLeafNode(treeId, nodeIds[13], 1, (DAAL_DATA_TYPE)0.0093777256352560873);
    builder.addLeafNode(treeId, nodeIds[4], 1, (DAAL_DATA_TYPE)-0.007361485286881882);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[3], 1, 9, (DAAL_DATA_TYPE)1.2475000000000003);
    builder.addLeafNode(treeId, nodeIds[17], 0, (DAAL_DATA_TYPE)0.011870456140401752);
    builder.addLeafNode(treeId, nodeIds[17], 1, (DAAL_DATA_TYPE)0.0024408340904741518);
    nodeIds[20] = builder.addSplitNode(treeId, nodeIds[2], 1, 11, (DAAL_DATA_TYPE)-0.82149999999999979);
    builder.addLeafNode(treeId, nodeIds[20], 0, (DAAL_DATA_TYPE)0.0040996126608834381);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[20], 1, 17, (DAAL_DATA_TYPE)1.2035000000000002);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[22], 0, 21, (DAAL_DATA_TYPE)0.90350000000000008);
    builder.addLeafNode(treeId, nodeIds[23], 0, (DAAL_DATA_TYPE)-0.0032941478192627148);
    builder.addLeafNode(treeId, nodeIds[23], 1, (DAAL_DATA_TYPE)-0.014946649856865408);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[22], 1, 9, (DAAL_DATA_TYPE)0.86550000000000005);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[26], 0, 0, (DAAL_DATA_TYPE)0.66350000000000009);
    builder.addLeafNode(treeId, nodeIds[27], 0, (DAAL_DATA_TYPE)-0.0060245608864352117);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[27], 1, 2, (DAAL_DATA_TYPE)-0.45149999999999996);
    builder.addLeafNode(treeId, nodeIds[29], 0, (DAAL_DATA_TYPE)0.013281333562918008);
    builder.addLeafNode(treeId, nodeIds[29], 1, (DAAL_DATA_TYPE)0.0013271807926631643);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[26], 1, 5, (DAAL_DATA_TYPE)1.7625000000000002);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[32], 0, 6, (DAAL_DATA_TYPE)-0.15749999999999997);
    builder.addLeafNode(treeId, nodeIds[33], 0, (DAAL_DATA_TYPE)-0.011978383015318797);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[33], 1, 3, (DAAL_DATA_TYPE)1.2785000000000002);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[35], 0, 26, (DAAL_DATA_TYPE)0.99750000000000016);
    builder.addLeafNode(treeId, nodeIds[36], 0, (DAAL_DATA_TYPE)0.0064459955871657097);
    builder.addLeafNode(treeId, nodeIds[36], 1, (DAAL_DATA_TYPE)-0.0028629332687705755);
    builder.addLeafNode(treeId, nodeIds[35], 1, (DAAL_DATA_TYPE)-0.0086234071431681523);
    builder.addLeafNode(treeId, nodeIds[32], 1, (DAAL_DATA_TYPE)0.0035919627230703976);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[1], 1, 23, (DAAL_DATA_TYPE)0.97750000000000015);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[41], 0, 11, (DAAL_DATA_TYPE)-1.1654999999999998);
    builder.addLeafNode(treeId, nodeIds[42], 0, (DAAL_DATA_TYPE)0.0089006850845180455);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[42], 1, 11, (DAAL_DATA_TYPE)-0.61449999999999994);
    builder.addLeafNode(treeId, nodeIds[44], 0, (DAAL_DATA_TYPE)-0.0076995473413262521);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[44], 1, 24, (DAAL_DATA_TYPE)1.0065000000000002);
    builder.addLeafNode(treeId, nodeIds[46], 0, (DAAL_DATA_TYPE)-0.00024786200008701341);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[46], 1, 17, (DAAL_DATA_TYPE)1.0105000000000002);
    builder.addLeafNode(treeId, nodeIds[48], 0, (DAAL_DATA_TYPE)0.013324426075401295);
    builder.addLeafNode(treeId, nodeIds[48], 1, (DAAL_DATA_TYPE)0.0024642899277664367);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[41], 1, 13, (DAAL_DATA_TYPE)1.0675000000000001);
    builder.addLeafNode(treeId, nodeIds[51], 0, (DAAL_DATA_TYPE)-0.0008382615312759195);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[51], 1, 11, (DAAL_DATA_TYPE)-1.5784999999999998);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[53], 0, 10, (DAAL_DATA_TYPE)-0.94049999999999978);
    builder.addLeafNode(treeId, nodeIds[54], 0, (DAAL_DATA_TYPE)-0.012698432499461849);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)-0.0016361764209189764);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[53], 1, 0, (DAAL_DATA_TYPE)1.3185000000000002);
    nodeIds[58] = builder.addSplitNode(treeId, nodeIds[57], 0, 0, (DAAL_DATA_TYPE)0.65650000000000019);
    builder.addLeafNode(treeId, nodeIds[58], 0, (DAAL_DATA_TYPE)-0.00057428755938394903);
    builder.addLeafNode(treeId, nodeIds[58], 1, (DAAL_DATA_TYPE)0.0022285265699816003);
    builder.addLeafNode(treeId, nodeIds[57], 1, (DAAL_DATA_TYPE)-0.0016701737067718046);

}

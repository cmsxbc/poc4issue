 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree166(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 21, (DAAL_DATA_TYPE)0.58250000000000013);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 22, (DAAL_DATA_TYPE)0.76950000000000018);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 4, (DAAL_DATA_TYPE)0.71850000000000003);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 14, (DAAL_DATA_TYPE)0.068500000000000019);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 13, (DAAL_DATA_TYPE)0.58950000000000002);
    builder.addLeafNode(treeId, nodeIds[5], 0, (DAAL_DATA_TYPE)-0.018170758026341598);
    builder.addLeafNode(treeId, nodeIds[5], 1, (DAAL_DATA_TYPE)-0.0036304636703183256);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[4], 1, 10, (DAAL_DATA_TYPE)0.44550000000000006);
    builder.addLeafNode(treeId, nodeIds[8], 0, (DAAL_DATA_TYPE)-0.0032545615049699946);
    builder.addLeafNode(treeId, nodeIds[8], 1, (DAAL_DATA_TYPE)0.0067977358333089141);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[3], 1, 11, (DAAL_DATA_TYPE)0.087500000000000008);
    builder.addLeafNode(treeId, nodeIds[11], 0, (DAAL_DATA_TYPE)0.011375500238500535);
    builder.addLeafNode(treeId, nodeIds[11], 1, (DAAL_DATA_TYPE)-0.001887565515935421);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[2], 1, 6, (DAAL_DATA_TYPE)-0.81649999999999989);
    builder.addLeafNode(treeId, nodeIds[14], 0, (DAAL_DATA_TYPE)0.0096431848193917966);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[14], 1, 21, (DAAL_DATA_TYPE)0.44800000000000006);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[16], 0, 1, (DAAL_DATA_TYPE)0.44250000000000006);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[17], 0, 11, (DAAL_DATA_TYPE)0.055500000000000008);
    builder.addLeafNode(treeId, nodeIds[18], 0, (DAAL_DATA_TYPE)-0.0024926404779156051);
    builder.addLeafNode(treeId, nodeIds[18], 1, (DAAL_DATA_TYPE)0.0069659346087764086);
    builder.addLeafNode(treeId, nodeIds[17], 1, (DAAL_DATA_TYPE)-0.0082666908204555509);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[16], 1, 2, (DAAL_DATA_TYPE)-0.72749999999999992);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[22], 0, 5, (DAAL_DATA_TYPE)0.85250000000000015);
    builder.addLeafNode(treeId, nodeIds[23], 0, (DAAL_DATA_TYPE)-0.0081511388346552846);
    builder.addLeafNode(treeId, nodeIds[23], 1, (DAAL_DATA_TYPE)0.0025932883174391466);
    builder.addLeafNode(treeId, nodeIds[22], 1, (DAAL_DATA_TYPE)0.0077142053666083444);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[1], 1, 22, (DAAL_DATA_TYPE)0.72750000000000015);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[27], 0, 25, (DAAL_DATA_TYPE)0.33150000000000007);
    builder.addLeafNode(treeId, nodeIds[28], 0, (DAAL_DATA_TYPE)-0.0044848247924271752);
    nodeIds[30] = builder.addSplitNode(treeId, nodeIds[28], 1, 9, (DAAL_DATA_TYPE)1.2815000000000001);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[30], 0, 26, (DAAL_DATA_TYPE)1.1425000000000003);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[31], 0, 19, (DAAL_DATA_TYPE)-0.56749999999999978);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[32], 0, 26, (DAAL_DATA_TYPE)0.89650000000000019);
    builder.addLeafNode(treeId, nodeIds[33], 0, (DAAL_DATA_TYPE)0.0022116752332923088);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[33], 1, 26, (DAAL_DATA_TYPE)0.98050000000000004);
    builder.addLeafNode(treeId, nodeIds[35], 0, (DAAL_DATA_TYPE)-0.011953292732747894);
    builder.addLeafNode(treeId, nodeIds[35], 1, (DAAL_DATA_TYPE)0.0032883723288597098);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[32], 1, 4, (DAAL_DATA_TYPE)-1.3269999999999997);
    builder.addLeafNode(treeId, nodeIds[38], 0, (DAAL_DATA_TYPE)-0.0023501034340132842);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[38], 1, 19, (DAAL_DATA_TYPE)0.10700000000000001);
    builder.addLeafNode(treeId, nodeIds[40], 0, (DAAL_DATA_TYPE)0.01133027886013117);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[40], 1, 4, (DAAL_DATA_TYPE)0.51550000000000018);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[42], 0, 25, (DAAL_DATA_TYPE)0.73750000000000016);
    builder.addLeafNode(treeId, nodeIds[43], 0, (DAAL_DATA_TYPE)0.010806901701565447);
    builder.addLeafNode(treeId, nodeIds[43], 1, (DAAL_DATA_TYPE)0.0029031214439204302);
    builder.addLeafNode(treeId, nodeIds[42], 1, (DAAL_DATA_TYPE)-0.0037872523100425798);
    builder.addLeafNode(treeId, nodeIds[31], 1, (DAAL_DATA_TYPE)-0.0073398056340270822);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[30], 1, 27, (DAAL_DATA_TYPE)0.96350000000000013);
    builder.addLeafNode(treeId, nodeIds[48], 0, (DAAL_DATA_TYPE)0.0030374856459357861);
    builder.addLeafNode(treeId, nodeIds[48], 1, (DAAL_DATA_TYPE)0.012428677215107851);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[27], 1, 24, (DAAL_DATA_TYPE)0.57600000000000007);
    nodeIds[52] = builder.addSplitNode(treeId, nodeIds[51], 0, 3, (DAAL_DATA_TYPE)0.36150000000000004);
    builder.addLeafNode(treeId, nodeIds[52], 0, (DAAL_DATA_TYPE)0.0085709091405650334);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[52], 1, 25, (DAAL_DATA_TYPE)0.73050000000000004);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[54], 0, 25, (DAAL_DATA_TYPE)0.42850000000000005);
    builder.addLeafNode(treeId, nodeIds[55], 0, (DAAL_DATA_TYPE)0.0039601102351180971);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)-0.0071434213577405278);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)0.0044719189449097035);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[51], 1, 3, (DAAL_DATA_TYPE)0.74450000000000005);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)-0.0011191090147267694);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)9.5675030786638533e-05);

}

 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree206(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 15, (DAAL_DATA_TYPE)1.2575000000000001);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 0, (DAAL_DATA_TYPE)2.5615000000000006);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 3, (DAAL_DATA_TYPE)0.28550000000000003);
    builder.addLeafNode(treeId, nodeIds[3], 0, (DAAL_DATA_TYPE)-0.0018365568049901395);
    builder.addLeafNode(treeId, nodeIds[3], 1, (DAAL_DATA_TYPE)6.1503526821852266e-05);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[2], 1, 24, (DAAL_DATA_TYPE)0.82050000000000012);
    builder.addLeafNode(treeId, nodeIds[6], 0, (DAAL_DATA_TYPE)0.0051271757997927219);
    builder.addLeafNode(treeId, nodeIds[6], 1, (DAAL_DATA_TYPE)-0.0056186204363725019);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[1], 1, 6, (DAAL_DATA_TYPE)-1.8214999999999997);
    builder.addLeafNode(treeId, nodeIds[9], 0, (DAAL_DATA_TYPE)0.0099865473453597791);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[9], 1, 24, (DAAL_DATA_TYPE)0.7855000000000002);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[11], 0, 10, (DAAL_DATA_TYPE)-0.47449999999999992);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[12], 0, 15, (DAAL_DATA_TYPE)1.5435000000000001);
    builder.addLeafNode(treeId, nodeIds[13], 0, (DAAL_DATA_TYPE)0.0029692355018013563);
    builder.addLeafNode(treeId, nodeIds[13], 1, (DAAL_DATA_TYPE)-0.0073113042706002794);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[12], 1, 11, (DAAL_DATA_TYPE)0.66550000000000009);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[16], 0, 4, (DAAL_DATA_TYPE)-0.46549999999999997);
    builder.addLeafNode(treeId, nodeIds[17], 0, (DAAL_DATA_TYPE)-0.0011719510915714343);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[17], 1, 7, (DAAL_DATA_TYPE)-0.89149999999999985);
    builder.addLeafNode(treeId, nodeIds[19], 0, (DAAL_DATA_TYPE)-0.00041711908000122226);
    builder.addLeafNode(treeId, nodeIds[19], 1, (DAAL_DATA_TYPE)0.0093403402007306412);
    builder.addLeafNode(treeId, nodeIds[16], 1, (DAAL_DATA_TYPE)0.011749483538525445);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[11], 1, 9, (DAAL_DATA_TYPE)0.74550000000000016);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[23], 0, 5, (DAAL_DATA_TYPE)0.97650000000000003);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[24], 0, 9, (DAAL_DATA_TYPE)0.68950000000000011);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[25], 0, 10, (DAAL_DATA_TYPE)1.2545000000000002);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[26], 0, 2, (DAAL_DATA_TYPE)-0.33299999999999996);
    builder.addLeafNode(treeId, nodeIds[27], 0, (DAAL_DATA_TYPE)-0.010107389228368128);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[27], 1, 2, (DAAL_DATA_TYPE)0.27900000000000008);
    builder.addLeafNode(treeId, nodeIds[29], 0, (DAAL_DATA_TYPE)0.0066013476966569826);
    builder.addLeafNode(treeId, nodeIds[29], 1, (DAAL_DATA_TYPE)-0.0094215525935093577);
    builder.addLeafNode(treeId, nodeIds[26], 1, (DAAL_DATA_TYPE)0.0046666785795241601);
    builder.addLeafNode(treeId, nodeIds[25], 1, (DAAL_DATA_TYPE)-0.012595868754821519);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[24], 1, 3, (DAAL_DATA_TYPE)1.0895000000000004);
    builder.addLeafNode(treeId, nodeIds[34], 0, (DAAL_DATA_TYPE)0.009560177725291363);
    builder.addLeafNode(treeId, nodeIds[34], 1, (DAAL_DATA_TYPE)-0.0038485255495821734);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[23], 1, 17, (DAAL_DATA_TYPE)1.0565000000000002);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[37], 0, 24, (DAAL_DATA_TYPE)0.9215000000000001);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[38], 0, 10, (DAAL_DATA_TYPE)0.34950000000000003);
    builder.addLeafNode(treeId, nodeIds[39], 0, (DAAL_DATA_TYPE)-0.0036222529373267985);
    builder.addLeafNode(treeId, nodeIds[39], 1, (DAAL_DATA_TYPE)0.0056536338567225774);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[38], 1, 11, (DAAL_DATA_TYPE)0.90150000000000008);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[42], 0, 7, (DAAL_DATA_TYPE)0.45850000000000007);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[43], 0, 13, (DAAL_DATA_TYPE)1.1445000000000001);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[44], 0, 13, (DAAL_DATA_TYPE)0.9125000000000002);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[45], 0, 5, (DAAL_DATA_TYPE)0.97250000000000003);
    builder.addLeafNode(treeId, nodeIds[46], 0, (DAAL_DATA_TYPE)0.015341275967657567);
    builder.addLeafNode(treeId, nodeIds[46], 1, (DAAL_DATA_TYPE)0.0031852471176534894);
    builder.addLeafNode(treeId, nodeIds[45], 1, (DAAL_DATA_TYPE)0.017758719849845638);
    builder.addLeafNode(treeId, nodeIds[44], 1, (DAAL_DATA_TYPE)0.0020800224904503144);
    builder.addLeafNode(treeId, nodeIds[43], 1, (DAAL_DATA_TYPE)-0.00014733375620938117);
    builder.addLeafNode(treeId, nodeIds[42], 1, (DAAL_DATA_TYPE)-0.0011523640110484652);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[37], 1, 4, (DAAL_DATA_TYPE)-1.0599999999999998);
    builder.addLeafNode(treeId, nodeIds[53], 0, (DAAL_DATA_TYPE)0.0068206610037013895);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[53], 1, 26, (DAAL_DATA_TYPE)1.3205000000000002);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[55], 0, 23, (DAAL_DATA_TYPE)0.99250000000000005);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[56], 0, 4, (DAAL_DATA_TYPE)0.57050000000000012);
    builder.addLeafNode(treeId, nodeIds[57], 0, (DAAL_DATA_TYPE)-0.0087048274337223949);
    builder.addLeafNode(treeId, nodeIds[57], 1, (DAAL_DATA_TYPE)0.0016202971525490285);
    builder.addLeafNode(treeId, nodeIds[56], 1, (DAAL_DATA_TYPE)0.003808735994758403);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)-0.009050746716446045);

}

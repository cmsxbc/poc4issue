 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree76(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 10, (DAAL_DATA_TYPE)-2.3834999999999993);
    builder.addLeafNode(treeId, nodeIds[1], 0, (DAAL_DATA_TYPE)-0.0066891316432451864);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[1], 1, 6, (DAAL_DATA_TYPE)-2.7564999999999995);
    builder.addLeafNode(treeId, nodeIds[3], 0, (DAAL_DATA_TYPE)-0.010887947321558993);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[3], 1, 15, (DAAL_DATA_TYPE)1.6265000000000003);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 15, (DAAL_DATA_TYPE)1.5435000000000001);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[6], 0, 7, (DAAL_DATA_TYPE)-1.6334999999999997);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 18, (DAAL_DATA_TYPE)-1.1434999999999997);
    builder.addLeafNode(treeId, nodeIds[8], 0, (DAAL_DATA_TYPE)-0.012960756807588042);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[8], 1, 15, (DAAL_DATA_TYPE)0.6625000000000002);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[10], 0, 17, (DAAL_DATA_TYPE)0.80350000000000021);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[11], 0, 8, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    builder.addLeafNode(treeId, nodeIds[12], 0, (DAAL_DATA_TYPE)0.0035607365270455683);
    builder.addLeafNode(treeId, nodeIds[12], 1, (DAAL_DATA_TYPE)-0.010997184632079942);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[11], 1, 7, (DAAL_DATA_TYPE)-1.6884999999999997);
    builder.addLeafNode(treeId, nodeIds[15], 0, (DAAL_DATA_TYPE)0.0092335541428635922);
    builder.addLeafNode(treeId, nodeIds[15], 1, (DAAL_DATA_TYPE)-0.0017221764734897177);
    builder.addLeafNode(treeId, nodeIds[10], 1, (DAAL_DATA_TYPE)-0.0087118926119397998);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[7], 1, 3, (DAAL_DATA_TYPE)3.1495000000000002);
    nodeIds[20] = builder.addSplitNode(treeId, nodeIds[19], 0, 24, (DAAL_DATA_TYPE)1.2895000000000001);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[20], 0, 24, (DAAL_DATA_TYPE)0.75750000000000017);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[21], 0, 6, (DAAL_DATA_TYPE)0.35250000000000004);
    builder.addLeafNode(treeId, nodeIds[22], 0, (DAAL_DATA_TYPE)0.0025086835881396024);
    builder.addLeafNode(treeId, nodeIds[22], 1, (DAAL_DATA_TYPE)-0.0011906286792718154);
    builder.addLeafNode(treeId, nodeIds[21], 1, (DAAL_DATA_TYPE)-0.00041414714192281542);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[20], 1, 6, (DAAL_DATA_TYPE)-1.7469999999999999);
    builder.addLeafNode(treeId, nodeIds[26], 0, (DAAL_DATA_TYPE)0.012233004183508457);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[26], 1, 17, (DAAL_DATA_TYPE)2.0865000000000005);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[28], 0, 22, (DAAL_DATA_TYPE)0.74450000000000005);
    nodeIds[30] = builder.addSplitNode(treeId, nodeIds[29], 0, 15, (DAAL_DATA_TYPE)-0.044499999999999991);
    builder.addLeafNode(treeId, nodeIds[30], 0, (DAAL_DATA_TYPE)0.010631966398563238);
    builder.addLeafNode(treeId, nodeIds[30], 1, (DAAL_DATA_TYPE)0.00058476416660206655);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[29], 1, 2, (DAAL_DATA_TYPE)1.5225000000000002);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[33], 0, 18, (DAAL_DATA_TYPE)-1.9059999999999997);
    builder.addLeafNode(treeId, nodeIds[34], 0, (DAAL_DATA_TYPE)0.010553649472801583);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[34], 1, 16, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    builder.addLeafNode(treeId, nodeIds[36], 0, (DAAL_DATA_TYPE)0.002030235851705863);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[36], 1, 22, (DAAL_DATA_TYPE)0.9105000000000002);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[38], 0, 4, (DAAL_DATA_TYPE)-0.17649999999999996);
    builder.addLeafNode(treeId, nodeIds[39], 0, (DAAL_DATA_TYPE)-0.001049291214440018);
    builder.addLeafNode(treeId, nodeIds[39], 1, (DAAL_DATA_TYPE)-0.015141562639902802);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[38], 1, 3, (DAAL_DATA_TYPE)1.8795000000000002);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[42], 0, 2, (DAAL_DATA_TYPE)-0.49549999999999994);
    builder.addLeafNode(treeId, nodeIds[43], 0, (DAAL_DATA_TYPE)0.0081496701254086066);
    builder.addLeafNode(treeId, nodeIds[43], 1, (DAAL_DATA_TYPE)-0.00093074717455440099);
    builder.addLeafNode(treeId, nodeIds[42], 1, (DAAL_DATA_TYPE)-0.0093986382851233858);
    builder.addLeafNode(treeId, nodeIds[33], 1, (DAAL_DATA_TYPE)-0.0079656824003905054);
    builder.addLeafNode(treeId, nodeIds[28], 1, (DAAL_DATA_TYPE)0.0089874570733971069);
    builder.addLeafNode(treeId, nodeIds[19], 1, (DAAL_DATA_TYPE)-0.0077542861600616774);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[6], 1, 27, (DAAL_DATA_TYPE)0.78850000000000009);
    builder.addLeafNode(treeId, nodeIds[50], 0, (DAAL_DATA_TYPE)0.0039673088408178755);
    nodeIds[52] = builder.addSplitNode(treeId, nodeIds[50], 1, 13, (DAAL_DATA_TYPE)0.77350000000000019);
    builder.addLeafNode(treeId, nodeIds[52], 0, (DAAL_DATA_TYPE)-0.016261717366675536);
    builder.addLeafNode(treeId, nodeIds[52], 1, (DAAL_DATA_TYPE)-0.0052214535174228381);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[5], 1, 13, (DAAL_DATA_TYPE)0.7855000000000002);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[55], 0, 2, (DAAL_DATA_TYPE)0.95750000000000013);
    builder.addLeafNode(treeId, nodeIds[56], 0, (DAAL_DATA_TYPE)0.013798937346877121);
    builder.addLeafNode(treeId, nodeIds[56], 1, (DAAL_DATA_TYPE)0.00031927886108557382);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[55], 1, 21, (DAAL_DATA_TYPE)0.89250000000000018);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)-0.0051759190425821923);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)0.0047416811705463463);

}

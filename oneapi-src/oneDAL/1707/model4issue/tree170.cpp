 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree170(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 22, (DAAL_DATA_TYPE)0.52700000000000014);
    builder.addLeafNode(treeId, nodeIds[1], 0, (DAAL_DATA_TYPE)0.0058419536029839002);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[1], 1, 5, (DAAL_DATA_TYPE)2.0995000000000004);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 9, (DAAL_DATA_TYPE)0.65550000000000008);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 25, (DAAL_DATA_TYPE)1.3855000000000002);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 9, (DAAL_DATA_TYPE)0.61850000000000016);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[6], 0, 22, (DAAL_DATA_TYPE)0.9255000000000001);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 13, (DAAL_DATA_TYPE)1.0725000000000002);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[8], 0, 14, (DAAL_DATA_TYPE)1.1865000000000003);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[9], 0, 19, (DAAL_DATA_TYPE)-1.1714999999999998);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[10], 0, 13, (DAAL_DATA_TYPE)0.54250000000000009);
    builder.addLeafNode(treeId, nodeIds[11], 0, (DAAL_DATA_TYPE)-0.0047147427429445089);
    builder.addLeafNode(treeId, nodeIds[11], 1, (DAAL_DATA_TYPE)0.00660778781487446);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[10], 1, 14, (DAAL_DATA_TYPE)-0.63849999999999996);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[14], 0, 9, (DAAL_DATA_TYPE)0.55150000000000021);
    builder.addLeafNode(treeId, nodeIds[15], 0, (DAAL_DATA_TYPE)-0.00060133512110487389);
    builder.addLeafNode(treeId, nodeIds[15], 1, (DAAL_DATA_TYPE)0.0086257467977702614);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[14], 1, 22, (DAAL_DATA_TYPE)0.90250000000000019);
    builder.addLeafNode(treeId, nodeIds[18], 0, (DAAL_DATA_TYPE)-0.0024041399427386393);
    builder.addLeafNode(treeId, nodeIds[18], 1, (DAAL_DATA_TYPE)-0.010760915157600092);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[9], 1, 19, (DAAL_DATA_TYPE)-0.49249999999999994);
    builder.addLeafNode(treeId, nodeIds[21], 0, (DAAL_DATA_TYPE)-0.0027531209945057828);
    builder.addLeafNode(treeId, nodeIds[21], 1, (DAAL_DATA_TYPE)0.0082317477384326512);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[8], 1, 27, (DAAL_DATA_TYPE)0.73550000000000015);
    builder.addLeafNode(treeId, nodeIds[24], 0, (DAAL_DATA_TYPE)-0.011319137852767419);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[24], 1, 2, (DAAL_DATA_TYPE)0.61150000000000004);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[26], 0, 19, (DAAL_DATA_TYPE)-0.040499999999999994);
    builder.addLeafNode(treeId, nodeIds[27], 0, (DAAL_DATA_TYPE)-0.013476696591824294);
    builder.addLeafNode(treeId, nodeIds[27], 1, (DAAL_DATA_TYPE)0.00049317734083160765);
    builder.addLeafNode(treeId, nodeIds[26], 1, (DAAL_DATA_TYPE)0.0074372485957362447);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[7], 1, 14, (DAAL_DATA_TYPE)0.37750000000000006);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[31], 0, 5, (DAAL_DATA_TYPE)0.44950000000000007);
    builder.addLeafNode(treeId, nodeIds[32], 0, (DAAL_DATA_TYPE)0.015319916885346174);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[32], 1, 25, (DAAL_DATA_TYPE)0.65450000000000019);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[34], 0, 5, (DAAL_DATA_TYPE)1.0195000000000001);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[35], 0, 18, (DAAL_DATA_TYPE)-0.28349999999999992);
    builder.addLeafNode(treeId, nodeIds[36], 0, (DAAL_DATA_TYPE)-0.012459467457873482);
    builder.addLeafNode(treeId, nodeIds[36], 1, (DAAL_DATA_TYPE)-0.00049067586660385138);
    builder.addLeafNode(treeId, nodeIds[35], 1, (DAAL_DATA_TYPE)0.0059484820982271978);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[34], 1, 27, (DAAL_DATA_TYPE)0.73850000000000005);
    builder.addLeafNode(treeId, nodeIds[40], 0, (DAAL_DATA_TYPE)0.010691530934788964);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[40], 1, 18, (DAAL_DATA_TYPE)-0.8284999999999999);
    builder.addLeafNode(treeId, nodeIds[42], 0, (DAAL_DATA_TYPE)0.007765136288319964);
    builder.addLeafNode(treeId, nodeIds[42], 1, (DAAL_DATA_TYPE)0.00065320969531765315);
    builder.addLeafNode(treeId, nodeIds[31], 1, (DAAL_DATA_TYPE)-0.00060498931936844055);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[6], 1, 17, (DAAL_DATA_TYPE)0.44550000000000006);
    builder.addLeafNode(treeId, nodeIds[46], 0, (DAAL_DATA_TYPE)-0.0071025041242440542);
    builder.addLeafNode(treeId, nodeIds[46], 1, (DAAL_DATA_TYPE)0.0046886636691991813);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[5], 1, 24, (DAAL_DATA_TYPE)0.8175);
    builder.addLeafNode(treeId, nodeIds[49], 0, (DAAL_DATA_TYPE)-0.011628929700236768);
    builder.addLeafNode(treeId, nodeIds[49], 1, (DAAL_DATA_TYPE)-0.0016224818368328318);
    builder.addLeafNode(treeId, nodeIds[4], 1, (DAAL_DATA_TYPE)-0.00032799604650102107);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[3], 1, 14, (DAAL_DATA_TYPE)0.60250000000000015);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[53], 0, 9, (DAAL_DATA_TYPE)2.6780000000000004);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[54], 0, 14, (DAAL_DATA_TYPE)-0.79249999999999987);
    builder.addLeafNode(treeId, nodeIds[55], 0, (DAAL_DATA_TYPE)0.00030155268920536494);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)0.0065929078189710293);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)-0.0030555707615955423);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[53], 1, 0, (DAAL_DATA_TYPE)1.1265000000000003);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)0.0027414976670924163);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)-0.0071582743052082762);

}

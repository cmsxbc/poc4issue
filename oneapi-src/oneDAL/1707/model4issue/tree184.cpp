 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree184(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 19, (DAAL_DATA_TYPE)1.4605000000000004);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 6, (DAAL_DATA_TYPE)-2.7564999999999995);
    builder.addLeafNode(treeId, nodeIds[2], 0, (DAAL_DATA_TYPE)-0.0069186153567650111);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[2], 1, 24, (DAAL_DATA_TYPE)0.74850000000000005);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 13, (DAAL_DATA_TYPE)0.32350000000000007);
    builder.addLeafNode(treeId, nodeIds[5], 0, (DAAL_DATA_TYPE)-0.0064325205802630916);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[5], 1, 11, (DAAL_DATA_TYPE)1.1295000000000002);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 21, (DAAL_DATA_TYPE)1.0775000000000003);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[8], 0, 17, (DAAL_DATA_TYPE)0.70250000000000001);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[9], 0, 7, (DAAL_DATA_TYPE)-1.3464999999999998);
    builder.addLeafNode(treeId, nodeIds[10], 0, (DAAL_DATA_TYPE)-0.0097164601460099226);
    builder.addLeafNode(treeId, nodeIds[10], 1, (DAAL_DATA_TYPE)-0.00021781127589758531);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[9], 1, 2, (DAAL_DATA_TYPE)-1.3284999999999998);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[13], 0, 21, (DAAL_DATA_TYPE)0.84150000000000003);
    builder.addLeafNode(treeId, nodeIds[14], 0, (DAAL_DATA_TYPE)-0.010980413512637219);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[14], 1, 14, (DAAL_DATA_TYPE)0.33250000000000007);
    builder.addLeafNode(treeId, nodeIds[16], 0, (DAAL_DATA_TYPE)0.0072999670775607236);
    builder.addLeafNode(treeId, nodeIds[16], 1, (DAAL_DATA_TYPE)-0.0047954600196265223);
    builder.addLeafNode(treeId, nodeIds[13], 1, (DAAL_DATA_TYPE)0.0028519400860867027);
    nodeIds[20] = builder.addSplitNode(treeId, nodeIds[8], 1, 12, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    builder.addLeafNode(treeId, nodeIds[20], 0, (DAAL_DATA_TYPE)0.0072673782382066112);
    builder.addLeafNode(treeId, nodeIds[20], 1, (DAAL_DATA_TYPE)0.00089393942024220113);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[7], 1, 8, (DAAL_DATA_TYPE)1.6300000000000001);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[23], 0, 21, (DAAL_DATA_TYPE)0.95150000000000012);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[24], 0, 25, (DAAL_DATA_TYPE)0.71650000000000003);
    builder.addLeafNode(treeId, nodeIds[25], 0, (DAAL_DATA_TYPE)0.0085732560051051347);
    builder.addLeafNode(treeId, nodeIds[25], 1, (DAAL_DATA_TYPE)-0.00047736219022163125);
    builder.addLeafNode(treeId, nodeIds[24], 1, (DAAL_DATA_TYPE)-0.0054375811766546505);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[23], 1, 13, (DAAL_DATA_TYPE)0.9085000000000002);
    builder.addLeafNode(treeId, nodeIds[29], 0, (DAAL_DATA_TYPE)-0.0088074328778528204);
    builder.addLeafNode(treeId, nodeIds[29], 1, (DAAL_DATA_TYPE)0.00065795611907643351);
    builder.addLeafNode(treeId, nodeIds[4], 1, (DAAL_DATA_TYPE)-0.00024020983917308854);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[1], 1, 3, (DAAL_DATA_TYPE)0.37750000000000006);
    builder.addLeafNode(treeId, nodeIds[33], 0, (DAAL_DATA_TYPE)-0.0076465678367425103);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[33], 1, 24, (DAAL_DATA_TYPE)1.9065000000000001);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[35], 0, 15, (DAAL_DATA_TYPE)-0.38349999999999995);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[36], 0, 15, (DAAL_DATA_TYPE)-1.1764999999999997);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[37], 0, 22, (DAAL_DATA_TYPE)0.9385);
    builder.addLeafNode(treeId, nodeIds[38], 0, (DAAL_DATA_TYPE)-0.004772111511340848);
    builder.addLeafNode(treeId, nodeIds[38], 1, (DAAL_DATA_TYPE)0.0054361887186622389);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[37], 1, 15, (DAAL_DATA_TYPE)-0.91849999999999998);
    builder.addLeafNode(treeId, nodeIds[41], 0, (DAAL_DATA_TYPE)-0.012338939025842896);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[41], 1, 4, (DAAL_DATA_TYPE)0.58350000000000002);
    builder.addLeafNode(treeId, nodeIds[43], 0, (DAAL_DATA_TYPE)0.001542982498649508);
    builder.addLeafNode(treeId, nodeIds[43], 1, (DAAL_DATA_TYPE)-0.012825109024665186);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[36], 1, 4, (DAAL_DATA_TYPE)-0.69249999999999978);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[46], 0, 22, (DAAL_DATA_TYPE)0.95550000000000013);
    builder.addLeafNode(treeId, nodeIds[47], 0, (DAAL_DATA_TYPE)0.0005279087389094962);
    builder.addLeafNode(treeId, nodeIds[47], 1, (DAAL_DATA_TYPE)-0.0097832431659723319);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[46], 1, 11, (DAAL_DATA_TYPE)0.50700000000000012);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[50], 0, 2, (DAAL_DATA_TYPE)-0.08699999999999998);
    nodeIds[52] = builder.addSplitNode(treeId, nodeIds[51], 0, 9, (DAAL_DATA_TYPE)0.91850000000000021);
    builder.addLeafNode(treeId, nodeIds[52], 0, (DAAL_DATA_TYPE)0.0012919492647051811);
    builder.addLeafNode(treeId, nodeIds[52], 1, (DAAL_DATA_TYPE)-0.0089758683509867775);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[51], 1, 11, (DAAL_DATA_TYPE)-0.76549999999999996);
    builder.addLeafNode(treeId, nodeIds[55], 0, (DAAL_DATA_TYPE)0.01144946361670182);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)-6.2993688222307429e-05);
    nodeIds[58] = builder.addSplitNode(treeId, nodeIds[50], 1, 15, (DAAL_DATA_TYPE)0.74650000000000005);
    builder.addLeafNode(treeId, nodeIds[58], 0, (DAAL_DATA_TYPE)0.0017848473185530075);
    builder.addLeafNode(treeId, nodeIds[58], 1, (DAAL_DATA_TYPE)0.012439107877157983);
    builder.addLeafNode(treeId, nodeIds[35], 1, (DAAL_DATA_TYPE)0.0072779662767425181);

}

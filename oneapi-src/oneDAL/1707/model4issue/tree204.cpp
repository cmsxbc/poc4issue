 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree204(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 0, (DAAL_DATA_TYPE)1.3375000000000001);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 23, (DAAL_DATA_TYPE)1.4585000000000001);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 0, (DAAL_DATA_TYPE)0.9425);
    builder.addLeafNode(treeId, nodeIds[3], 0, (DAAL_DATA_TYPE)-6.4031114907689969e-05);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[3], 1, 22, (DAAL_DATA_TYPE)1.1705000000000003);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 2, (DAAL_DATA_TYPE)1.1925000000000001);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[6], 0, 25, (DAAL_DATA_TYPE)0.96250000000000002);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 26, (DAAL_DATA_TYPE)0.99350000000000016);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[8], 0, 27, (DAAL_DATA_TYPE)0.90650000000000019);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[9], 0, 23, (DAAL_DATA_TYPE)0.98750000000000016);
    builder.addLeafNode(treeId, nodeIds[10], 0, (DAAL_DATA_TYPE)0.0040356429866052991);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[10], 1, 1, (DAAL_DATA_TYPE)-0.57949999999999979);
    builder.addLeafNode(treeId, nodeIds[12], 0, (DAAL_DATA_TYPE)-0.005553316984508859);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[12], 1, 7, (DAAL_DATA_TYPE)-0.96849999999999981);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[14], 0, 4, (DAAL_DATA_TYPE)0.27300000000000008);
    builder.addLeafNode(treeId, nodeIds[15], 0, (DAAL_DATA_TYPE)0.00096747766666371252);
    builder.addLeafNode(treeId, nodeIds[15], 1, (DAAL_DATA_TYPE)-0.011953614297367278);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[14], 1, 18, (DAAL_DATA_TYPE)0.60150000000000003);
    builder.addLeafNode(treeId, nodeIds[18], 0, (DAAL_DATA_TYPE)0.005322219123696223);
    builder.addLeafNode(treeId, nodeIds[18], 1, (DAAL_DATA_TYPE)-0.002445732319143181);
    builder.addLeafNode(treeId, nodeIds[9], 1, (DAAL_DATA_TYPE)-0.0063697940431708512);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[8], 1, 14, (DAAL_DATA_TYPE)-0.21149999999999997);
    builder.addLeafNode(treeId, nodeIds[22], 0, (DAAL_DATA_TYPE)-0.00088308054960869033);
    builder.addLeafNode(treeId, nodeIds[22], 1, (DAAL_DATA_TYPE)0.009233238104730845);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[7], 1, 21, (DAAL_DATA_TYPE)0.74850000000000005);
    builder.addLeafNode(treeId, nodeIds[25], 0, (DAAL_DATA_TYPE)0.0018845596287532579);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[25], 1, 14, (DAAL_DATA_TYPE)-0.21149999999999997);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[27], 0, 20, (DAAL_DATA_TYPE)2.3265000000000002);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[28], 0, 21, (DAAL_DATA_TYPE)1.0065000000000002);
    nodeIds[30] = builder.addSplitNode(treeId, nodeIds[29], 0, 22, (DAAL_DATA_TYPE)0.94450000000000001);
    builder.addLeafNode(treeId, nodeIds[30], 0, (DAAL_DATA_TYPE)-0.0078926068991422658);
    builder.addLeafNode(treeId, nodeIds[30], 1, (DAAL_DATA_TYPE)0.005429709819145501);
    builder.addLeafNode(treeId, nodeIds[29], 1, (DAAL_DATA_TYPE)0.010587051191500255);
    builder.addLeafNode(treeId, nodeIds[28], 1, (DAAL_DATA_TYPE)-0.0089202517056432753);
    builder.addLeafNode(treeId, nodeIds[27], 1, (DAAL_DATA_TYPE)-0.0070754429786770703);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[6], 1, 11, (DAAL_DATA_TYPE)1.0525000000000002);
    builder.addLeafNode(treeId, nodeIds[36], 0, (DAAL_DATA_TYPE)0.0026562866567434716);
    builder.addLeafNode(treeId, nodeIds[36], 1, (DAAL_DATA_TYPE)0.013579813728020305);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[5], 1, 9, (DAAL_DATA_TYPE)1.3115000000000003);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[39], 0, 9, (DAAL_DATA_TYPE)1.1475000000000002);
    builder.addLeafNode(treeId, nodeIds[40], 0, (DAAL_DATA_TYPE)0.0049294903006368469);
    builder.addLeafNode(treeId, nodeIds[40], 1, (DAAL_DATA_TYPE)0.016025656193406099);
    builder.addLeafNode(treeId, nodeIds[39], 1, (DAAL_DATA_TYPE)-0.00069162733296849847);
    builder.addLeafNode(treeId, nodeIds[2], 1, (DAAL_DATA_TYPE)0.0043493780836060241);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[1], 1, 3, (DAAL_DATA_TYPE)0.14950000000000002);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[45], 0, 17, (DAAL_DATA_TYPE)0.97550000000000014);
    builder.addLeafNode(treeId, nodeIds[46], 0, (DAAL_DATA_TYPE)0.00042459358461201198);
    builder.addLeafNode(treeId, nodeIds[46], 1, (DAAL_DATA_TYPE)-0.014236345794051886);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[45], 1, 6, (DAAL_DATA_TYPE)1.4510000000000003);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[49], 0, 24, (DAAL_DATA_TYPE)1.7695000000000001);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[50], 0, 7, (DAAL_DATA_TYPE)-1.5494999999999999);
    builder.addLeafNode(treeId, nodeIds[51], 0, (DAAL_DATA_TYPE)-0.0057486383353534624);
    builder.addLeafNode(treeId, nodeIds[51], 1, (DAAL_DATA_TYPE)1.9716267161710037e-05);
    builder.addLeafNode(treeId, nodeIds[50], 1, (DAAL_DATA_TYPE)-0.0060260775510311854);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[49], 1, 11, (DAAL_DATA_TYPE)0.71950000000000014);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[55], 0, 13, (DAAL_DATA_TYPE)0.81950000000000001);
    builder.addLeafNode(treeId, nodeIds[56], 0, (DAAL_DATA_TYPE)-0.0052787320238762894);
    nodeIds[58] = builder.addSplitNode(treeId, nodeIds[56], 1, 4, (DAAL_DATA_TYPE)-0.24899999999999997);
    builder.addLeafNode(treeId, nodeIds[58], 0, (DAAL_DATA_TYPE)0.01001424228518524);
    builder.addLeafNode(treeId, nodeIds[58], 1, (DAAL_DATA_TYPE)-0.0014106839610677627);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)0.012713932991027833);

}

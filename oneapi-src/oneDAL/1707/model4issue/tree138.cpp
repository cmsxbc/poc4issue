 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree138(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 14, (DAAL_DATA_TYPE)2.5005000000000002);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 21, (DAAL_DATA_TYPE)1.2310000000000001);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 21, (DAAL_DATA_TYPE)1.1775000000000002);
    builder.addLeafNode(treeId, nodeIds[3], 0, (DAAL_DATA_TYPE)1.0613904775086239e-05);
    builder.addLeafNode(treeId, nodeIds[3], 1, (DAAL_DATA_TYPE)0.0050851151624575581);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[2], 1, 6, (DAAL_DATA_TYPE)1.5425000000000002);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[6], 0, 19, (DAAL_DATA_TYPE)-1.0724999999999998);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 6, (DAAL_DATA_TYPE)0.72350000000000014);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[8], 0, 1, (DAAL_DATA_TYPE)-0.62849999999999995);
    builder.addLeafNode(treeId, nodeIds[9], 0, (DAAL_DATA_TYPE)0.0070049116059261217);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[9], 1, 19, (DAAL_DATA_TYPE)-1.3224999999999998);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[11], 0, 9, (DAAL_DATA_TYPE)1.0015000000000003);
    builder.addLeafNode(treeId, nodeIds[12], 0, (DAAL_DATA_TYPE)0.001623911152665432);
    builder.addLeafNode(treeId, nodeIds[12], 1, (DAAL_DATA_TYPE)-0.017091045804597714);
    builder.addLeafNode(treeId, nodeIds[11], 1, (DAAL_DATA_TYPE)0.0060860623041537176);
    builder.addLeafNode(treeId, nodeIds[8], 1, (DAAL_DATA_TYPE)0.011746996879577637);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[7], 1, 18, (DAAL_DATA_TYPE)1.2745000000000002);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[17], 0, 13, (DAAL_DATA_TYPE)0.82350000000000001);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[18], 0, 4, (DAAL_DATA_TYPE)-1.3124999999999998);
    builder.addLeafNode(treeId, nodeIds[19], 0, (DAAL_DATA_TYPE)-0.015068205964306129);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[19], 1, 11, (DAAL_DATA_TYPE)-0.69249999999999978);
    builder.addLeafNode(treeId, nodeIds[21], 0, (DAAL_DATA_TYPE)-0.011316578533198382);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[21], 1, 11, (DAAL_DATA_TYPE)-0.12249999999999998);
    builder.addLeafNode(treeId, nodeIds[23], 0, (DAAL_DATA_TYPE)0.0050088458665413782);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[23], 1, 2, (DAAL_DATA_TYPE)0.7835000000000002);
    builder.addLeafNode(treeId, nodeIds[25], 0, (DAAL_DATA_TYPE)-0.0018385803288951215);
    builder.addLeafNode(treeId, nodeIds[25], 1, (DAAL_DATA_TYPE)-0.014220294177532199);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[18], 1, 2, (DAAL_DATA_TYPE)1.1795000000000002);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[28], 0, 24, (DAAL_DATA_TYPE)1.5275000000000001);
    nodeIds[30] = builder.addSplitNode(treeId, nodeIds[29], 0, 17, (DAAL_DATA_TYPE)1.2495000000000003);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[30], 0, 21, (DAAL_DATA_TYPE)1.4810000000000001);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[31], 0, 26, (DAAL_DATA_TYPE)0.93550000000000011);
    builder.addLeafNode(treeId, nodeIds[32], 0, (DAAL_DATA_TYPE)-0.016322783211415465);
    builder.addLeafNode(treeId, nodeIds[32], 1, (DAAL_DATA_TYPE)-0.0044744924467522654);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[31], 1, 15, (DAAL_DATA_TYPE)0.37750000000000006);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[35], 0, 11, (DAAL_DATA_TYPE)-0.69249999999999978);
    builder.addLeafNode(treeId, nodeIds[36], 0, (DAAL_DATA_TYPE)-0.014274557642638684);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[36], 1, 10, (DAAL_DATA_TYPE)0.24250000000000002);
    builder.addLeafNode(treeId, nodeIds[38], 0, (DAAL_DATA_TYPE)-0.010074415169656278);
    builder.addLeafNode(treeId, nodeIds[38], 1, (DAAL_DATA_TYPE)0.0071202172897756105);
    builder.addLeafNode(treeId, nodeIds[35], 1, (DAAL_DATA_TYPE)0.0031543094913164776);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[30], 1, 26, (DAAL_DATA_TYPE)1.0005000000000002);
    builder.addLeafNode(treeId, nodeIds[42], 0, (DAAL_DATA_TYPE)0.010517122859375613);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[42], 1, 12, (DAAL_DATA_TYPE)1.6610000000000003);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[44], 0, 24, (DAAL_DATA_TYPE)1.1685000000000001);
    builder.addLeafNode(treeId, nodeIds[45], 0, (DAAL_DATA_TYPE)0.0083385173529386524);
    builder.addLeafNode(treeId, nodeIds[45], 1, (DAAL_DATA_TYPE)-0.0055062391981482509);
    builder.addLeafNode(treeId, nodeIds[44], 1, (DAAL_DATA_TYPE)-0.012022364899516106);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[29], 1, 17, (DAAL_DATA_TYPE)0.97550000000000014);
    builder.addLeafNode(treeId, nodeIds[49], 0, (DAAL_DATA_TYPE)-0.004085482714267878);
    builder.addLeafNode(treeId, nodeIds[49], 1, (DAAL_DATA_TYPE)-0.01727822554142525);
    builder.addLeafNode(treeId, nodeIds[28], 1, (DAAL_DATA_TYPE)0.0067050843500742214);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[17], 1, 21, (DAAL_DATA_TYPE)1.6535000000000002);
    builder.addLeafNode(treeId, nodeIds[53], 0, (DAAL_DATA_TYPE)-0.004490963599334161);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[53], 1, 10, (DAAL_DATA_TYPE)-0.46149999999999997);
    builder.addLeafNode(treeId, nodeIds[55], 0, (DAAL_DATA_TYPE)0.00016586808487772942);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)0.012846559114181078);
    nodeIds[58] = builder.addSplitNode(treeId, nodeIds[6], 1, 2, (DAAL_DATA_TYPE)0.27900000000000008);
    builder.addLeafNode(treeId, nodeIds[58], 0, (DAAL_DATA_TYPE)0.011666468828916551);
    builder.addLeafNode(treeId, nodeIds[58], 1, (DAAL_DATA_TYPE)-0.0022764615501676285);
    builder.addLeafNode(treeId, nodeIds[1], 1, (DAAL_DATA_TYPE)-0.0059597913331041735);

}

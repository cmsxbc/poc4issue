 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree134(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 2, (DAAL_DATA_TYPE)1.7240000000000004);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 2, (DAAL_DATA_TYPE)0.82350000000000001);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 2, (DAAL_DATA_TYPE)0.73650000000000004);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 4, (DAAL_DATA_TYPE)1.7245000000000001);
    builder.addLeafNode(treeId, nodeIds[4], 0, (DAAL_DATA_TYPE)3.5867352116933356e-05);
    builder.addLeafNode(treeId, nodeIds[4], 1, (DAAL_DATA_TYPE)-0.0097183192148804672);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[3], 1, 9, (DAAL_DATA_TYPE)1.2415000000000003);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 0, (DAAL_DATA_TYPE)0.62350000000000005);
    builder.addLeafNode(treeId, nodeIds[8], 0, (DAAL_DATA_TYPE)0.013203701100522472);
    builder.addLeafNode(treeId, nodeIds[8], 1, (DAAL_DATA_TYPE)0.0039185031364024504);
    builder.addLeafNode(treeId, nodeIds[7], 1, (DAAL_DATA_TYPE)-0.0027530854693739804);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[2], 1, 2, (DAAL_DATA_TYPE)0.83950000000000002);
    builder.addLeafNode(treeId, nodeIds[12], 0, (DAAL_DATA_TYPE)-0.010342654043241688);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[12], 1, 3, (DAAL_DATA_TYPE)0.23350000000000004);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[14], 0, 23, (DAAL_DATA_TYPE)0.98550000000000015);
    builder.addLeafNode(treeId, nodeIds[15], 0, (DAAL_DATA_TYPE)-0.0011933831759961323);
    builder.addLeafNode(treeId, nodeIds[15], 1, (DAAL_DATA_TYPE)0.011421135371481931);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[14], 1, 26, (DAAL_DATA_TYPE)0.86050000000000015);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[18], 0, 22, (DAAL_DATA_TYPE)0.82050000000000012);
    nodeIds[20] = builder.addSplitNode(treeId, nodeIds[19], 0, 3, (DAAL_DATA_TYPE)0.77350000000000019);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[20], 0, 15, (DAAL_DATA_TYPE)0.30650000000000005);
    builder.addLeafNode(treeId, nodeIds[21], 0, (DAAL_DATA_TYPE)0.0013155732275635908);
    builder.addLeafNode(treeId, nodeIds[21], 1, (DAAL_DATA_TYPE)-0.012463352661579849);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[20], 1, 24, (DAAL_DATA_TYPE)0.80550000000000022);
    builder.addLeafNode(treeId, nodeIds[24], 0, (DAAL_DATA_TYPE)0.014356230001055426);
    builder.addLeafNode(treeId, nodeIds[24], 1, (DAAL_DATA_TYPE)-0.0010330708697438241);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[19], 1, 18, (DAAL_DATA_TYPE)0.40250000000000008);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[27], 0, 4, (DAAL_DATA_TYPE)-1.4164999999999999);
    builder.addLeafNode(treeId, nodeIds[28], 0, (DAAL_DATA_TYPE)-0.014582757099911019);
    builder.addLeafNode(treeId, nodeIds[28], 1, (DAAL_DATA_TYPE)-0.005096677327456587);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[27], 1, 0, (DAAL_DATA_TYPE)0.61950000000000005);
    builder.addLeafNode(treeId, nodeIds[31], 0, (DAAL_DATA_TYPE)0.0080350556373596192);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[31], 1, 11, (DAAL_DATA_TYPE)-0.41949999999999993);
    builder.addLeafNode(treeId, nodeIds[33], 0, (DAAL_DATA_TYPE)-0.010134554574593765);
    builder.addLeafNode(treeId, nodeIds[33], 1, (DAAL_DATA_TYPE)-0.00034346539947775106);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[18], 1, 27, (DAAL_DATA_TYPE)1.0745000000000002);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[36], 0, 13, (DAAL_DATA_TYPE)0.82350000000000001);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[37], 0, 6, (DAAL_DATA_TYPE)-0.74449999999999983);
    builder.addLeafNode(treeId, nodeIds[38], 0, (DAAL_DATA_TYPE)0.0053482165525632879);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[38], 1, 5, (DAAL_DATA_TYPE)0.58450000000000013);
    builder.addLeafNode(treeId, nodeIds[40], 0, (DAAL_DATA_TYPE)0.007649095441130075);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[40], 1, 7, (DAAL_DATA_TYPE)0.83500000000000008);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[42], 0, 25, (DAAL_DATA_TYPE)0.6905);
    builder.addLeafNode(treeId, nodeIds[43], 0, (DAAL_DATA_TYPE)-0.012702886939048766);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[43], 1, 14, (DAAL_DATA_TYPE)-0.10949999999999999);
    builder.addLeafNode(treeId, nodeIds[45], 0, (DAAL_DATA_TYPE)0.0041528116983289903);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[45], 1, 9, (DAAL_DATA_TYPE)0.75850000000000006);
    builder.addLeafNode(treeId, nodeIds[47], 0, (DAAL_DATA_TYPE)0.0016370684211755072);
    builder.addLeafNode(treeId, nodeIds[47], 1, (DAAL_DATA_TYPE)-0.0094191752945665605);
    builder.addLeafNode(treeId, nodeIds[42], 1, (DAAL_DATA_TYPE)-0.014640321884126889);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[37], 1, 4, (DAAL_DATA_TYPE)-0.94049999999999978);
    builder.addLeafNode(treeId, nodeIds[51], 0, (DAAL_DATA_TYPE)0.0068845802077035214);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[51], 1, 15, (DAAL_DATA_TYPE)-0.90849999999999997);
    builder.addLeafNode(treeId, nodeIds[53], 0, (DAAL_DATA_TYPE)0.0053579158703419005);
    builder.addLeafNode(treeId, nodeIds[53], 1, (DAAL_DATA_TYPE)-0.00087064371760657133);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[36], 1, 22, (DAAL_DATA_TYPE)1.4460000000000004);
    builder.addLeafNode(treeId, nodeIds[56], 0, (DAAL_DATA_TYPE)-0.0041024192092851894);
    nodeIds[58] = builder.addSplitNode(treeId, nodeIds[56], 1, 26, (DAAL_DATA_TYPE)1.3765000000000003);
    builder.addLeafNode(treeId, nodeIds[58], 0, (DAAL_DATA_TYPE)0.010140771473999378);
    builder.addLeafNode(treeId, nodeIds[58], 1, (DAAL_DATA_TYPE)-0.00076858386397361768);
    builder.addLeafNode(treeId, nodeIds[1], 1, (DAAL_DATA_TYPE)0.0055493631645252839);

}

 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree12(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 25, (DAAL_DATA_TYPE)1.2815000000000001);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 25, (DAAL_DATA_TYPE)0.59250000000000014);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 13, (DAAL_DATA_TYPE)0.9405);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 17, (DAAL_DATA_TYPE)1.5170000000000001);
    builder.addLeafNode(treeId, nodeIds[4], 0, (DAAL_DATA_TYPE)-0.0060905492129903404);
    builder.addLeafNode(treeId, nodeIds[4], 1, (DAAL_DATA_TYPE)0.0074344758476529802);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[3], 1, 27, (DAAL_DATA_TYPE)0.83650000000000013);
    builder.addLeafNode(treeId, nodeIds[7], 0, (DAAL_DATA_TYPE)0.0049413862267890614);
    builder.addLeafNode(treeId, nodeIds[7], 1, (DAAL_DATA_TYPE)-0.0045477287614182254);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[2], 1, 5, (DAAL_DATA_TYPE)0.81250000000000011);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[10], 0, 26, (DAAL_DATA_TYPE)0.77650000000000008);
    builder.addLeafNode(treeId, nodeIds[11], 0, (DAAL_DATA_TYPE)-0.007091623812149732);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[11], 1, 25, (DAAL_DATA_TYPE)0.94550000000000012);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[13], 0, 27, (DAAL_DATA_TYPE)0.82250000000000012);
    builder.addLeafNode(treeId, nodeIds[14], 0, (DAAL_DATA_TYPE)0.0089408969485692772);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[14], 1, 9, (DAAL_DATA_TYPE)1.3035000000000003);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[16], 0, 26, (DAAL_DATA_TYPE)0.88850000000000018);
    builder.addLeafNode(treeId, nodeIds[17], 0, (DAAL_DATA_TYPE)-0.0091757083023098155);
    builder.addLeafNode(treeId, nodeIds[17], 1, (DAAL_DATA_TYPE)0.0013337287776822213);
    builder.addLeafNode(treeId, nodeIds[16], 1, (DAAL_DATA_TYPE)0.014518989724191753);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[13], 1, 9, (DAAL_DATA_TYPE)1.0415000000000003);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[21], 0, 24, (DAAL_DATA_TYPE)0.71850000000000003);
    builder.addLeafNode(treeId, nodeIds[22], 0, (DAAL_DATA_TYPE)0.0081997824065825533);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[22], 1, 9, (DAAL_DATA_TYPE)0.68950000000000011);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[24], 0, 6, (DAAL_DATA_TYPE)0.23500000000000001);
    builder.addLeafNode(treeId, nodeIds[25], 0, (DAAL_DATA_TYPE)-0.010227355153061623);
    builder.addLeafNode(treeId, nodeIds[25], 1, (DAAL_DATA_TYPE)0.0065396589248679403);
    builder.addLeafNode(treeId, nodeIds[24], 1, (DAAL_DATA_TYPE)-0.012436767012783977);
    builder.addLeafNode(treeId, nodeIds[21], 1, (DAAL_DATA_TYPE)0.0046019605988142443);
    nodeIds[30] = builder.addSplitNode(treeId, nodeIds[10], 1, 27, (DAAL_DATA_TYPE)0.90650000000000019);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[30], 0, 25, (DAAL_DATA_TYPE)1.0025000000000002);
    builder.addLeafNode(treeId, nodeIds[31], 0, (DAAL_DATA_TYPE)0.010164003737532255);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[31], 1, 5, (DAAL_DATA_TYPE)1.1815000000000002);
    builder.addLeafNode(treeId, nodeIds[33], 0, (DAAL_DATA_TYPE)-0.00250337917932728);
    builder.addLeafNode(treeId, nodeIds[33], 1, (DAAL_DATA_TYPE)0.011710276897402777);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[30], 1, 0, (DAAL_DATA_TYPE)1.7460000000000002);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[36], 0, 3, (DAAL_DATA_TYPE)2.0310000000000001);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[37], 0, 25, (DAAL_DATA_TYPE)0.99250000000000005);
    builder.addLeafNode(treeId, nodeIds[38], 0, (DAAL_DATA_TYPE)0.0076097020917229412);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[38], 1, 5, (DAAL_DATA_TYPE)1.3045000000000002);
    builder.addLeafNode(treeId, nodeIds[40], 0, (DAAL_DATA_TYPE)-0.004515441839235375);
    builder.addLeafNode(treeId, nodeIds[40], 1, (DAAL_DATA_TYPE)0.0094080291204638299);
    builder.addLeafNode(treeId, nodeIds[37], 1, (DAAL_DATA_TYPE)-0.0055314376784695524);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[36], 1, 24, (DAAL_DATA_TYPE)1.0755000000000001);
    builder.addLeafNode(treeId, nodeIds[44], 0, (DAAL_DATA_TYPE)-0.01678776312292668);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[44], 1, 24, (DAAL_DATA_TYPE)1.4775000000000003);
    builder.addLeafNode(treeId, nodeIds[46], 0, (DAAL_DATA_TYPE)0.0069827054475629056);
    builder.addLeafNode(treeId, nodeIds[46], 1, (DAAL_DATA_TYPE)-0.012362741336629198);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[1], 1, 3, (DAAL_DATA_TYPE)1.8335000000000001);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[49], 0, 22, (DAAL_DATA_TYPE)1.0465000000000002);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[50], 0, 22, (DAAL_DATA_TYPE)0.74450000000000005);
    builder.addLeafNode(treeId, nodeIds[51], 0, (DAAL_DATA_TYPE)0.0029343162070621146);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[51], 1, 27, (DAAL_DATA_TYPE)0.87250000000000016);
    builder.addLeafNode(treeId, nodeIds[53], 0, (DAAL_DATA_TYPE)-0.0034379264546765226);
    builder.addLeafNode(treeId, nodeIds[53], 1, (DAAL_DATA_TYPE)-0.011452734343121562);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[50], 1, 25, (DAAL_DATA_TYPE)2.1950000000000007);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[56], 0, 5, (DAAL_DATA_TYPE)1.6690000000000003);
    builder.addLeafNode(treeId, nodeIds[57], 0, (DAAL_DATA_TYPE)-0.0017356484448266723);
    builder.addLeafNode(treeId, nodeIds[57], 1, (DAAL_DATA_TYPE)0.01484496490708713);
    builder.addLeafNode(treeId, nodeIds[56], 1, (DAAL_DATA_TYPE)-0.011364531072608212);
    builder.addLeafNode(treeId, nodeIds[49], 1, (DAAL_DATA_TYPE)-0.016331328668942057);

}

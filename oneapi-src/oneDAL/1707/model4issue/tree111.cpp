 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree111(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 9, (DAAL_DATA_TYPE)0.90350000000000008);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 27, (DAAL_DATA_TYPE)1.6475000000000002);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 7, (DAAL_DATA_TYPE)-1.2814999999999996);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 13, (DAAL_DATA_TYPE)1.1595000000000002);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 13, (DAAL_DATA_TYPE)0.96150000000000013);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 7, (DAAL_DATA_TYPE)-1.6634999999999998);
    builder.addLeafNode(treeId, nodeIds[6], 0, (DAAL_DATA_TYPE)-0.005635058349280647);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[6], 1, 26, (DAAL_DATA_TYPE)1.2315000000000003);
    builder.addLeafNode(treeId, nodeIds[8], 0, (DAAL_DATA_TYPE)0.004735066218342146);
    builder.addLeafNode(treeId, nodeIds[8], 1, (DAAL_DATA_TYPE)-0.0066195211018480003);
    builder.addLeafNode(treeId, nodeIds[5], 1, (DAAL_DATA_TYPE)-0.0080432454088272959);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[4], 1, 24, (DAAL_DATA_TYPE)0.96850000000000003);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[12], 0, 5, (DAAL_DATA_TYPE)0.84250000000000014);
    builder.addLeafNode(treeId, nodeIds[13], 0, (DAAL_DATA_TYPE)-0.0046636447271642591);
    builder.addLeafNode(treeId, nodeIds[13], 1, (DAAL_DATA_TYPE)0.0080906229462988418);
    builder.addLeafNode(treeId, nodeIds[12], 1, (DAAL_DATA_TYPE)0.013715136112296022);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[3], 1, 23, (DAAL_DATA_TYPE)0.97750000000000015);
    builder.addLeafNode(treeId, nodeIds[17], 0, (DAAL_DATA_TYPE)0.0037755041746422649);
    builder.addLeafNode(treeId, nodeIds[17], 1, (DAAL_DATA_TYPE)-0.0010813768270806982);
    builder.addLeafNode(treeId, nodeIds[2], 1, (DAAL_DATA_TYPE)-0.0085042950759331385);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[1], 1, 27, (DAAL_DATA_TYPE)0.67850000000000021);
    builder.addLeafNode(treeId, nodeIds[21], 0, (DAAL_DATA_TYPE)0.0054843877663817977);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[21], 1, 26, (DAAL_DATA_TYPE)0.80550000000000022);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[23], 0, 10, (DAAL_DATA_TYPE)0.027500000000000004);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[24], 0, 18, (DAAL_DATA_TYPE)-0.67249999999999999);
    builder.addLeafNode(treeId, nodeIds[25], 0, (DAAL_DATA_TYPE)-0.014137668508153997);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[25], 1, 10, (DAAL_DATA_TYPE)-0.30549999999999994);
    builder.addLeafNode(treeId, nodeIds[27], 0, (DAAL_DATA_TYPE)0.00076785518569832153);
    builder.addLeafNode(treeId, nodeIds[27], 1, (DAAL_DATA_TYPE)-0.01118176345527172);
    nodeIds[30] = builder.addSplitNode(treeId, nodeIds[24], 1, 20, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    builder.addLeafNode(treeId, nodeIds[30], 0, (DAAL_DATA_TYPE)0.0043554788331190749);
    builder.addLeafNode(treeId, nodeIds[30], 1, (DAAL_DATA_TYPE)-0.0065999715374066284);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[23], 1, 9, (DAAL_DATA_TYPE)0.93750000000000011);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[33], 0, 10, (DAAL_DATA_TYPE)1.0485000000000002);
    builder.addLeafNode(treeId, nodeIds[34], 0, (DAAL_DATA_TYPE)0.0060665528591669782);
    builder.addLeafNode(treeId, nodeIds[34], 1, (DAAL_DATA_TYPE)-0.0051773579957873819);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[33], 1, 5, (DAAL_DATA_TYPE)0.50050000000000006);
    builder.addLeafNode(treeId, nodeIds[37], 0, (DAAL_DATA_TYPE)0.0064704840700771362);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[37], 1, 23, (DAAL_DATA_TYPE)0.98750000000000016);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[39], 0, 1, (DAAL_DATA_TYPE)0.49250000000000005);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[40], 0, 22, (DAAL_DATA_TYPE)0.9405);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[41], 0, 22, (DAAL_DATA_TYPE)0.78450000000000009);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[42], 0, 7, (DAAL_DATA_TYPE)-0.27649999999999997);
    builder.addLeafNode(treeId, nodeIds[43], 0, (DAAL_DATA_TYPE)-0.0025545904194586911);
    builder.addLeafNode(treeId, nodeIds[43], 1, (DAAL_DATA_TYPE)0.009839743985129254);
    builder.addLeafNode(treeId, nodeIds[42], 1, (DAAL_DATA_TYPE)-0.0022217891662258587);
    builder.addLeafNode(treeId, nodeIds[41], 1, (DAAL_DATA_TYPE)0.0055306331442597396);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[40], 1, 17, (DAAL_DATA_TYPE)1.4100000000000004);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[48], 0, 25, (DAAL_DATA_TYPE)2.0050000000000003);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[49], 0, 8, (DAAL_DATA_TYPE)1.6300000000000001);
    builder.addLeafNode(treeId, nodeIds[50], 0, (DAAL_DATA_TYPE)-0.002086423370496345);
    builder.addLeafNode(treeId, nodeIds[50], 1, (DAAL_DATA_TYPE)-0.0096473966670386942);
    builder.addLeafNode(treeId, nodeIds[49], 1, (DAAL_DATA_TYPE)0.0064734421825657293);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[48], 1, 18, (DAAL_DATA_TYPE)-0.15449999999999997);
    builder.addLeafNode(treeId, nodeIds[54], 0, (DAAL_DATA_TYPE)0.015156475773879461);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)-0.00074386701120861948);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[39], 1, 18, (DAAL_DATA_TYPE)1.9655000000000002);
    nodeIds[58] = builder.addSplitNode(treeId, nodeIds[57], 0, 22, (DAAL_DATA_TYPE)0.68650000000000022);
    builder.addLeafNode(treeId, nodeIds[58], 0, (DAAL_DATA_TYPE)0.0047009651327550592);
    builder.addLeafNode(treeId, nodeIds[58], 1, (DAAL_DATA_TYPE)-0.001208739653181362);
    builder.addLeafNode(treeId, nodeIds[57], 1, (DAAL_DATA_TYPE)0.008110209396391203);

}

 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree149(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 9, (DAAL_DATA_TYPE)0.90750000000000008);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 27, (DAAL_DATA_TYPE)1.6475000000000002);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 10, (DAAL_DATA_TYPE)0.34950000000000003);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 9, (DAAL_DATA_TYPE)0.89250000000000018);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 1, (DAAL_DATA_TYPE)0.45550000000000007);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 10, (DAAL_DATA_TYPE)0.29450000000000004);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[6], 0, 15, (DAAL_DATA_TYPE)-1.6534999999999997);
    builder.addLeafNode(treeId, nodeIds[7], 0, (DAAL_DATA_TYPE)0.0089531621550796216);
    builder.addLeafNode(treeId, nodeIds[7], 1, (DAAL_DATA_TYPE)5.9739542448782058e-05);
    builder.addLeafNode(treeId, nodeIds[6], 1, (DAAL_DATA_TYPE)-0.0092331778335695471);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[5], 1, 7, (DAAL_DATA_TYPE)-1.4904999999999997);
    builder.addLeafNode(treeId, nodeIds[11], 0, (DAAL_DATA_TYPE)0.006160213743095045);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[11], 1, 11, (DAAL_DATA_TYPE)0.66550000000000009);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[13], 0, 14, (DAAL_DATA_TYPE)0.13650000000000004);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[14], 0, 21, (DAAL_DATA_TYPE)0.76950000000000018);
    builder.addLeafNode(treeId, nodeIds[15], 0, (DAAL_DATA_TYPE)0.0016734126092093748);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[15], 1, 2, (DAAL_DATA_TYPE)0.14900000000000002);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[17], 0, 27, (DAAL_DATA_TYPE)1.0585000000000002);
    builder.addLeafNode(treeId, nodeIds[18], 0, (DAAL_DATA_TYPE)-0.0077259070106915064);
    builder.addLeafNode(treeId, nodeIds[18], 1, (DAAL_DATA_TYPE)0.0055715040164068348);
    builder.addLeafNode(treeId, nodeIds[17], 1, (DAAL_DATA_TYPE)-0.01181012373417616);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[14], 1, 18, (DAAL_DATA_TYPE)1.0370000000000001);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[22], 0, 3, (DAAL_DATA_TYPE)0.58950000000000002);
    builder.addLeafNode(treeId, nodeIds[23], 0, (DAAL_DATA_TYPE)-0.0036182265444141301);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[23], 1, 7, (DAAL_DATA_TYPE)0.6100000000000001);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[25], 0, 11, (DAAL_DATA_TYPE)-1.0414999999999999);
    builder.addLeafNode(treeId, nodeIds[26], 0, (DAAL_DATA_TYPE)0.00065055514818855706);
    builder.addLeafNode(treeId, nodeIds[26], 1, (DAAL_DATA_TYPE)0.012401057745759878);
    builder.addLeafNode(treeId, nodeIds[25], 1, (DAAL_DATA_TYPE)-0.00033359391296782144);
    builder.addLeafNode(treeId, nodeIds[22], 1, (DAAL_DATA_TYPE)-0.0053787593310698871);
    builder.addLeafNode(treeId, nodeIds[13], 1, (DAAL_DATA_TYPE)-0.0061132767635897027);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[4], 1, 21, (DAAL_DATA_TYPE)0.9215000000000001);
    builder.addLeafNode(treeId, nodeIds[32], 0, (DAAL_DATA_TYPE)-0.012484604259952903);
    builder.addLeafNode(treeId, nodeIds[32], 1, (DAAL_DATA_TYPE)0.00020461749906341235);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[3], 1, 10, (DAAL_DATA_TYPE)0.43550000000000005);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[35], 0, 24, (DAAL_DATA_TYPE)0.85050000000000014);
    builder.addLeafNode(treeId, nodeIds[36], 0, (DAAL_DATA_TYPE)-0.0054516299881718381);
    builder.addLeafNode(treeId, nodeIds[36], 1, (DAAL_DATA_TYPE)0.011577128266127638);
    builder.addLeafNode(treeId, nodeIds[35], 1, (DAAL_DATA_TYPE)0.00030379503220459727);
    builder.addLeafNode(treeId, nodeIds[2], 1, (DAAL_DATA_TYPE)-0.0070277131870388997);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[1], 1, 0, (DAAL_DATA_TYPE)0.38550000000000006);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[41], 0, 11, (DAAL_DATA_TYPE)-1.1794999999999998);
    builder.addLeafNode(treeId, nodeIds[42], 0, (DAAL_DATA_TYPE)0.012547204881906511);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[42], 1, 7, (DAAL_DATA_TYPE)-0.76749999999999996);
    builder.addLeafNode(treeId, nodeIds[44], 0, (DAAL_DATA_TYPE)0.0087646751001517736);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[44], 1, 21, (DAAL_DATA_TYPE)0.76250000000000007);
    builder.addLeafNode(treeId, nodeIds[46], 0, (DAAL_DATA_TYPE)-0.0077381200739182537);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[46], 1, 5, (DAAL_DATA_TYPE)0.96250000000000002);
    builder.addLeafNode(treeId, nodeIds[48], 0, (DAAL_DATA_TYPE)0.0086803879890152633);
    builder.addLeafNode(treeId, nodeIds[48], 1, (DAAL_DATA_TYPE)-0.0014543883881107729);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[41], 1, 9, (DAAL_DATA_TYPE)0.93750000000000011);
    builder.addLeafNode(treeId, nodeIds[51], 0, (DAAL_DATA_TYPE)0.0037985623320452421);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[51], 1, 10, (DAAL_DATA_TYPE)0.97550000000000014);
    builder.addLeafNode(treeId, nodeIds[53], 0, (DAAL_DATA_TYPE)-0.00036267076577571042);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[53], 1, 2, (DAAL_DATA_TYPE)1.5225000000000002);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[55], 0, 20, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[56], 0, 23, (DAAL_DATA_TYPE)0.99350000000000016);
    builder.addLeafNode(treeId, nodeIds[57], 0, (DAAL_DATA_TYPE)0.0032042713690560876);
    builder.addLeafNode(treeId, nodeIds[57], 1, (DAAL_DATA_TYPE)0.009914350306857599);
    builder.addLeafNode(treeId, nodeIds[56], 1, (DAAL_DATA_TYPE)0.00033235459776366494);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)-0.0077014040032571014);

}

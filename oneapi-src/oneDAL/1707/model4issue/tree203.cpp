 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree203(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 7, (DAAL_DATA_TYPE)0.14550000000000002);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 22, (DAAL_DATA_TYPE)1.8280000000000001);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 22, (DAAL_DATA_TYPE)1.6755000000000002);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 17, (DAAL_DATA_TYPE)0.40150000000000008);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 22, (DAAL_DATA_TYPE)0.88150000000000006);
    builder.addLeafNode(treeId, nodeIds[5], 0, (DAAL_DATA_TYPE)-0.0012643188196307165);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[5], 1, 9, (DAAL_DATA_TYPE)0.74550000000000016);
    builder.addLeafNode(treeId, nodeIds[7], 0, (DAAL_DATA_TYPE)0.0012383925731145693);
    builder.addLeafNode(treeId, nodeIds[7], 1, (DAAL_DATA_TYPE)0.011886315391613889);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[4], 1, 10, (DAAL_DATA_TYPE)0.34950000000000003);
    builder.addLeafNode(treeId, nodeIds[10], 0, (DAAL_DATA_TYPE)-0.00022166955824055987);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[10], 1, 27, (DAAL_DATA_TYPE)1.3645000000000003);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[12], 0, 19, (DAAL_DATA_TYPE)-1.4119999999999997);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[13], 0, 4, (DAAL_DATA_TYPE)0.57050000000000012);
    builder.addLeafNode(treeId, nodeIds[14], 0, (DAAL_DATA_TYPE)0.003149467115200913);
    builder.addLeafNode(treeId, nodeIds[14], 1, (DAAL_DATA_TYPE)0.013398183085024357);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[13], 1, 4, (DAAL_DATA_TYPE)0.27300000000000008);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[17], 0, 5, (DAAL_DATA_TYPE)0.5445000000000001);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[18], 0, 4, (DAAL_DATA_TYPE)-0.87349999999999983);
    builder.addLeafNode(treeId, nodeIds[19], 0, (DAAL_DATA_TYPE)0.00081535649850316685);
    builder.addLeafNode(treeId, nodeIds[19], 1, (DAAL_DATA_TYPE)0.013600774617357689);
    builder.addLeafNode(treeId, nodeIds[18], 1, (DAAL_DATA_TYPE)0.0019038222484581157);
    builder.addLeafNode(treeId, nodeIds[17], 1, (DAAL_DATA_TYPE)-0.00018952005903784022);
    builder.addLeafNode(treeId, nodeIds[12], 1, (DAAL_DATA_TYPE)-0.0042712526948058185);
    builder.addLeafNode(treeId, nodeIds[3], 1, (DAAL_DATA_TYPE)-0.0095246177895042389);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[2], 1, 24, (DAAL_DATA_TYPE)1.1375000000000002);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[26], 0, 18, (DAAL_DATA_TYPE)-0.11949999999999998);
    builder.addLeafNode(treeId, nodeIds[27], 0, (DAAL_DATA_TYPE)0.0021138877090480595);
    builder.addLeafNode(treeId, nodeIds[27], 1, (DAAL_DATA_TYPE)0.016103480928219283);
    builder.addLeafNode(treeId, nodeIds[26], 1, (DAAL_DATA_TYPE)6.7813462525043855e-05);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[1], 1, 7, (DAAL_DATA_TYPE)0.26300000000000007);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[31], 0, 2, (DAAL_DATA_TYPE)-1.4204999999999999);
    builder.addLeafNode(treeId, nodeIds[32], 0, (DAAL_DATA_TYPE)0.006179676549104245);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[32], 1, 10, (DAAL_DATA_TYPE)-1.1314999999999997);
    builder.addLeafNode(treeId, nodeIds[34], 0, (DAAL_DATA_TYPE)-0.013683824210117261);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[34], 1, 10, (DAAL_DATA_TYPE)0.56850000000000012);
    builder.addLeafNode(treeId, nodeIds[36], 0, (DAAL_DATA_TYPE)-0.0009652650771279107);
    builder.addLeafNode(treeId, nodeIds[36], 1, (DAAL_DATA_TYPE)-0.0080075165686699073);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[31], 1, 1, (DAAL_DATA_TYPE)1.3805000000000003);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[39], 0, 24, (DAAL_DATA_TYPE)0.51550000000000018);
    builder.addLeafNode(treeId, nodeIds[40], 0, (DAAL_DATA_TYPE)-0.0074734324302810897);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[40], 1, 24, (DAAL_DATA_TYPE)0.65450000000000019);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[42], 0, 4, (DAAL_DATA_TYPE)-0.58149999999999979);
    builder.addLeafNode(treeId, nodeIds[43], 0, (DAAL_DATA_TYPE)0.0070636265755941469);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[43], 1, 27, (DAAL_DATA_TYPE)0.64150000000000007);
    builder.addLeafNode(treeId, nodeIds[45], 0, (DAAL_DATA_TYPE)-0.0076179705856537277);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[45], 1, 18, (DAAL_DATA_TYPE)0.43750000000000006);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[47], 0, 4, (DAAL_DATA_TYPE)0.15650000000000003);
    builder.addLeafNode(treeId, nodeIds[48], 0, (DAAL_DATA_TYPE)-0.0023793232017418463);
    builder.addLeafNode(treeId, nodeIds[48], 1, (DAAL_DATA_TYPE)0.010652458403880398);
    builder.addLeafNode(treeId, nodeIds[47], 1, (DAAL_DATA_TYPE)-0.0039572836222270362);
    builder.addLeafNode(treeId, nodeIds[42], 1, (DAAL_DATA_TYPE)4.787184892254177e-05);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[39], 1, 5, (DAAL_DATA_TYPE)1.2635000000000003);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[53], 0, 22, (DAAL_DATA_TYPE)0.94750000000000012);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[54], 0, 22, (DAAL_DATA_TYPE)0.74450000000000005);
    builder.addLeafNode(treeId, nodeIds[55], 0, (DAAL_DATA_TYPE)-0.011345338975079359);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[55], 1, 21, (DAAL_DATA_TYPE)0.81450000000000011);
    builder.addLeafNode(treeId, nodeIds[57], 0, (DAAL_DATA_TYPE)0.0078716322439364526);
    builder.addLeafNode(treeId, nodeIds[57], 1, (DAAL_DATA_TYPE)-0.0019522675059978731);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)-0.0068784286203908227);
    builder.addLeafNode(treeId, nodeIds[53], 1, (DAAL_DATA_TYPE)0.0039281935349257816);

}

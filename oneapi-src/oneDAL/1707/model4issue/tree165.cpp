 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree165(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 21, (DAAL_DATA_TYPE)0.42850000000000005);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 26, (DAAL_DATA_TYPE)0.84050000000000014);
    builder.addLeafNode(treeId, nodeIds[2], 0, (DAAL_DATA_TYPE)0.0029510355680375487);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[2], 1, 26, (DAAL_DATA_TYPE)0.92450000000000021);
    builder.addLeafNode(treeId, nodeIds[4], 0, (DAAL_DATA_TYPE)-0.015130798891186716);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[4], 1, 1, (DAAL_DATA_TYPE)0.80150000000000021);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[6], 0, 15, (DAAL_DATA_TYPE)-0.25449999999999995);
    builder.addLeafNode(treeId, nodeIds[7], 0, (DAAL_DATA_TYPE)0.0056338009496147822);
    builder.addLeafNode(treeId, nodeIds[7], 1, (DAAL_DATA_TYPE)-0.0049143715674290437);
    builder.addLeafNode(treeId, nodeIds[6], 1, (DAAL_DATA_TYPE)-0.011127730565411706);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[1], 1, 1, (DAAL_DATA_TYPE)-1.9319999999999997);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[11], 0, 18, (DAAL_DATA_TYPE)0.16250000000000003);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[12], 0, 18, (DAAL_DATA_TYPE)-0.26349999999999996);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[13], 0, 3, (DAAL_DATA_TYPE)0.60050000000000014);
    builder.addLeafNode(treeId, nodeIds[14], 0, (DAAL_DATA_TYPE)0.0099464283122316661);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[14], 1, 7, (DAAL_DATA_TYPE)-0.18949999999999997);
    builder.addLeafNode(treeId, nodeIds[16], 0, (DAAL_DATA_TYPE)0.0064115290767918142);
    builder.addLeafNode(treeId, nodeIds[16], 1, (DAAL_DATA_TYPE)-0.0047910795981685322);
    builder.addLeafNode(treeId, nodeIds[13], 1, (DAAL_DATA_TYPE)0.011269186281909545);
    builder.addLeafNode(treeId, nodeIds[12], 1, (DAAL_DATA_TYPE)-0.0037470262571188961);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[11], 1, 18, (DAAL_DATA_TYPE)0.21850000000000003);
    builder.addLeafNode(treeId, nodeIds[21], 0, (DAAL_DATA_TYPE)-0.00041641635981866257);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[21], 1, 3, (DAAL_DATA_TYPE)0.48450000000000004);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[23], 0, 22, (DAAL_DATA_TYPE)1.0675000000000001);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[24], 0, 18, (DAAL_DATA_TYPE)0.44850000000000007);
    builder.addLeafNode(treeId, nodeIds[25], 0, (DAAL_DATA_TYPE)0.0034052957348259432);
    builder.addLeafNode(treeId, nodeIds[25], 1, (DAAL_DATA_TYPE)-0.0043294606055752751);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[24], 1, 1, (DAAL_DATA_TYPE)-0.24249999999999997);
    builder.addLeafNode(treeId, nodeIds[28], 0, (DAAL_DATA_TYPE)-0.0031650751130655411);
    builder.addLeafNode(treeId, nodeIds[28], 1, (DAAL_DATA_TYPE)0.0066166175266964338);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[23], 1, 19, (DAAL_DATA_TYPE)1.639);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[31], 0, 0, (DAAL_DATA_TYPE)0.56150000000000022);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[32], 0, 5, (DAAL_DATA_TYPE)0.45850000000000007);
    builder.addLeafNode(treeId, nodeIds[33], 0, (DAAL_DATA_TYPE)-0.012074750431236767);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[33], 1, 22, (DAAL_DATA_TYPE)0.75750000000000017);
    builder.addLeafNode(treeId, nodeIds[35], 0, (DAAL_DATA_TYPE)0.008392803084105253);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[35], 1, 12, (DAAL_DATA_TYPE)1.6610000000000003);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[37], 0, 14, (DAAL_DATA_TYPE)-0.54249999999999987);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[38], 0, 4, (DAAL_DATA_TYPE)0.73250000000000004);
    builder.addLeafNode(treeId, nodeIds[39], 0, (DAAL_DATA_TYPE)-0.01017691854665625);
    builder.addLeafNode(treeId, nodeIds[39], 1, (DAAL_DATA_TYPE)0.0035306377615779636);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[38], 1, 2, (DAAL_DATA_TYPE)0.70950000000000013);
    builder.addLeafNode(treeId, nodeIds[42], 0, (DAAL_DATA_TYPE)-0.00049581355773485624);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[42], 1, 24, (DAAL_DATA_TYPE)1.0795000000000001);
    builder.addLeafNode(treeId, nodeIds[44], 0, (DAAL_DATA_TYPE)0.0145824128554927);
    builder.addLeafNode(treeId, nodeIds[44], 1, (DAAL_DATA_TYPE)-0.0006292098574340344);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[37], 1, 19, (DAAL_DATA_TYPE)-0.82099999999999984);
    builder.addLeafNode(treeId, nodeIds[47], 0, (DAAL_DATA_TYPE)-0.010397456524827119);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[47], 1, 14, (DAAL_DATA_TYPE)0.024500000000000004);
    builder.addLeafNode(treeId, nodeIds[49], 0, (DAAL_DATA_TYPE)0.0052055808034940408);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[49], 1, 14, (DAAL_DATA_TYPE)0.5415000000000002);
    builder.addLeafNode(treeId, nodeIds[51], 0, (DAAL_DATA_TYPE)-0.013188643150386356);
    builder.addLeafNode(treeId, nodeIds[51], 1, (DAAL_DATA_TYPE)-0.0016514087720266122);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[32], 1, 0, (DAAL_DATA_TYPE)0.59150000000000003);
    builder.addLeafNode(treeId, nodeIds[54], 0, (DAAL_DATA_TYPE)0.0089686594799988813);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[54], 1, 3, (DAAL_DATA_TYPE)0.57250000000000012);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[56], 0, 19, (DAAL_DATA_TYPE)0.49650000000000005);
    builder.addLeafNode(treeId, nodeIds[57], 0, (DAAL_DATA_TYPE)0.0013753980375401191);
    builder.addLeafNode(treeId, nodeIds[57], 1, (DAAL_DATA_TYPE)0.012661430773409345);
    builder.addLeafNode(treeId, nodeIds[56], 1, (DAAL_DATA_TYPE)0.00085358891007800163);
    builder.addLeafNode(treeId, nodeIds[31], 1, (DAAL_DATA_TYPE)0.006939494689551952);

}

 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree38(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 22, (DAAL_DATA_TYPE)1.0705000000000002);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 25, (DAAL_DATA_TYPE)0.94550000000000012);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 25, (DAAL_DATA_TYPE)0.73750000000000016);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 21, (DAAL_DATA_TYPE)0.78150000000000019);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 5, (DAAL_DATA_TYPE)0.70750000000000013);
    builder.addLeafNode(treeId, nodeIds[5], 0, (DAAL_DATA_TYPE)-0.0084522099537256909);
    builder.addLeafNode(treeId, nodeIds[5], 1, (DAAL_DATA_TYPE)-0.0014760364159192452);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[4], 1, 3, (DAAL_DATA_TYPE)1.6420000000000001);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[8], 0, 22, (DAAL_DATA_TYPE)0.80750000000000022);
    builder.addLeafNode(treeId, nodeIds[9], 0, (DAAL_DATA_TYPE)0.0051195017445139039);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[9], 1, 10, (DAAL_DATA_TYPE)-1.3474999999999999);
    builder.addLeafNode(treeId, nodeIds[11], 0, (DAAL_DATA_TYPE)-0.0104558573480238);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[11], 1, 13, (DAAL_DATA_TYPE)0.94450000000000001);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[13], 0, 5, (DAAL_DATA_TYPE)0.98050000000000004);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[14], 0, 27, (DAAL_DATA_TYPE)1.0405000000000002);
    builder.addLeafNode(treeId, nodeIds[15], 0, (DAAL_DATA_TYPE)-0.0043062443093533085);
    builder.addLeafNode(treeId, nodeIds[15], 1, (DAAL_DATA_TYPE)0.009420580727358659);
    builder.addLeafNode(treeId, nodeIds[14], 1, (DAAL_DATA_TYPE)0.0049003536536081421);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[13], 1, 23, (DAAL_DATA_TYPE)1.0665000000000002);
    builder.addLeafNode(treeId, nodeIds[19], 0, (DAAL_DATA_TYPE)0.0019728276311703351);
    builder.addLeafNode(treeId, nodeIds[19], 1, (DAAL_DATA_TYPE)0.014096006770164538);
    builder.addLeafNode(treeId, nodeIds[8], 1, (DAAL_DATA_TYPE)-0.0065162265392607211);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[3], 1, 14, (DAAL_DATA_TYPE)0.21150000000000002);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[23], 0, 26, (DAAL_DATA_TYPE)0.86550000000000005);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[24], 0, 27, (DAAL_DATA_TYPE)0.76850000000000007);
    builder.addLeafNode(treeId, nodeIds[25], 0, (DAAL_DATA_TYPE)-0.00080185871113810632);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[25], 1, 25, (DAAL_DATA_TYPE)0.85550000000000004);
    builder.addLeafNode(treeId, nodeIds[27], 0, (DAAL_DATA_TYPE)-0.0059249820474248666);
    builder.addLeafNode(treeId, nodeIds[27], 1, (DAAL_DATA_TYPE)-0.026228579336946663);
    nodeIds[30] = builder.addSplitNode(treeId, nodeIds[24], 1, 27, (DAAL_DATA_TYPE)1.0585000000000002);
    builder.addLeafNode(treeId, nodeIds[30], 0, (DAAL_DATA_TYPE)0.0042923752505045669);
    builder.addLeafNode(treeId, nodeIds[30], 1, (DAAL_DATA_TYPE)-0.0068306782678382045);
    builder.addLeafNode(treeId, nodeIds[23], 1, (DAAL_DATA_TYPE)0.0045409906136087211);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[2], 1, 5, (DAAL_DATA_TYPE)0.65550000000000008);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[34], 0, 26, (DAAL_DATA_TYPE)0.9275000000000001);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[35], 0, 13, (DAAL_DATA_TYPE)1.1775000000000002);
    builder.addLeafNode(treeId, nodeIds[36], 0, (DAAL_DATA_TYPE)-0.015528176668324048);
    builder.addLeafNode(treeId, nodeIds[36], 1, (DAAL_DATA_TYPE)-0.0010160941630601883);
    builder.addLeafNode(treeId, nodeIds[35], 1, (DAAL_DATA_TYPE)-0.0026704594357447194);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[34], 1, 27, (DAAL_DATA_TYPE)1.0835000000000001);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[40], 0, 19, (DAAL_DATA_TYPE)-1.1314999999999997);
    builder.addLeafNode(treeId, nodeIds[41], 0, (DAAL_DATA_TYPE)-0.0051854520665677219);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[41], 1, 26, (DAAL_DATA_TYPE)0.9255000000000001);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[43], 0, 0, (DAAL_DATA_TYPE)0.40350000000000008);
    builder.addLeafNode(treeId, nodeIds[44], 0, (DAAL_DATA_TYPE)0.010738511234521866);
    builder.addLeafNode(treeId, nodeIds[44], 1, (DAAL_DATA_TYPE)-0.0044914091178236554);
    builder.addLeafNode(treeId, nodeIds[43], 1, (DAAL_DATA_TYPE)0.0016073418703008366);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[40], 1, 0, (DAAL_DATA_TYPE)1.2625000000000002);
    builder.addLeafNode(treeId, nodeIds[48], 0, (DAAL_DATA_TYPE)-0.0026552176674860613);
    builder.addLeafNode(treeId, nodeIds[48], 1, (DAAL_DATA_TYPE)-0.010215452048233001);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[1], 1, 25, (DAAL_DATA_TYPE)1.9045000000000003);
    nodeIds[52] = builder.addSplitNode(treeId, nodeIds[51], 0, 24, (DAAL_DATA_TYPE)0.74850000000000005);
    builder.addLeafNode(treeId, nodeIds[52], 0, (DAAL_DATA_TYPE)0.0062162891273001512);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[52], 1, 1, (DAAL_DATA_TYPE)1.8120000000000001);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[54], 0, 26, (DAAL_DATA_TYPE)0.85350000000000004);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[55], 0, 11, (DAAL_DATA_TYPE)0.12850000000000003);
    builder.addLeafNode(treeId, nodeIds[56], 0, (DAAL_DATA_TYPE)-8.3471006817287878e-05);
    builder.addLeafNode(treeId, nodeIds[56], 1, (DAAL_DATA_TYPE)-0.018503517551081521);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)0.0024463358103365604);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)-0.011360183358192444);
    builder.addLeafNode(treeId, nodeIds[51], 1, (DAAL_DATA_TYPE)-0.0055069815367460254);

}

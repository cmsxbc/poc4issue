 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree150(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 15, (DAAL_DATA_TYPE)1.7085000000000001);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 9, (DAAL_DATA_TYPE)0.90750000000000008);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 27, (DAAL_DATA_TYPE)1.5530000000000002);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 9, (DAAL_DATA_TYPE)0.88050000000000017);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 18, (DAAL_DATA_TYPE)2.3535000000000004);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 10, (DAAL_DATA_TYPE)-1.3474999999999999);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[6], 0, 13, (DAAL_DATA_TYPE)0.87750000000000006);
    builder.addLeafNode(treeId, nodeIds[7], 0, (DAAL_DATA_TYPE)4.573537800345362e-05);
    builder.addLeafNode(treeId, nodeIds[7], 1, (DAAL_DATA_TYPE)-0.0052030663995996235);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[6], 1, 26, (DAAL_DATA_TYPE)1.6035000000000001);
    builder.addLeafNode(treeId, nodeIds[10], 0, (DAAL_DATA_TYPE)0.0001317591456219658);
    builder.addLeafNode(treeId, nodeIds[10], 1, (DAAL_DATA_TYPE)0.0089132203479056014);
    builder.addLeafNode(treeId, nodeIds[5], 1, (DAAL_DATA_TYPE)-0.0098518163152039057);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[4], 1, 18, (DAAL_DATA_TYPE)0.99950000000000017);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[14], 0, 22, (DAAL_DATA_TYPE)0.98650000000000004);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[15], 0, 10, (DAAL_DATA_TYPE)0.13550000000000004);
    builder.addLeafNode(treeId, nodeIds[16], 0, (DAAL_DATA_TYPE)-0.011558282113911814);
    builder.addLeafNode(treeId, nodeIds[16], 1, (DAAL_DATA_TYPE)-0.00082137360877823087);
    builder.addLeafNode(treeId, nodeIds[15], 1, (DAAL_DATA_TYPE)0.00013988403463736178);
    builder.addLeafNode(treeId, nodeIds[14], 1, (DAAL_DATA_TYPE)0.0055062060821980527);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[3], 1, 0, (DAAL_DATA_TYPE)0.49950000000000006);
    builder.addLeafNode(treeId, nodeIds[21], 0, (DAAL_DATA_TYPE)0.0021725753741338848);
    builder.addLeafNode(treeId, nodeIds[21], 1, (DAAL_DATA_TYPE)-0.0088662087544798852);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[2], 1, 0, (DAAL_DATA_TYPE)0.38550000000000006);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[24], 0, 11, (DAAL_DATA_TYPE)-1.1794999999999998);
    builder.addLeafNode(treeId, nodeIds[25], 0, (DAAL_DATA_TYPE)0.0119198447316885);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[25], 1, 7, (DAAL_DATA_TYPE)-0.76749999999999996);
    builder.addLeafNode(treeId, nodeIds[27], 0, (DAAL_DATA_TYPE)0.0083264414681015423);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[27], 1, 21, (DAAL_DATA_TYPE)0.76250000000000007);
    builder.addLeafNode(treeId, nodeIds[29], 0, (DAAL_DATA_TYPE)-0.0073512141174763776);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[29], 1, 5, (DAAL_DATA_TYPE)0.96250000000000002);
    builder.addLeafNode(treeId, nodeIds[31], 0, (DAAL_DATA_TYPE)0.0082463684491813193);
    builder.addLeafNode(treeId, nodeIds[31], 1, (DAAL_DATA_TYPE)-0.0015960549186834563);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[24], 1, 21, (DAAL_DATA_TYPE)0.75550000000000017);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[34], 0, 5, (DAAL_DATA_TYPE)1.1275000000000002);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[35], 0, 14, (DAAL_DATA_TYPE)-0.60249999999999992);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[36], 0, 14, (DAAL_DATA_TYPE)-1.2704999999999997);
    builder.addLeafNode(treeId, nodeIds[37], 0, (DAAL_DATA_TYPE)0.0068797720458220555);
    builder.addLeafNode(treeId, nodeIds[37], 1, (DAAL_DATA_TYPE)-0.0043641128249719066);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[36], 1, 27, (DAAL_DATA_TYPE)0.91350000000000009);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[40], 0, 3, (DAAL_DATA_TYPE)1.1755000000000002);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[41], 0, 13, (DAAL_DATA_TYPE)0.59350000000000003);
    builder.addLeafNode(treeId, nodeIds[42], 0, (DAAL_DATA_TYPE)-0.0075422244412558419);
    builder.addLeafNode(treeId, nodeIds[42], 1, (DAAL_DATA_TYPE)0.0037648809310765218);
    builder.addLeafNode(treeId, nodeIds[41], 1, (DAAL_DATA_TYPE)0.011558920191600919);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[40], 1, 12, (DAAL_DATA_TYPE)1.6610000000000003);
    builder.addLeafNode(treeId, nodeIds[46], 0, (DAAL_DATA_TYPE)0.016842337189098965);
    builder.addLeafNode(treeId, nodeIds[46], 1, (DAAL_DATA_TYPE)0.0062182233110070232);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[35], 1, 19, (DAAL_DATA_TYPE)-0.076499999999999985);
    builder.addLeafNode(treeId, nodeIds[49], 0, (DAAL_DATA_TYPE)0.0033744500179792095);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[49], 1, 16, (DAAL_DATA_TYPE)1.9110000000000003);
    builder.addLeafNode(treeId, nodeIds[51], 0, (DAAL_DATA_TYPE)-0.0065874241408891976);
    builder.addLeafNode(treeId, nodeIds[51], 1, (DAAL_DATA_TYPE)0.0051535833822563297);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[34], 1, 27, (DAAL_DATA_TYPE)0.67850000000000021);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[54], 0, 0, (DAAL_DATA_TYPE)0.69450000000000001);
    builder.addLeafNode(treeId, nodeIds[55], 0, (DAAL_DATA_TYPE)-0.0020920915337389006);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)0.010044789353900768);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)-0.00039622501258683164);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[1], 1, 27, (DAAL_DATA_TYPE)0.7945000000000001);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)-0.0018742365948855877);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)0.0090359198016813028);

}

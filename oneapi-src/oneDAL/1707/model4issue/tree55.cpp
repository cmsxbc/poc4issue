 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree55(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 22, (DAAL_DATA_TYPE)1.0065000000000002);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 22, (DAAL_DATA_TYPE)0.8135);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 13, (DAAL_DATA_TYPE)0.32350000000000007);
    builder.addLeafNode(treeId, nodeIds[3], 0, (DAAL_DATA_TYPE)-0.01016115448598204);
    builder.addLeafNode(treeId, nodeIds[3], 1, (DAAL_DATA_TYPE)0.0014155531782607984);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[2], 1, 9, (DAAL_DATA_TYPE)2.3305000000000002);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[6], 0, 24, (DAAL_DATA_TYPE)0.73550000000000015);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 15, (DAAL_DATA_TYPE)-1.3554999999999999);
    builder.addLeafNode(treeId, nodeIds[8], 0, (DAAL_DATA_TYPE)-0.007841723070156818);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[8], 1, 17, (DAAL_DATA_TYPE)1.3325000000000002);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[10], 0, 2, (DAAL_DATA_TYPE)-0.78549999999999998);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[11], 0, 15, (DAAL_DATA_TYPE)0.88650000000000018);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[12], 0, 19, (DAAL_DATA_TYPE)0.83800000000000008);
    builder.addLeafNode(treeId, nodeIds[13], 0, (DAAL_DATA_TYPE)-0.003125212309153184);
    builder.addLeafNode(treeId, nodeIds[13], 1, (DAAL_DATA_TYPE)-0.016464581931459495);
    builder.addLeafNode(treeId, nodeIds[12], 1, (DAAL_DATA_TYPE)0.0064660624414682386);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[11], 1, 16, (DAAL_DATA_TYPE)1.9110000000000003);
    builder.addLeafNode(treeId, nodeIds[17], 0, (DAAL_DATA_TYPE)0.0052611308995374412);
    builder.addLeafNode(treeId, nodeIds[17], 1, (DAAL_DATA_TYPE)-0.0017552974590352762);
    builder.addLeafNode(treeId, nodeIds[10], 1, (DAAL_DATA_TYPE)0.010835562940946846);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[7], 1, 24, (DAAL_DATA_TYPE)0.97750000000000015);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[21], 0, 25, (DAAL_DATA_TYPE)0.29250000000000004);
    builder.addLeafNode(treeId, nodeIds[22], 0, (DAAL_DATA_TYPE)0.0056234372726508552);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[22], 1, 21, (DAAL_DATA_TYPE)0.66350000000000009);
    builder.addLeafNode(treeId, nodeIds[24], 0, (DAAL_DATA_TYPE)0.0025033510051840962);
    builder.addLeafNode(treeId, nodeIds[24], 1, (DAAL_DATA_TYPE)-0.0044179989679926828);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[21], 1, 25, (DAAL_DATA_TYPE)0.62350000000000005);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[27], 0, 25, (DAAL_DATA_TYPE)0.58150000000000002);
    builder.addLeafNode(treeId, nodeIds[28], 0, (DAAL_DATA_TYPE)-0.0025690005005647738);
    builder.addLeafNode(treeId, nodeIds[28], 1, (DAAL_DATA_TYPE)-0.013923901936103558);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[27], 1, 15, (DAAL_DATA_TYPE)-0.99449999999999983);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[31], 0, 19, (DAAL_DATA_TYPE)1.2315000000000003);
    builder.addLeafNode(treeId, nodeIds[32], 0, (DAAL_DATA_TYPE)0.0061238976878871167);
    builder.addLeafNode(treeId, nodeIds[32], 1, (DAAL_DATA_TYPE)-0.0076746855676174163);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[31], 1, 25, (DAAL_DATA_TYPE)1.4335000000000002);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[35], 0, 14, (DAAL_DATA_TYPE)-1.4454999999999998);
    builder.addLeafNode(treeId, nodeIds[36], 0, (DAAL_DATA_TYPE)0.009704377460810874);
    builder.addLeafNode(treeId, nodeIds[36], 1, (DAAL_DATA_TYPE)-0.00029375012470845538);
    builder.addLeafNode(treeId, nodeIds[35], 1, (DAAL_DATA_TYPE)-0.0051574334558663953);
    builder.addLeafNode(treeId, nodeIds[6], 1, (DAAL_DATA_TYPE)0.0092592858934196932);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[1], 1, 21, (DAAL_DATA_TYPE)1.0205000000000002);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[41], 0, 3, (DAAL_DATA_TYPE)1.7315000000000003);
    builder.addLeafNode(treeId, nodeIds[42], 0, (DAAL_DATA_TYPE)0.0028078836305794001);
    builder.addLeafNode(treeId, nodeIds[42], 1, (DAAL_DATA_TYPE)-0.0034522545350738234);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[41], 1, 5, (DAAL_DATA_TYPE)0.66750000000000009);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[45], 0, 7, (DAAL_DATA_TYPE)-0.022999999999999996);
    builder.addLeafNode(treeId, nodeIds[46], 0, (DAAL_DATA_TYPE)-0.013373067336423057);
    builder.addLeafNode(treeId, nodeIds[46], 1, (DAAL_DATA_TYPE)-0.0008889771894448333);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[45], 1, 17, (DAAL_DATA_TYPE)1.6115000000000002);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[49], 0, 10, (DAAL_DATA_TYPE)1.2970000000000004);
    builder.addLeafNode(treeId, nodeIds[50], 0, (DAAL_DATA_TYPE)0.0021534666439202289);
    builder.addLeafNode(treeId, nodeIds[50], 1, (DAAL_DATA_TYPE)-0.0055403493482757502);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[49], 1, 5, (DAAL_DATA_TYPE)1.7360000000000004);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[53], 0, 3, (DAAL_DATA_TYPE)0.73550000000000015);
    builder.addLeafNode(treeId, nodeIds[54], 0, (DAAL_DATA_TYPE)0.00075021053353945422);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[54], 1, 10, (DAAL_DATA_TYPE)0.51150000000000018);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[56], 0, 16, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    builder.addLeafNode(treeId, nodeIds[57], 0, (DAAL_DATA_TYPE)-0.0080715488355893369);
    builder.addLeafNode(treeId, nodeIds[57], 1, (DAAL_DATA_TYPE)-0.023504067088166873);
    builder.addLeafNode(treeId, nodeIds[56], 1, (DAAL_DATA_TYPE)-5.9237219393253336e-05);
    builder.addLeafNode(treeId, nodeIds[53], 1, (DAAL_DATA_TYPE)0.0074621726625732007);

}

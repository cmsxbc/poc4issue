 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree22(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 25, (DAAL_DATA_TYPE)1.0565000000000002);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 25, (DAAL_DATA_TYPE)0.6695000000000001);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 5, (DAAL_DATA_TYPE)1.5755000000000001);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 21, (DAAL_DATA_TYPE)0.87850000000000017);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 21, (DAAL_DATA_TYPE)0.53150000000000019);
    builder.addLeafNode(treeId, nodeIds[5], 0, (DAAL_DATA_TYPE)0.0040290622857579016);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[5], 1, 27, (DAAL_DATA_TYPE)0.84650000000000014);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 26, (DAAL_DATA_TYPE)0.72850000000000004);
    builder.addLeafNode(treeId, nodeIds[8], 0, (DAAL_DATA_TYPE)-0.0087422818841178564);
    builder.addLeafNode(treeId, nodeIds[8], 1, (DAAL_DATA_TYPE)0.00089330937735427772);
    builder.addLeafNode(treeId, nodeIds[7], 1, (DAAL_DATA_TYPE)-0.011603117536525338);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[4], 1, 18, (DAAL_DATA_TYPE)0.037500000000000006);
    builder.addLeafNode(treeId, nodeIds[12], 0, (DAAL_DATA_TYPE)-0.0033504622745084336);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[12], 1, 0, (DAAL_DATA_TYPE)0.40750000000000003);
    builder.addLeafNode(treeId, nodeIds[14], 0, (DAAL_DATA_TYPE)-0.012350055640158446);
    builder.addLeafNode(treeId, nodeIds[14], 1, (DAAL_DATA_TYPE)0.0032753432713310176);
    builder.addLeafNode(treeId, nodeIds[3], 1, (DAAL_DATA_TYPE)0.0096666144097552597);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[2], 1, 5, (DAAL_DATA_TYPE)0.86450000000000016);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[18], 0, 25, (DAAL_DATA_TYPE)0.94550000000000012);
    nodeIds[20] = builder.addSplitNode(treeId, nodeIds[19], 0, 26, (DAAL_DATA_TYPE)0.77250000000000008);
    builder.addLeafNode(treeId, nodeIds[20], 0, (DAAL_DATA_TYPE)-0.0024053797920544941);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[20], 1, 27, (DAAL_DATA_TYPE)0.82250000000000012);
    builder.addLeafNode(treeId, nodeIds[22], 0, (DAAL_DATA_TYPE)0.0064650228160765908);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[22], 1, 17, (DAAL_DATA_TYPE)0.5335000000000002);
    builder.addLeafNode(treeId, nodeIds[24], 0, (DAAL_DATA_TYPE)-0.0089947331613964513);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[24], 1, 23, (DAAL_DATA_TYPE)1.0605000000000002);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[26], 0, 25, (DAAL_DATA_TYPE)0.86750000000000005);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[27], 0, 19, (DAAL_DATA_TYPE)-1.3304999999999998);
    builder.addLeafNode(treeId, nodeIds[28], 0, (DAAL_DATA_TYPE)-0.018028674647212029);
    builder.addLeafNode(treeId, nodeIds[28], 1, (DAAL_DATA_TYPE)-0.0012049881505897676);
    builder.addLeafNode(treeId, nodeIds[27], 1, (DAAL_DATA_TYPE)0.005870650475844741);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[26], 1, 27, (DAAL_DATA_TYPE)0.93550000000000011);
    builder.addLeafNode(treeId, nodeIds[32], 0, (DAAL_DATA_TYPE)0.01388390377163887);
    builder.addLeafNode(treeId, nodeIds[32], 1, (DAAL_DATA_TYPE)-0.0010504941407002901);
    builder.addLeafNode(treeId, nodeIds[19], 1, (DAAL_DATA_TYPE)-0.0042645955899633077);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[18], 1, 27, (DAAL_DATA_TYPE)1.0105000000000002);
    builder.addLeafNode(treeId, nodeIds[36], 0, (DAAL_DATA_TYPE)0.0068128707910111294);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[36], 1, 4, (DAAL_DATA_TYPE)1.2535000000000001);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[38], 0, 3, (DAAL_DATA_TYPE)2.0675000000000003);
    builder.addLeafNode(treeId, nodeIds[39], 0, (DAAL_DATA_TYPE)0.0041413102322702955);
    builder.addLeafNode(treeId, nodeIds[39], 1, (DAAL_DATA_TYPE)-0.0075145192941029866);
    builder.addLeafNode(treeId, nodeIds[38], 1, (DAAL_DATA_TYPE)-0.010778377298265696);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[1], 1, 22, (DAAL_DATA_TYPE)1.0265000000000002);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[43], 0, 22, (DAAL_DATA_TYPE)0.77950000000000019);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[44], 0, 13, (DAAL_DATA_TYPE)0.60950000000000004);
    builder.addLeafNode(treeId, nodeIds[45], 0, (DAAL_DATA_TYPE)-0.0078911888654585229);
    builder.addLeafNode(treeId, nodeIds[45], 1, (DAAL_DATA_TYPE)0.0064535351413669007);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[44], 1, 27, (DAAL_DATA_TYPE)1.0835000000000001);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[48], 0, 21, (DAAL_DATA_TYPE)0.58250000000000013);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[49], 0, 9, (DAAL_DATA_TYPE)1.0205000000000002);
    builder.addLeafNode(treeId, nodeIds[50], 0, (DAAL_DATA_TYPE)0.016928845360165552);
    builder.addLeafNode(treeId, nodeIds[50], 1, (DAAL_DATA_TYPE)-0.004787785708904267);
    builder.addLeafNode(treeId, nodeIds[49], 1, (DAAL_DATA_TYPE)-0.0056265848118485966);
    builder.addLeafNode(treeId, nodeIds[48], 1, (DAAL_DATA_TYPE)-0.010966354994110561);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[43], 1, 25, (DAAL_DATA_TYPE)1.5165000000000002);
    builder.addLeafNode(treeId, nodeIds[55], 0, (DAAL_DATA_TYPE)0.0024234883080829273);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[55], 1, 7, (DAAL_DATA_TYPE)-0.72549999999999992);
    builder.addLeafNode(treeId, nodeIds[57], 0, (DAAL_DATA_TYPE)0.0025254143200006832);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[57], 1, 6, (DAAL_DATA_TYPE)-1.1224999999999998);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)0.0081636197865009308);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)-0.0090810413191835578);

}

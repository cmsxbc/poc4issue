 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree100(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 19, (DAAL_DATA_TYPE)1.7085000000000001);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 19, (DAAL_DATA_TYPE)1.6535000000000002);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 19, (DAAL_DATA_TYPE)1.4970000000000001);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 2, (DAAL_DATA_TYPE)1.6955000000000002);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 0, (DAAL_DATA_TYPE)0.56650000000000011);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 23, (DAAL_DATA_TYPE)0.97750000000000015);
    builder.addLeafNode(treeId, nodeIds[6], 0, (DAAL_DATA_TYPE)0.0088264751128661317);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[6], 1, 2, (DAAL_DATA_TYPE)1.2955000000000003);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[8], 0, 1, (DAAL_DATA_TYPE)-0.65649999999999997);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[9], 0, 24, (DAAL_DATA_TYPE)0.96550000000000014);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[10], 0, 1, (DAAL_DATA_TYPE)-0.83449999999999991);
    builder.addLeafNode(treeId, nodeIds[11], 0, (DAAL_DATA_TYPE)-0.0018530869574218409);
    builder.addLeafNode(treeId, nodeIds[11], 1, (DAAL_DATA_TYPE)0.010563178449869155);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[10], 1, 2, (DAAL_DATA_TYPE)-0.13649999999999998);
    builder.addLeafNode(treeId, nodeIds[14], 0, (DAAL_DATA_TYPE)0.0098843058617785577);
    builder.addLeafNode(treeId, nodeIds[14], 1, (DAAL_DATA_TYPE)-0.00012285203119972722);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[9], 1, 2, (DAAL_DATA_TYPE)-1.2014999999999998);
    builder.addLeafNode(treeId, nodeIds[17], 0, (DAAL_DATA_TYPE)-0.0082891644609095674);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[17], 1, 1, (DAAL_DATA_TYPE)0.29150000000000004);
    builder.addLeafNode(treeId, nodeIds[19], 0, (DAAL_DATA_TYPE)-0.0045059018703769741);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[19], 1, 14, (DAAL_DATA_TYPE)-0.083499999999999991);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[21], 0, 25, (DAAL_DATA_TYPE)0.74250000000000005);
    builder.addLeafNode(treeId, nodeIds[22], 0, (DAAL_DATA_TYPE)0.013414549337966101);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[22], 1, 7, (DAAL_DATA_TYPE)-0.56199999999999994);
    builder.addLeafNode(treeId, nodeIds[24], 0, (DAAL_DATA_TYPE)0.0089820226745271105);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[24], 1, 17, (DAAL_DATA_TYPE)0.9195000000000001);
    builder.addLeafNode(treeId, nodeIds[26], 0, (DAAL_DATA_TYPE)-0.01059359794196028);
    builder.addLeafNode(treeId, nodeIds[26], 1, (DAAL_DATA_TYPE)0.0066355412183650613);
    builder.addLeafNode(treeId, nodeIds[21], 1, (DAAL_DATA_TYPE)-0.0019819244042164025);
    nodeIds[30] = builder.addSplitNode(treeId, nodeIds[8], 1, 10, (DAAL_DATA_TYPE)0.97550000000000014);
    builder.addLeafNode(treeId, nodeIds[30], 0, (DAAL_DATA_TYPE)-0.0083717164343321011);
    builder.addLeafNode(treeId, nodeIds[30], 1, (DAAL_DATA_TYPE)0.0036556905855170707);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[5], 1, 24, (DAAL_DATA_TYPE)0.65450000000000019);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[33], 0, 17, (DAAL_DATA_TYPE)0.45450000000000007);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[34], 0, 2, (DAAL_DATA_TYPE)0.34950000000000003);
    builder.addLeafNode(treeId, nodeIds[35], 0, (DAAL_DATA_TYPE)-0.012992557798596947);
    builder.addLeafNode(treeId, nodeIds[35], 1, (DAAL_DATA_TYPE)0.0033673420548439026);
    builder.addLeafNode(treeId, nodeIds[34], 1, (DAAL_DATA_TYPE)0.0039297621712121164);
    builder.addLeafNode(treeId, nodeIds[33], 1, (DAAL_DATA_TYPE)0.00010179496613387429);
    builder.addLeafNode(treeId, nodeIds[4], 1, (DAAL_DATA_TYPE)0.0046244123728857158);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[3], 1, 24, (DAAL_DATA_TYPE)0.70750000000000013);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[41], 0, 7, (DAAL_DATA_TYPE)0.018500000000000003);
    builder.addLeafNode(treeId, nodeIds[42], 0, (DAAL_DATA_TYPE)-0.0048207922726227299);
    builder.addLeafNode(treeId, nodeIds[42], 1, (DAAL_DATA_TYPE)-0.020709368530660868);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[41], 1, 14, (DAAL_DATA_TYPE)-0.22149999999999997);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[45], 0, 18, (DAAL_DATA_TYPE)0.50050000000000006);
    builder.addLeafNode(treeId, nodeIds[46], 0, (DAAL_DATA_TYPE)-0.0088643849088714047);
    builder.addLeafNode(treeId, nodeIds[46], 1, (DAAL_DATA_TYPE)0.0026965606957674026);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[45], 1, 11, (DAAL_DATA_TYPE)0.59150000000000003);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[49], 0, 6, (DAAL_DATA_TYPE)0.072500000000000009);
    builder.addLeafNode(treeId, nodeIds[50], 0, (DAAL_DATA_TYPE)0.0052022749034222222);
    builder.addLeafNode(treeId, nodeIds[50], 1, (DAAL_DATA_TYPE)-0.0057587033758560819);
    builder.addLeafNode(treeId, nodeIds[49], 1, (DAAL_DATA_TYPE)0.0093878634767059019);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[2], 1, 5, (DAAL_DATA_TYPE)1.0955000000000001);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[54], 0, 16, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    builder.addLeafNode(treeId, nodeIds[55], 0, (DAAL_DATA_TYPE)0.015886407021072604);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)-0.00093804242089390766);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)-0.0023257774659820522);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[1], 1, 13, (DAAL_DATA_TYPE)0.77350000000000019);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)-0.015982756018638612);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)0.003085093726314461);

}

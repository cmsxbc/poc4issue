 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree104(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 9, (DAAL_DATA_TYPE)0.29900000000000004);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 1, (DAAL_DATA_TYPE)0.17550000000000002);
    builder.addLeafNode(treeId, nodeIds[2], 0, (DAAL_DATA_TYPE)0.011533422244247049);
    builder.addLeafNode(treeId, nodeIds[2], 1, (DAAL_DATA_TYPE)-0.00016425562013561528);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[1], 1, 21, (DAAL_DATA_TYPE)0.58250000000000013);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 22, (DAAL_DATA_TYPE)0.77950000000000019);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[6], 0, 4, (DAAL_DATA_TYPE)0.71850000000000003);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 14, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[8], 0, 13, (DAAL_DATA_TYPE)0.58950000000000002);
    builder.addLeafNode(treeId, nodeIds[9], 0, (DAAL_DATA_TYPE)-0.021676708301529291);
    builder.addLeafNode(treeId, nodeIds[9], 1, (DAAL_DATA_TYPE)-0.0085240801707619721);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[8], 1, 13, (DAAL_DATA_TYPE)0.55950000000000022);
    builder.addLeafNode(treeId, nodeIds[12], 0, (DAAL_DATA_TYPE)0.0064216342133780321);
    builder.addLeafNode(treeId, nodeIds[12], 1, (DAAL_DATA_TYPE)-0.0051400911401618616);
    builder.addLeafNode(treeId, nodeIds[7], 1, (DAAL_DATA_TYPE)0.0073228125705530767);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[6], 1, 5, (DAAL_DATA_TYPE)1.4485000000000003);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[16], 0, 2, (DAAL_DATA_TYPE)-1.4204999999999999);
    builder.addLeafNode(treeId, nodeIds[17], 0, (DAAL_DATA_TYPE)-0.0055158547347500218);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[17], 1, 26, (DAAL_DATA_TYPE)0.86350000000000005);
    nodeIds[20] = builder.addSplitNode(treeId, nodeIds[19], 0, 9, (DAAL_DATA_TYPE)0.75550000000000017);
    builder.addLeafNode(treeId, nodeIds[20], 0, (DAAL_DATA_TYPE)0.0050704614169174633);
    builder.addLeafNode(treeId, nodeIds[20], 1, (DAAL_DATA_TYPE)0.015711512021494633);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[19], 1, 7, (DAAL_DATA_TYPE)0.59450000000000014);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[23], 0, 27, (DAAL_DATA_TYPE)0.7945000000000001);
    builder.addLeafNode(treeId, nodeIds[24], 0, (DAAL_DATA_TYPE)-0.0059243608172982933);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[24], 1, 13, (DAAL_DATA_TYPE)0.65550000000000008);
    builder.addLeafNode(treeId, nodeIds[26], 0, (DAAL_DATA_TYPE)0.012021841538017213);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[26], 1, 19, (DAAL_DATA_TYPE)0.64800000000000013);
    builder.addLeafNode(treeId, nodeIds[28], 0, (DAAL_DATA_TYPE)0.0057138061012934754);
    builder.addLeafNode(treeId, nodeIds[28], 1, (DAAL_DATA_TYPE)-0.0058180317953228956);
    builder.addLeafNode(treeId, nodeIds[23], 1, (DAAL_DATA_TYPE)0.011164447579246301);
    builder.addLeafNode(treeId, nodeIds[16], 1, (DAAL_DATA_TYPE)-0.0065022611245512969);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[5], 1, 21, (DAAL_DATA_TYPE)0.59250000000000014);
    builder.addLeafNode(treeId, nodeIds[33], 0, (DAAL_DATA_TYPE)-0.0083129332927258121);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[33], 1, 27, (DAAL_DATA_TYPE)0.72250000000000003);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[35], 0, 3, (DAAL_DATA_TYPE)1.4595000000000002);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[36], 0, 25, (DAAL_DATA_TYPE)0.18550000000000003);
    builder.addLeafNode(treeId, nodeIds[37], 0, (DAAL_DATA_TYPE)-0.0081680274314501079);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[37], 1, 6, (DAAL_DATA_TYPE)-0.20999999999999996);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[39], 0, 22, (DAAL_DATA_TYPE)0.81050000000000011);
    builder.addLeafNode(treeId, nodeIds[40], 0, (DAAL_DATA_TYPE)0.010231732739739015);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[40], 1, 1, (DAAL_DATA_TYPE)-0.42349999999999993);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[42], 0, 21, (DAAL_DATA_TYPE)0.99950000000000017);
    builder.addLeafNode(treeId, nodeIds[43], 0, (DAAL_DATA_TYPE)-0.0054025473327783402);
    builder.addLeafNode(treeId, nodeIds[43], 1, (DAAL_DATA_TYPE)0.0074776336874650884);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[42], 1, 21, (DAAL_DATA_TYPE)0.86750000000000005);
    builder.addLeafNode(treeId, nodeIds[46], 0, (DAAL_DATA_TYPE)0.013411053423643918);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[46], 1, 4, (DAAL_DATA_TYPE)0.15650000000000003);
    builder.addLeafNode(treeId, nodeIds[48], 0, (DAAL_DATA_TYPE)-0.007676197029650212);
    builder.addLeafNode(treeId, nodeIds[48], 1, (DAAL_DATA_TYPE)0.0097066510709062706);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[39], 1, 17, (DAAL_DATA_TYPE)1.0505000000000002);
    nodeIds[52] = builder.addSplitNode(treeId, nodeIds[51], 0, 27, (DAAL_DATA_TYPE)0.57250000000000012);
    builder.addLeafNode(treeId, nodeIds[52], 0, (DAAL_DATA_TYPE)-0.011765167507387344);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[52], 1, 9, (DAAL_DATA_TYPE)0.85550000000000004);
    builder.addLeafNode(treeId, nodeIds[54], 0, (DAAL_DATA_TYPE)-0.0026701074574937982);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)0.0043924072152608405);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[51], 1, 3, (DAAL_DATA_TYPE)0.79750000000000021);
    builder.addLeafNode(treeId, nodeIds[57], 0, (DAAL_DATA_TYPE)0.0096701989403447583);
    builder.addLeafNode(treeId, nodeIds[57], 1, (DAAL_DATA_TYPE)-0.0065117763471789665);
    builder.addLeafNode(treeId, nodeIds[36], 1, (DAAL_DATA_TYPE)-0.0064427869483118967);
    builder.addLeafNode(treeId, nodeIds[35], 1, (DAAL_DATA_TYPE)-0.0003242232392194999);

}

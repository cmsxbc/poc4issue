 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree51(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 0, (DAAL_DATA_TYPE)2.9305000000000008);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 5, (DAAL_DATA_TYPE)1.8210000000000002);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 18, (DAAL_DATA_TYPE)-2.0784999999999996);
    builder.addLeafNode(treeId, nodeIds[3], 0, (DAAL_DATA_TYPE)0.006320247999219983);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[3], 1, 24, (DAAL_DATA_TYPE)0.75750000000000017);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 21, (DAAL_DATA_TYPE)2.0485000000000002);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[6], 0, 26, (DAAL_DATA_TYPE)0.87950000000000006);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 15, (DAAL_DATA_TYPE)0.7915000000000002);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[8], 0, 23, (DAAL_DATA_TYPE)0.97950000000000015);
    builder.addLeafNode(treeId, nodeIds[9], 0, (DAAL_DATA_TYPE)-0.011249138735648659);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[9], 1, 25, (DAAL_DATA_TYPE)0.79550000000000021);
    builder.addLeafNode(treeId, nodeIds[11], 0, (DAAL_DATA_TYPE)0.00099533346209888752);
    builder.addLeafNode(treeId, nodeIds[11], 1, (DAAL_DATA_TYPE)-0.0046896715648472309);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[8], 1, 3, (DAAL_DATA_TYPE)1.2635000000000003);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[14], 0, 23, (DAAL_DATA_TYPE)1.0905000000000002);
    builder.addLeafNode(treeId, nodeIds[15], 0, (DAAL_DATA_TYPE)0.0070132079988536314);
    builder.addLeafNode(treeId, nodeIds[15], 1, (DAAL_DATA_TYPE)-0.0071269646659493455);
    builder.addLeafNode(treeId, nodeIds[14], 1, (DAAL_DATA_TYPE)-0.0087491041532269231);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[7], 1, 3, (DAAL_DATA_TYPE)1.7675000000000003);
    builder.addLeafNode(treeId, nodeIds[19], 0, (DAAL_DATA_TYPE)0.0057545575542726386);
    builder.addLeafNode(treeId, nodeIds[19], 1, (DAAL_DATA_TYPE)-0.0046578292416908388);
    builder.addLeafNode(treeId, nodeIds[6], 1, (DAAL_DATA_TYPE)-0.014287870563566686);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[5], 1, 24, (DAAL_DATA_TYPE)0.99650000000000005);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[23], 0, 27, (DAAL_DATA_TYPE)0.84850000000000014);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[24], 0, 26, (DAAL_DATA_TYPE)0.82450000000000012);
    builder.addLeafNode(treeId, nodeIds[25], 0, (DAAL_DATA_TYPE)-0.0029659499102533487);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[25], 1, 7, (DAAL_DATA_TYPE)0.72450000000000003);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[27], 0, 25, (DAAL_DATA_TYPE)1.1325000000000001);
    builder.addLeafNode(treeId, nodeIds[28], 0, (DAAL_DATA_TYPE)0.0013339636058689239);
    nodeIds[30] = builder.addSplitNode(treeId, nodeIds[28], 1, 25, (DAAL_DATA_TYPE)1.5695000000000003);
    builder.addLeafNode(treeId, nodeIds[30], 0, (DAAL_DATA_TYPE)-0.0093018362183629726);
    builder.addLeafNode(treeId, nodeIds[30], 1, (DAAL_DATA_TYPE)0.0077349564568562944);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[27], 1, 18, (DAAL_DATA_TYPE)-0.17149999999999996);
    builder.addLeafNode(treeId, nodeIds[33], 0, (DAAL_DATA_TYPE)-0.00041429653453330204);
    builder.addLeafNode(treeId, nodeIds[33], 1, (DAAL_DATA_TYPE)0.0097167890974216992);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[24], 1, 27, (DAAL_DATA_TYPE)0.86550000000000005);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[36], 0, 20, (DAAL_DATA_TYPE)2.3265000000000002);
    builder.addLeafNode(treeId, nodeIds[37], 0, (DAAL_DATA_TYPE)-0.01373730952089483);
    builder.addLeafNode(treeId, nodeIds[37], 1, (DAAL_DATA_TYPE)0.0017458938993513585);
    builder.addLeafNode(treeId, nodeIds[36], 1, (DAAL_DATA_TYPE)-0.0028772189749256237);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[23], 1, 9, (DAAL_DATA_TYPE)1.0555000000000001);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[41], 0, 0, (DAAL_DATA_TYPE)0.95250000000000001);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[42], 0, 4, (DAAL_DATA_TYPE)-0.11749999999999998);
    builder.addLeafNode(treeId, nodeIds[43], 0, (DAAL_DATA_TYPE)-0.0048253169189552848);
    builder.addLeafNode(treeId, nodeIds[43], 1, (DAAL_DATA_TYPE)0.00052145231359948714);
    builder.addLeafNode(treeId, nodeIds[42], 1, (DAAL_DATA_TYPE)0.0016226516518427034);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[41], 1, 21, (DAAL_DATA_TYPE)1.0205000000000002);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[47], 0, 5, (DAAL_DATA_TYPE)0.90050000000000019);
    builder.addLeafNode(treeId, nodeIds[48], 0, (DAAL_DATA_TYPE)0.0097567657682976119);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[48], 1, 21, (DAAL_DATA_TYPE)0.98650000000000004);
    builder.addLeafNode(treeId, nodeIds[50], 0, (DAAL_DATA_TYPE)0.0010180678639837373);
    builder.addLeafNode(treeId, nodeIds[50], 1, (DAAL_DATA_TYPE)0.015758518945603147);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[47], 1, 18, (DAAL_DATA_TYPE)0.33550000000000008);
    builder.addLeafNode(treeId, nodeIds[53], 0, (DAAL_DATA_TYPE)-0.0055996867084263163);
    builder.addLeafNode(treeId, nodeIds[53], 1, (DAAL_DATA_TYPE)0.0035113525682503414);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[2], 1, 3, (DAAL_DATA_TYPE)1.9205000000000003);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[56], 0, 0, (DAAL_DATA_TYPE)1.8945000000000001);
    builder.addLeafNode(treeId, nodeIds[57], 0, (DAAL_DATA_TYPE)0.0081282716137513027);
    builder.addLeafNode(treeId, nodeIds[57], 1, (DAAL_DATA_TYPE)-0.0048543556867276924);
    builder.addLeafNode(treeId, nodeIds[56], 1, (DAAL_DATA_TYPE)-0.0035855008097348258);
    builder.addLeafNode(treeId, nodeIds[1], 1, (DAAL_DATA_TYPE)-0.0088935595921805655);

}

 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree29(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 27, (DAAL_DATA_TYPE)0.90650000000000019);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 26, (DAAL_DATA_TYPE)0.85650000000000015);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 9, (DAAL_DATA_TYPE)1.1555000000000002);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 0, (DAAL_DATA_TYPE)0.52550000000000019);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 3, (DAAL_DATA_TYPE)0.46750000000000008);
    builder.addLeafNode(treeId, nodeIds[5], 0, (DAAL_DATA_TYPE)0.0079051421774971875);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[5], 1, 13, (DAAL_DATA_TYPE)0.54250000000000009);
    builder.addLeafNode(treeId, nodeIds[7], 0, (DAAL_DATA_TYPE)0.0047293644664543021);
    builder.addLeafNode(treeId, nodeIds[7], 1, (DAAL_DATA_TYPE)-0.009892442569821731);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[4], 1, 27, (DAAL_DATA_TYPE)0.76050000000000006);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[10], 0, 11, (DAAL_DATA_TYPE)-1.2834999999999999);
    builder.addLeafNode(treeId, nodeIds[11], 0, (DAAL_DATA_TYPE)-0.0059283266440033917);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[11], 1, 5, (DAAL_DATA_TYPE)0.43950000000000006);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[13], 0, 13, (DAAL_DATA_TYPE)1.0015000000000003);
    builder.addLeafNode(treeId, nodeIds[14], 0, (DAAL_DATA_TYPE)-0.0015399640141907384);
    builder.addLeafNode(treeId, nodeIds[14], 1, (DAAL_DATA_TYPE)-0.01834965901715415);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[13], 1, 13, (DAAL_DATA_TYPE)0.9125000000000002);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[17], 0, 26, (DAAL_DATA_TYPE)0.65950000000000009);
    builder.addLeafNode(treeId, nodeIds[18], 0, (DAAL_DATA_TYPE)-0.0047689125740102362);
    builder.addLeafNode(treeId, nodeIds[18], 1, (DAAL_DATA_TYPE)0.0028046477473143375);
    builder.addLeafNode(treeId, nodeIds[17], 1, (DAAL_DATA_TYPE)0.0065193164137612412);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[10], 1, 25, (DAAL_DATA_TYPE)0.77150000000000019);
    builder.addLeafNode(treeId, nodeIds[22], 0, (DAAL_DATA_TYPE)-0.00092615366217647151);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[22], 1, 0, (DAAL_DATA_TYPE)1.2130000000000003);
    builder.addLeafNode(treeId, nodeIds[24], 0, (DAAL_DATA_TYPE)-0.0027751884799688421);
    builder.addLeafNode(treeId, nodeIds[24], 1, (DAAL_DATA_TYPE)-0.022255175694441187);
    builder.addLeafNode(treeId, nodeIds[3], 1, (DAAL_DATA_TYPE)0.005528967361376938);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[2], 1, 25, (DAAL_DATA_TYPE)1.0895000000000004);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[28], 0, 25, (DAAL_DATA_TYPE)0.68650000000000022);
    builder.addLeafNode(treeId, nodeIds[29], 0, (DAAL_DATA_TYPE)0.00021617024861000204);
    builder.addLeafNode(treeId, nodeIds[29], 1, (DAAL_DATA_TYPE)0.0060908182837843029);
    builder.addLeafNode(treeId, nodeIds[28], 1, (DAAL_DATA_TYPE)-0.00080971877005967235);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[1], 1, 24, (DAAL_DATA_TYPE)0.99350000000000016);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[33], 0, 22, (DAAL_DATA_TYPE)1.0675000000000001);
    builder.addLeafNode(treeId, nodeIds[34], 0, (DAAL_DATA_TYPE)-0.0074413289277951633);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[34], 1, 24, (DAAL_DATA_TYPE)0.79950000000000021);
    builder.addLeafNode(treeId, nodeIds[36], 0, (DAAL_DATA_TYPE)0.004575046018830368);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[36], 1, 10, (DAAL_DATA_TYPE)-0.94049999999999978);
    builder.addLeafNode(treeId, nodeIds[38], 0, (DAAL_DATA_TYPE)-0.012910433168091427);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[38], 1, 18, (DAAL_DATA_TYPE)-1.2709999999999997);
    builder.addLeafNode(treeId, nodeIds[40], 0, (DAAL_DATA_TYPE)-0.014720618458730834);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[40], 1, 11, (DAAL_DATA_TYPE)-0.19749999999999998);
    builder.addLeafNode(treeId, nodeIds[42], 0, (DAAL_DATA_TYPE)-0.0050161670804733322);
    builder.addLeafNode(treeId, nodeIds[42], 1, (DAAL_DATA_TYPE)0.0056490620954873713);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[33], 1, 3, (DAAL_DATA_TYPE)1.7675000000000003);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[45], 0, 5, (DAAL_DATA_TYPE)1.1425000000000003);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[46], 0, 0, (DAAL_DATA_TYPE)0.39350000000000007);
    builder.addLeafNode(treeId, nodeIds[47], 0, (DAAL_DATA_TYPE)0.0079699241302230144);
    builder.addLeafNode(treeId, nodeIds[47], 1, (DAAL_DATA_TYPE)-0.0017430910526892121);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[46], 1, 25, (DAAL_DATA_TYPE)1.8525000000000003);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[50], 0, 7, (DAAL_DATA_TYPE)-1.5494999999999999);
    builder.addLeafNode(treeId, nodeIds[51], 0, (DAAL_DATA_TYPE)-0.0063816989461580919);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[51], 1, 0, (DAAL_DATA_TYPE)2.6370000000000005);
    builder.addLeafNode(treeId, nodeIds[53], 0, (DAAL_DATA_TYPE)0.0076280907952963415);
    builder.addLeafNode(treeId, nodeIds[53], 1, (DAAL_DATA_TYPE)-0.0079048429429531102);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[50], 1, 17, (DAAL_DATA_TYPE)1.4375000000000002);
    builder.addLeafNode(treeId, nodeIds[56], 0, (DAAL_DATA_TYPE)-0.0080432684193639196);
    builder.addLeafNode(treeId, nodeIds[56], 1, (DAAL_DATA_TYPE)0.011021895466312286);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[45], 1, 11, (DAAL_DATA_TYPE)-0.78449999999999986);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)0.0030879171131408378);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)-0.007750863691225001);

}

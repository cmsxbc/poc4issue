 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree159(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 18, (DAAL_DATA_TYPE)-2.0784999999999996);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 25, (DAAL_DATA_TYPE)1.3245000000000002);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 26, (DAAL_DATA_TYPE)1.0315000000000001);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 2, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    builder.addLeafNode(treeId, nodeIds[4], 0, (DAAL_DATA_TYPE)0.0072737165354192258);
    builder.addLeafNode(treeId, nodeIds[4], 1, (DAAL_DATA_TYPE)-0.0041047064661979679);
    builder.addLeafNode(treeId, nodeIds[3], 1, (DAAL_DATA_TYPE)0.0099054810474626734);
    builder.addLeafNode(treeId, nodeIds[2], 1, (DAAL_DATA_TYPE)-0.0038696135793413432);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[1], 1, 24, (DAAL_DATA_TYPE)0.64150000000000007);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[9], 0, 7, (DAAL_DATA_TYPE)1.5615000000000003);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[10], 0, 2, (DAAL_DATA_TYPE)-1.5534999999999999);
    builder.addLeafNode(treeId, nodeIds[11], 0, (DAAL_DATA_TYPE)0.0084697490346364);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[11], 1, 5, (DAAL_DATA_TYPE)1.2185000000000004);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[13], 0, 3, (DAAL_DATA_TYPE)1.4035000000000002);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[14], 0, 15, (DAAL_DATA_TYPE)0.69150000000000011);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[15], 0, 24, (DAAL_DATA_TYPE)0.60250000000000015);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[16], 0, 14, (DAAL_DATA_TYPE)0.97450000000000003);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[17], 0, 18, (DAAL_DATA_TYPE)-0.81599999999999984);
    builder.addLeafNode(treeId, nodeIds[18], 0, (DAAL_DATA_TYPE)-0.012065026024356485);
    nodeIds[20] = builder.addSplitNode(treeId, nodeIds[18], 1, 3, (DAAL_DATA_TYPE)0.37150000000000005);
    builder.addLeafNode(treeId, nodeIds[20], 0, (DAAL_DATA_TYPE)0.009705857010558247);
    builder.addLeafNode(treeId, nodeIds[20], 1, (DAAL_DATA_TYPE)-0.0016335458295153723);
    builder.addLeafNode(treeId, nodeIds[17], 1, (DAAL_DATA_TYPE)-0.013588742652665015);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[16], 1, 17, (DAAL_DATA_TYPE)0.99950000000000017);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[24], 0, 13, (DAAL_DATA_TYPE)0.89950000000000008);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[25], 0, 18, (DAAL_DATA_TYPE)0.037500000000000006);
    builder.addLeafNode(treeId, nodeIds[26], 0, (DAAL_DATA_TYPE)0.010326609946787357);
    builder.addLeafNode(treeId, nodeIds[26], 1, (DAAL_DATA_TYPE)-0.0018581997765147167);
    builder.addLeafNode(treeId, nodeIds[25], 1, (DAAL_DATA_TYPE)-0.0089496740018543998);
    builder.addLeafNode(treeId, nodeIds[24], 1, (DAAL_DATA_TYPE)0.010501730505687496);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[15], 1, 4, (DAAL_DATA_TYPE)-1.1094999999999999);
    builder.addLeafNode(treeId, nodeIds[31], 0, (DAAL_DATA_TYPE)-0.0038628011150285604);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[31], 1, 0, (DAAL_DATA_TYPE)0.6755000000000001);
    builder.addLeafNode(treeId, nodeIds[33], 0, (DAAL_DATA_TYPE)0.012087529667187484);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[33], 1, 1, (DAAL_DATA_TYPE)-0.19549999999999998);
    builder.addLeafNode(treeId, nodeIds[35], 0, (DAAL_DATA_TYPE)0.0078194598719063726);
    builder.addLeafNode(treeId, nodeIds[35], 1, (DAAL_DATA_TYPE)-0.0033537415510398296);
    builder.addLeafNode(treeId, nodeIds[14], 1, (DAAL_DATA_TYPE)-0.0084822322563107688);
    builder.addLeafNode(treeId, nodeIds[13], 1, (DAAL_DATA_TYPE)0.0046527792890093921);
    builder.addLeafNode(treeId, nodeIds[10], 1, (DAAL_DATA_TYPE)0.010479677331876821);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[9], 1, 0, (DAAL_DATA_TYPE)3.3245000000000005);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[41], 0, 2, (DAAL_DATA_TYPE)1.7240000000000004);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[42], 0, 5, (DAAL_DATA_TYPE)0.88650000000000018);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[43], 0, 19, (DAAL_DATA_TYPE)0.97950000000000015);
    builder.addLeafNode(treeId, nodeIds[44], 0, (DAAL_DATA_TYPE)-0.0011119421900340242);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[44], 1, 26, (DAAL_DATA_TYPE)1.3125000000000002);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[46], 0, 17, (DAAL_DATA_TYPE)0.53850000000000009);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[47], 0, 0, (DAAL_DATA_TYPE)0.99550000000000016);
    builder.addLeafNode(treeId, nodeIds[48], 0, (DAAL_DATA_TYPE)-0.010842119486603354);
    builder.addLeafNode(treeId, nodeIds[48], 1, (DAAL_DATA_TYPE)0.0051200549816712744);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[47], 1, 18, (DAAL_DATA_TYPE)0.26050000000000006);
    nodeIds[52] = builder.addSplitNode(treeId, nodeIds[51], 0, 5, (DAAL_DATA_TYPE)0.47850000000000004);
    builder.addLeafNode(treeId, nodeIds[52], 0, (DAAL_DATA_TYPE)0.0087838837742714934);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[52], 1, 19, (DAAL_DATA_TYPE)1.6165000000000003);
    builder.addLeafNode(treeId, nodeIds[54], 0, (DAAL_DATA_TYPE)-0.00071812129356904229);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)-0.011552560356046473);
    builder.addLeafNode(treeId, nodeIds[51], 1, (DAAL_DATA_TYPE)0.0043898301408220042);
    builder.addLeafNode(treeId, nodeIds[46], 1, (DAAL_DATA_TYPE)0.010703698218320356);
    builder.addLeafNode(treeId, nodeIds[43], 1, (DAAL_DATA_TYPE)0.00024630809648439126);
    builder.addLeafNode(treeId, nodeIds[42], 1, (DAAL_DATA_TYPE)0.0054022974743874689);
    builder.addLeafNode(treeId, nodeIds[41], 1, (DAAL_DATA_TYPE)-0.0063177181564522192);

}

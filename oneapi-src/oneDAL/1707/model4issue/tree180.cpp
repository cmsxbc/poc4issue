 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree180(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 23, (DAAL_DATA_TYPE)0.97750000000000015);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 0, (DAAL_DATA_TYPE)0.6715000000000001);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 4, (DAAL_DATA_TYPE)0.28350000000000003);
    builder.addLeafNode(treeId, nodeIds[3], 0, (DAAL_DATA_TYPE)0.0025562083406839523);
    builder.addLeafNode(treeId, nodeIds[3], 1, (DAAL_DATA_TYPE)0.012178275078211141);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[2], 1, 6, (DAAL_DATA_TYPE)0.58650000000000013);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[6], 0, 3, (DAAL_DATA_TYPE)1.4275000000000002);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 27, (DAAL_DATA_TYPE)1.1005000000000003);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[8], 0, 19, (DAAL_DATA_TYPE)-0.10549999999999998);
    builder.addLeafNode(treeId, nodeIds[9], 0, (DAAL_DATA_TYPE)-0.006832623382268305);
    builder.addLeafNode(treeId, nodeIds[9], 1, (DAAL_DATA_TYPE)0.003688376104400959);
    builder.addLeafNode(treeId, nodeIds[8], 1, (DAAL_DATA_TYPE)-0.0097278584770503496);
    builder.addLeafNode(treeId, nodeIds[7], 1, (DAAL_DATA_TYPE)0.0048579097729088971);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[6], 1, 24, (DAAL_DATA_TYPE)0.95350000000000013);
    builder.addLeafNode(treeId, nodeIds[14], 0, (DAAL_DATA_TYPE)0.0002260676887817681);
    builder.addLeafNode(treeId, nodeIds[14], 1, (DAAL_DATA_TYPE)0.010599284873415646);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[1], 1, 5, (DAAL_DATA_TYPE)1.8455000000000001);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[17], 0, 3, (DAAL_DATA_TYPE)2.7455000000000003);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[18], 0, 14, (DAAL_DATA_TYPE)-0.80449999999999988);
    nodeIds[20] = builder.addSplitNode(treeId, nodeIds[19], 0, 10, (DAAL_DATA_TYPE)1.5305000000000002);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[20], 0, 26, (DAAL_DATA_TYPE)1.5345000000000002);
    builder.addLeafNode(treeId, nodeIds[21], 0, (DAAL_DATA_TYPE)-0.00035175404315395097);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[21], 1, 3, (DAAL_DATA_TYPE)0.87550000000000006);
    builder.addLeafNode(treeId, nodeIds[23], 0, (DAAL_DATA_TYPE)-0.012998245054712664);
    builder.addLeafNode(treeId, nodeIds[23], 1, (DAAL_DATA_TYPE)-0.001534842648765161);
    builder.addLeafNode(treeId, nodeIds[20], 1, (DAAL_DATA_TYPE)-0.0084637878489281452);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[19], 1, 14, (DAAL_DATA_TYPE)-0.67849999999999999);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[27], 0, 4, (DAAL_DATA_TYPE)0.88350000000000006);
    builder.addLeafNode(treeId, nodeIds[28], 0, (DAAL_DATA_TYPE)0.0041470300043726753);
    nodeIds[30] = builder.addSplitNode(treeId, nodeIds[28], 1, 21, (DAAL_DATA_TYPE)0.91750000000000009);
    builder.addLeafNode(treeId, nodeIds[30], 0, (DAAL_DATA_TYPE)0.0035826824871557101);
    builder.addLeafNode(treeId, nodeIds[30], 1, (DAAL_DATA_TYPE)-0.01148170042783022);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[27], 1, 23, (DAAL_DATA_TYPE)0.97850000000000004);
    builder.addLeafNode(treeId, nodeIds[33], 0, (DAAL_DATA_TYPE)-0.005545781862610108);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[33], 1, 1, (DAAL_DATA_TYPE)-1.6234999999999997);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[35], 0, 10, (DAAL_DATA_TYPE)-1.2434999999999998);
    builder.addLeafNode(treeId, nodeIds[36], 0, (DAAL_DATA_TYPE)0.0054707855616203125);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[36], 1, 27, (DAAL_DATA_TYPE)0.90450000000000019);
    builder.addLeafNode(treeId, nodeIds[38], 0, (DAAL_DATA_TYPE)-0.0015599776497658563);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[38], 1, 13, (DAAL_DATA_TYPE)0.9165000000000002);
    builder.addLeafNode(treeId, nodeIds[40], 0, (DAAL_DATA_TYPE)-0.0034707723216464122);
    builder.addLeafNode(treeId, nodeIds[40], 1, (DAAL_DATA_TYPE)-0.013663964489740985);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[35], 1, 1, (DAAL_DATA_TYPE)-1.4989999999999999);
    builder.addLeafNode(treeId, nodeIds[43], 0, (DAAL_DATA_TYPE)0.0060126107224092199);
    builder.addLeafNode(treeId, nodeIds[43], 1, (DAAL_DATA_TYPE)8.1841244309622545e-05);
    builder.addLeafNode(treeId, nodeIds[18], 1, (DAAL_DATA_TYPE)-0.0047616205297093444);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[17], 1, 9, (DAAL_DATA_TYPE)1.8745000000000003);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[47], 0, 22, (DAAL_DATA_TYPE)0.88950000000000007);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[48], 0, 19, (DAAL_DATA_TYPE)0.047500000000000007);
    builder.addLeafNode(treeId, nodeIds[49], 0, (DAAL_DATA_TYPE)0.012341539110338058);
    builder.addLeafNode(treeId, nodeIds[49], 1, (DAAL_DATA_TYPE)0.0026192829701239648);
    nodeIds[52] = builder.addSplitNode(treeId, nodeIds[48], 1, 10, (DAAL_DATA_TYPE)-0.97749999999999992);
    builder.addLeafNode(treeId, nodeIds[52], 0, (DAAL_DATA_TYPE)-0.0053675543945282704);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[52], 1, 22, (DAAL_DATA_TYPE)1.4325000000000003);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[54], 0, 27, (DAAL_DATA_TYPE)1.2265000000000004);
    builder.addLeafNode(treeId, nodeIds[55], 0, (DAAL_DATA_TYPE)0.0044899409145582464);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)-0.0054219267430848312);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)0.0074217185760155711);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[47], 1, 22, (DAAL_DATA_TYPE)0.93650000000000022);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)-0.0063668694318921278);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)0.00043598844188366188);

}

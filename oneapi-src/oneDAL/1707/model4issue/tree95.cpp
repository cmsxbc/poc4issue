 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree95(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 1, (DAAL_DATA_TYPE)1.6995000000000002);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 23, (DAAL_DATA_TYPE)1.0665000000000002);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 21, (DAAL_DATA_TYPE)1.9265000000000001);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 22, (DAAL_DATA_TYPE)1.2005000000000001);
    builder.addLeafNode(treeId, nodeIds[4], 0, (DAAL_DATA_TYPE)-0.00016675829725905353);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[4], 1, 23, (DAAL_DATA_TYPE)1.0155000000000001);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[6], 0, 11, (DAAL_DATA_TYPE)1.4565000000000003);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 11, (DAAL_DATA_TYPE)-1.2304999999999999);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[8], 0, 4, (DAAL_DATA_TYPE)-0.79249999999999987);
    builder.addLeafNode(treeId, nodeIds[9], 0, (DAAL_DATA_TYPE)-0.014547060765326024);
    builder.addLeafNode(treeId, nodeIds[9], 1, (DAAL_DATA_TYPE)0.0043872672515401692);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[8], 1, 9, (DAAL_DATA_TYPE)0.53150000000000019);
    builder.addLeafNode(treeId, nodeIds[12], 0, (DAAL_DATA_TYPE)-0.0031636727452278137);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[12], 1, 5, (DAAL_DATA_TYPE)1.0955000000000001);
    builder.addLeafNode(treeId, nodeIds[14], 0, (DAAL_DATA_TYPE)0.010092437356933801);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[14], 1, 9, (DAAL_DATA_TYPE)1.2065000000000003);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[16], 0, 18, (DAAL_DATA_TYPE)-0.35349999999999993);
    builder.addLeafNode(treeId, nodeIds[17], 0, (DAAL_DATA_TYPE)-0.012157375980978428);
    builder.addLeafNode(treeId, nodeIds[17], 1, (DAAL_DATA_TYPE)0.0040967895070443284);
    builder.addLeafNode(treeId, nodeIds[16], 1, (DAAL_DATA_TYPE)0.0067386511908194349);
    builder.addLeafNode(treeId, nodeIds[7], 1, (DAAL_DATA_TYPE)-0.0080954232851841636);
    builder.addLeafNode(treeId, nodeIds[6], 1, (DAAL_DATA_TYPE)-0.011867801353335381);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[3], 1, 2, (DAAL_DATA_TYPE)0.84900000000000009);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[23], 0, 14, (DAAL_DATA_TYPE)-1.1534999999999997);
    builder.addLeafNode(treeId, nodeIds[24], 0, (DAAL_DATA_TYPE)-0.017426162175834179);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[24], 1, 14, (DAAL_DATA_TYPE)0.50400000000000011);
    builder.addLeafNode(treeId, nodeIds[26], 0, (DAAL_DATA_TYPE)-0.0017585759390802945);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[26], 1, 0, (DAAL_DATA_TYPE)0.83150000000000002);
    builder.addLeafNode(treeId, nodeIds[28], 0, (DAAL_DATA_TYPE)-0.004229665515215501);
    builder.addLeafNode(treeId, nodeIds[28], 1, (DAAL_DATA_TYPE)-0.017113762397181105);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[23], 1, 10, (DAAL_DATA_TYPE)-0.33349999999999996);
    builder.addLeafNode(treeId, nodeIds[31], 0, (DAAL_DATA_TYPE)-0.0025505437966315981);
    builder.addLeafNode(treeId, nodeIds[31], 1, (DAAL_DATA_TYPE)0.0095878691298932565);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[2], 1, 23, (DAAL_DATA_TYPE)1.1525000000000001);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[34], 0, 24, (DAAL_DATA_TYPE)1.1185000000000003);
    builder.addLeafNode(treeId, nodeIds[35], 0, (DAAL_DATA_TYPE)0.0022007303520398779);
    builder.addLeafNode(treeId, nodeIds[35], 1, (DAAL_DATA_TYPE)0.0084416251565361845);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[34], 1, 25, (DAAL_DATA_TYPE)0.87650000000000017);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[38], 0, 25, (DAAL_DATA_TYPE)0.51650000000000007);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[39], 0, 4, (DAAL_DATA_TYPE)0.20150000000000004);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[40], 0, 23, (DAAL_DATA_TYPE)1.2555000000000003);
    builder.addLeafNode(treeId, nodeIds[41], 0, (DAAL_DATA_TYPE)-0.0055254387245936834);
    builder.addLeafNode(treeId, nodeIds[41], 1, (DAAL_DATA_TYPE)0.010166580829283466);
    builder.addLeafNode(treeId, nodeIds[40], 1, (DAAL_DATA_TYPE)-0.0093792359669541206);
    builder.addLeafNode(treeId, nodeIds[39], 1, (DAAL_DATA_TYPE)0.0036277902427005481);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[38], 1, 25, (DAAL_DATA_TYPE)0.90350000000000008);
    builder.addLeafNode(treeId, nodeIds[46], 0, (DAAL_DATA_TYPE)-0.010832181930891239);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[46], 1, 0, (DAAL_DATA_TYPE)0.62750000000000006);
    builder.addLeafNode(treeId, nodeIds[48], 0, (DAAL_DATA_TYPE)-0.010274878062773496);
    builder.addLeafNode(treeId, nodeIds[48], 1, (DAAL_DATA_TYPE)-0.0003267613097213561);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[1], 1, 15, (DAAL_DATA_TYPE)1.0315000000000001);
    nodeIds[52] = builder.addSplitNode(treeId, nodeIds[51], 0, 17, (DAAL_DATA_TYPE)0.64750000000000008);
    builder.addLeafNode(treeId, nodeIds[52], 0, (DAAL_DATA_TYPE)-0.0099187678026242398);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[52], 1, 23, (DAAL_DATA_TYPE)0.98250000000000004);
    builder.addLeafNode(treeId, nodeIds[54], 0, (DAAL_DATA_TYPE)0.0060502713080495601);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[54], 1, 0, (DAAL_DATA_TYPE)0.79350000000000021);
    builder.addLeafNode(treeId, nodeIds[56], 0, (DAAL_DATA_TYPE)-0.0075714027147684524);
    builder.addLeafNode(treeId, nodeIds[56], 1, (DAAL_DATA_TYPE)0.00078600553242722535);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[51], 1, 5, (DAAL_DATA_TYPE)0.73450000000000004);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)0.0096532744856981136);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)-0.0016875817155879405);

}

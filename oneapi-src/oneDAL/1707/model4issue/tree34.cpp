 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree34(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 25, (DAAL_DATA_TYPE)0.98450000000000004);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 25, (DAAL_DATA_TYPE)0.59250000000000014);
    builder.addLeafNode(treeId, nodeIds[2], 0, (DAAL_DATA_TYPE)-0.00168073597500329);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[2], 1, 14, (DAAL_DATA_TYPE)0.088500000000000009);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 3, (DAAL_DATA_TYPE)1.1495000000000002);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 9, (DAAL_DATA_TYPE)1.538);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[6], 0, 9, (DAAL_DATA_TYPE)0.65150000000000008);
    builder.addLeafNode(treeId, nodeIds[7], 0, (DAAL_DATA_TYPE)0.0046811614148442532);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[7], 1, 21, (DAAL_DATA_TYPE)1.0165000000000002);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[9], 0, 22, (DAAL_DATA_TYPE)0.97950000000000015);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[10], 0, 9, (DAAL_DATA_TYPE)1.0875000000000001);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[11], 0, 3, (DAAL_DATA_TYPE)1.0195000000000001);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[12], 0, 2, (DAAL_DATA_TYPE)-1.0474999999999997);
    builder.addLeafNode(treeId, nodeIds[13], 0, (DAAL_DATA_TYPE)0.002183743938803673);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[13], 1, 14, (DAAL_DATA_TYPE)-0.72449999999999981);
    builder.addLeafNode(treeId, nodeIds[15], 0, (DAAL_DATA_TYPE)-0.014456777088344098);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[15], 1, 15, (DAAL_DATA_TYPE)-0.99449999999999983);
    builder.addLeafNode(treeId, nodeIds[17], 0, (DAAL_DATA_TYPE)0.008364780176253547);
    builder.addLeafNode(treeId, nodeIds[17], 1, (DAAL_DATA_TYPE)-0.0082667153477668769);
    builder.addLeafNode(treeId, nodeIds[12], 1, (DAAL_DATA_TYPE)0.0093949836194515239);
    builder.addLeafNode(treeId, nodeIds[11], 1, (DAAL_DATA_TYPE)0.0057862666901201017);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[10], 1, 19, (DAAL_DATA_TYPE)1.1345000000000003);
    builder.addLeafNode(treeId, nodeIds[22], 0, (DAAL_DATA_TYPE)0.0085690975081229564);
    builder.addLeafNode(treeId, nodeIds[22], 1, (DAAL_DATA_TYPE)-0.0041098917924588729);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[9], 1, 2, (DAAL_DATA_TYPE)-1.0924999999999998);
    builder.addLeafNode(treeId, nodeIds[25], 0, (DAAL_DATA_TYPE)-0.017967165159908208);
    builder.addLeafNode(treeId, nodeIds[25], 1, (DAAL_DATA_TYPE)-0.0023490550820944741);
    builder.addLeafNode(treeId, nodeIds[6], 1, (DAAL_DATA_TYPE)0.0096962240058928728);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[5], 1, 10, (DAAL_DATA_TYPE)-1.2954999999999999);
    builder.addLeafNode(treeId, nodeIds[29], 0, (DAAL_DATA_TYPE)-0.01059010240669344);
    builder.addLeafNode(treeId, nodeIds[29], 1, (DAAL_DATA_TYPE)-0.0010046202391796532);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[4], 1, 1, (DAAL_DATA_TYPE)-1.3509999999999998);
    builder.addLeafNode(treeId, nodeIds[32], 0, (DAAL_DATA_TYPE)-0.0036537283374106183);
    builder.addLeafNode(treeId, nodeIds[32], 1, (DAAL_DATA_TYPE)0.0042602203143395989);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[1], 1, 0, (DAAL_DATA_TYPE)2.4805000000000006);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[35], 0, 3, (DAAL_DATA_TYPE)1.8795000000000002);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[36], 0, 24, (DAAL_DATA_TYPE)1.2895000000000001);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[37], 0, 27, (DAAL_DATA_TYPE)0.92650000000000021);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[38], 0, 21, (DAAL_DATA_TYPE)1.0995000000000001);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[39], 0, 7, (DAAL_DATA_TYPE)1.1435000000000002);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[40], 0, 23, (DAAL_DATA_TYPE)0.98750000000000016);
    builder.addLeafNode(treeId, nodeIds[41], 0, (DAAL_DATA_TYPE)0.0011521916611250058);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[41], 1, 19, (DAAL_DATA_TYPE)-0.13249999999999998);
    builder.addLeafNode(treeId, nodeIds[43], 0, (DAAL_DATA_TYPE)-0.0090514869412030192);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[43], 1, 2, (DAAL_DATA_TYPE)1.3075000000000003);
    builder.addLeafNode(treeId, nodeIds[45], 0, (DAAL_DATA_TYPE)-0.0030331801112792266);
    builder.addLeafNode(treeId, nodeIds[45], 1, (DAAL_DATA_TYPE)0.010606623498293069);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[40], 1, 1, (DAAL_DATA_TYPE)0.66850000000000021);
    builder.addLeafNode(treeId, nodeIds[48], 0, (DAAL_DATA_TYPE)0.0099302398242864277);
    builder.addLeafNode(treeId, nodeIds[48], 1, (DAAL_DATA_TYPE)-0.0085341984033584593);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[39], 1, 17, (DAAL_DATA_TYPE)0.59450000000000014);
    builder.addLeafNode(treeId, nodeIds[51], 0, (DAAL_DATA_TYPE)-0.004256368543093021);
    builder.addLeafNode(treeId, nodeIds[51], 1, (DAAL_DATA_TYPE)0.010465449349412436);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[38], 1, 23, (DAAL_DATA_TYPE)1.2445000000000002);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[54], 0, 2, (DAAL_DATA_TYPE)1.2535000000000001);
    builder.addLeafNode(treeId, nodeIds[55], 0, (DAAL_DATA_TYPE)-0.0063245744250484352);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)0.001374435956989016);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)0.0064164423197507862);
    builder.addLeafNode(treeId, nodeIds[37], 1, (DAAL_DATA_TYPE)0.0018265129420264013);
    builder.addLeafNode(treeId, nodeIds[36], 1, (DAAL_DATA_TYPE)-0.0067076712072669693);
    builder.addLeafNode(treeId, nodeIds[35], 1, (DAAL_DATA_TYPE)-0.011057676164941355);

}

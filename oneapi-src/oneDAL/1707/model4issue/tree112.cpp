 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree112(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 13, (DAAL_DATA_TYPE)0.30650000000000005);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 7, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    builder.addLeafNode(treeId, nodeIds[2], 0, (DAAL_DATA_TYPE)-0.011661495100706817);
    builder.addLeafNode(treeId, nodeIds[2], 1, (DAAL_DATA_TYPE)0.00229341690428555);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[1], 1, 22, (DAAL_DATA_TYPE)0.70650000000000002);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 17, (DAAL_DATA_TYPE)0.86450000000000016);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[6], 0, 11, (DAAL_DATA_TYPE)1.2715000000000003);
    builder.addLeafNode(treeId, nodeIds[7], 0, (DAAL_DATA_TYPE)0.0012363397437348185);
    builder.addLeafNode(treeId, nodeIds[7], 1, (DAAL_DATA_TYPE)-0.0081328549975296493);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[6], 1, 17, (DAAL_DATA_TYPE)1.4295000000000002);
    builder.addLeafNode(treeId, nodeIds[10], 0, (DAAL_DATA_TYPE)0.0077056964960110445);
    builder.addLeafNode(treeId, nodeIds[10], 1, (DAAL_DATA_TYPE)-0.0016884005339495068);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[5], 1, 7, (DAAL_DATA_TYPE)-1.3074999999999999);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[13], 0, 7, (DAAL_DATA_TYPE)-1.6334999999999997);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[14], 0, 22, (DAAL_DATA_TYPE)0.80150000000000021);
    builder.addLeafNode(treeId, nodeIds[15], 0, (DAAL_DATA_TYPE)-0.011514652774415234);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[15], 1, 25, (DAAL_DATA_TYPE)1.0455000000000003);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[17], 0, 9, (DAAL_DATA_TYPE)0.6605000000000002);
    builder.addLeafNode(treeId, nodeIds[18], 0, (DAAL_DATA_TYPE)-0.005718159551421801);
    builder.addLeafNode(treeId, nodeIds[18], 1, (DAAL_DATA_TYPE)0.0045727008578175521);
    builder.addLeafNode(treeId, nodeIds[17], 1, (DAAL_DATA_TYPE)-0.0057801225234390841);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[14], 1, 6, (DAAL_DATA_TYPE)-1.4244999999999999);
    builder.addLeafNode(treeId, nodeIds[22], 0, (DAAL_DATA_TYPE)0.01132361392180125);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[22], 1, 6, (DAAL_DATA_TYPE)-0.62449999999999994);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[24], 0, 4, (DAAL_DATA_TYPE)0.39550000000000007);
    builder.addLeafNode(treeId, nodeIds[25], 0, (DAAL_DATA_TYPE)-0.007894923873986541);
    builder.addLeafNode(treeId, nodeIds[25], 1, (DAAL_DATA_TYPE)0.0042485774644920905);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[24], 1, 6, (DAAL_DATA_TYPE)-0.084499999999999992);
    builder.addLeafNode(treeId, nodeIds[28], 0, (DAAL_DATA_TYPE)0.0067479551949358174);
    nodeIds[30] = builder.addSplitNode(treeId, nodeIds[28], 1, 23, (DAAL_DATA_TYPE)0.98250000000000004);
    builder.addLeafNode(treeId, nodeIds[30], 0, (DAAL_DATA_TYPE)-0.0048561951054669015);
    builder.addLeafNode(treeId, nodeIds[30], 1, (DAAL_DATA_TYPE)0.0026664953517823299);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[13], 1, 25, (DAAL_DATA_TYPE)0.62350000000000005);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[33], 0, 2, (DAAL_DATA_TYPE)-1.4204999999999999);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[34], 0, 13, (DAAL_DATA_TYPE)0.55950000000000022);
    builder.addLeafNode(treeId, nodeIds[35], 0, (DAAL_DATA_TYPE)0.0057952573895454409);
    builder.addLeafNode(treeId, nodeIds[35], 1, (DAAL_DATA_TYPE)-0.011712496744385407);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[34], 1, 15, (DAAL_DATA_TYPE)0.37750000000000006);
    builder.addLeafNode(treeId, nodeIds[38], 0, (DAAL_DATA_TYPE)-0.0025892789660282699);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[38], 1, 15, (DAAL_DATA_TYPE)1.1185000000000003);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[40], 0, 24, (DAAL_DATA_TYPE)1.0965000000000003);
    builder.addLeafNode(treeId, nodeIds[41], 0, (DAAL_DATA_TYPE)0.0019075489583251588);
    builder.addLeafNode(treeId, nodeIds[41], 1, (DAAL_DATA_TYPE)0.012174658980723974);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[40], 1, 10, (DAAL_DATA_TYPE)-0.46149999999999997);
    builder.addLeafNode(treeId, nodeIds[44], 0, (DAAL_DATA_TYPE)-0.0076818176020275464);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[44], 1, 3, (DAAL_DATA_TYPE)1.1495000000000002);
    builder.addLeafNode(treeId, nodeIds[46], 0, (DAAL_DATA_TYPE)0.0051798789731917847);
    builder.addLeafNode(treeId, nodeIds[46], 1, (DAAL_DATA_TYPE)-0.0075993393614356003);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[33], 1, 10, (DAAL_DATA_TYPE)1.8920000000000001);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[49], 0, 15, (DAAL_DATA_TYPE)0.30650000000000005);
    builder.addLeafNode(treeId, nodeIds[50], 0, (DAAL_DATA_TYPE)0.0003629925749113526);
    nodeIds[52] = builder.addSplitNode(treeId, nodeIds[50], 1, 2, (DAAL_DATA_TYPE)0.33850000000000008);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[52], 0, 7, (DAAL_DATA_TYPE)-1.0104999999999997);
    builder.addLeafNode(treeId, nodeIds[53], 0, (DAAL_DATA_TYPE)-0.0070945396320894367);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[53], 1, 6, (DAAL_DATA_TYPE)2.1225000000000005);
    builder.addLeafNode(treeId, nodeIds[55], 0, (DAAL_DATA_TYPE)-0.0018798413511742476);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)0.0088465861798751929);
    nodeIds[58] = builder.addSplitNode(treeId, nodeIds[52], 1, 9, (DAAL_DATA_TYPE)0.62150000000000005);
    builder.addLeafNode(treeId, nodeIds[58], 0, (DAAL_DATA_TYPE)-0.0039562589627631164);
    builder.addLeafNode(treeId, nodeIds[58], 1, (DAAL_DATA_TYPE)0.0018634977690838829);
    builder.addLeafNode(treeId, nodeIds[49], 1, (DAAL_DATA_TYPE)0.0041224046885847644);

}

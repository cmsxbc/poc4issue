 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree126(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 24, (DAAL_DATA_TYPE)0.73550000000000015);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 21, (DAAL_DATA_TYPE)1.9665000000000001);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 25, (DAAL_DATA_TYPE)0.21150000000000002);
    builder.addLeafNode(treeId, nodeIds[3], 0, (DAAL_DATA_TYPE)-0.0058675598560108087);
    builder.addLeafNode(treeId, nodeIds[3], 1, (DAAL_DATA_TYPE)0.0016623338423934647);
    builder.addLeafNode(treeId, nodeIds[2], 1, (DAAL_DATA_TYPE)-0.0071305697145206586);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[1], 1, 24, (DAAL_DATA_TYPE)1.0755000000000001);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 22, (DAAL_DATA_TYPE)1.8665000000000003);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[8], 0, 22, (DAAL_DATA_TYPE)1.6435000000000002);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[9], 0, 6, (DAAL_DATA_TYPE)1.2355000000000003);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[10], 0, 15, (DAAL_DATA_TYPE)-1.5884999999999998);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[11], 0, 1, (DAAL_DATA_TYPE)0.10350000000000001);
    builder.addLeafNode(treeId, nodeIds[12], 0, (DAAL_DATA_TYPE)0.0089315716209339684);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[12], 1, 5, (DAAL_DATA_TYPE)0.75650000000000006);
    builder.addLeafNode(treeId, nodeIds[14], 0, (DAAL_DATA_TYPE)-0.010363852285913059);
    builder.addLeafNode(treeId, nodeIds[14], 1, (DAAL_DATA_TYPE)0.003582495725572084);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[11], 1, 13, (DAAL_DATA_TYPE)0.41450000000000004);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[17], 0, 19, (DAAL_DATA_TYPE)0.76250000000000007);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[18], 0, 14, (DAAL_DATA_TYPE)-0.97299999999999986);
    builder.addLeafNode(treeId, nodeIds[19], 0, (DAAL_DATA_TYPE)-0.0082561675459146503);
    builder.addLeafNode(treeId, nodeIds[19], 1, (DAAL_DATA_TYPE)0.0050457325451014959);
    builder.addLeafNode(treeId, nodeIds[18], 1, (DAAL_DATA_TYPE)0.011921650833553739);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[17], 1, 27, (DAAL_DATA_TYPE)0.80850000000000011);
    builder.addLeafNode(treeId, nodeIds[23], 0, (DAAL_DATA_TYPE)0.00022634634143941734);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[23], 1, 26, (DAAL_DATA_TYPE)0.90750000000000008);
    builder.addLeafNode(treeId, nodeIds[25], 0, (DAAL_DATA_TYPE)-0.0041771379066631196);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[25], 1, 27, (DAAL_DATA_TYPE)0.89350000000000007);
    builder.addLeafNode(treeId, nodeIds[27], 0, (DAAL_DATA_TYPE)0.0010768805513754274);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[27], 1, 3, (DAAL_DATA_TYPE)1.0025000000000002);
    builder.addLeafNode(treeId, nodeIds[29], 0, (DAAL_DATA_TYPE)-0.0039804532302054772);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[29], 1, 19, (DAAL_DATA_TYPE)-0.21649999999999997);
    builder.addLeafNode(treeId, nodeIds[31], 0, (DAAL_DATA_TYPE)-0.0030436643204447018);
    builder.addLeafNode(treeId, nodeIds[31], 1, (DAAL_DATA_TYPE)0.0025303064803339137);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[10], 1, 21, (DAAL_DATA_TYPE)0.97850000000000004);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[34], 0, 4, (DAAL_DATA_TYPE)-1.1094999999999999);
    builder.addLeafNode(treeId, nodeIds[35], 0, (DAAL_DATA_TYPE)-0.012093664818492375);
    builder.addLeafNode(treeId, nodeIds[35], 1, (DAAL_DATA_TYPE)-0.0032491417754668913);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[34], 1, 25, (DAAL_DATA_TYPE)0.71350000000000013);
    builder.addLeafNode(treeId, nodeIds[38], 0, (DAAL_DATA_TYPE)0.0098353037753930467);
    builder.addLeafNode(treeId, nodeIds[38], 1, (DAAL_DATA_TYPE)-0.0040760208697368707);
    builder.addLeafNode(treeId, nodeIds[9], 1, (DAAL_DATA_TYPE)-0.010126890148967505);
    builder.addLeafNode(treeId, nodeIds[8], 1, (DAAL_DATA_TYPE)0.004949797518355282);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[7], 1, 19, (DAAL_DATA_TYPE)-1.6599999999999999);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[43], 0, 23, (DAAL_DATA_TYPE)0.99150000000000016);
    builder.addLeafNode(treeId, nodeIds[44], 0, (DAAL_DATA_TYPE)-1.7644092440605164e-05);
    builder.addLeafNode(treeId, nodeIds[44], 1, (DAAL_DATA_TYPE)-0.01307683431289413);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[43], 1, 15, (DAAL_DATA_TYPE)-1.2014999999999998);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[47], 0, 14, (DAAL_DATA_TYPE)-0.36949999999999994);
    builder.addLeafNode(treeId, nodeIds[48], 0, (DAAL_DATA_TYPE)-0.0019206253296408038);
    builder.addLeafNode(treeId, nodeIds[48], 1, (DAAL_DATA_TYPE)0.0059656763110125877);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[47], 1, 6, (DAAL_DATA_TYPE)-1.0724999999999998);
    nodeIds[52] = builder.addSplitNode(treeId, nodeIds[51], 0, 7, (DAAL_DATA_TYPE)-1.1954999999999998);
    builder.addLeafNode(treeId, nodeIds[52], 0, (DAAL_DATA_TYPE)0.013009235059673135);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[52], 1, 11, (DAAL_DATA_TYPE)0.88350000000000006);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[54], 0, 13, (DAAL_DATA_TYPE)1.1775000000000002);
    builder.addLeafNode(treeId, nodeIds[55], 0, (DAAL_DATA_TYPE)0.00015994685019056002);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)0.012979843811781118);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)-0.0058715953324467718);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[51], 1, 24, (DAAL_DATA_TYPE)2.3415000000000004);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)0.00020473139850585512);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)-0.0065457106076387897);

}

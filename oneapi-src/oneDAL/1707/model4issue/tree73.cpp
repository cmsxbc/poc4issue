 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree73(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 18, (DAAL_DATA_TYPE)-2.0784999999999996);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 25, (DAAL_DATA_TYPE)1.3245000000000002);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 21, (DAAL_DATA_TYPE)0.95350000000000013);
    builder.addLeafNode(treeId, nodeIds[3], 0, (DAAL_DATA_TYPE)0.0027118373848497869);
    builder.addLeafNode(treeId, nodeIds[3], 1, (DAAL_DATA_TYPE)0.012892602556725828);
    builder.addLeafNode(treeId, nodeIds[2], 1, (DAAL_DATA_TYPE)-0.0039210653075805076);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[1], 1, 25, (DAAL_DATA_TYPE)0.53150000000000019);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 14, (DAAL_DATA_TYPE)-0.36149999999999993);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[8], 0, 21, (DAAL_DATA_TYPE)1.3545000000000003);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[9], 0, 27, (DAAL_DATA_TYPE)0.84450000000000014);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[10], 0, 6, (DAAL_DATA_TYPE)-0.77799999999999991);
    builder.addLeafNode(treeId, nodeIds[11], 0, (DAAL_DATA_TYPE)0.0082731411503306745);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[11], 1, 18, (DAAL_DATA_TYPE)0.11700000000000001);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[13], 0, 15, (DAAL_DATA_TYPE)-0.0089999999999999976);
    builder.addLeafNode(treeId, nodeIds[14], 0, (DAAL_DATA_TYPE)-0.013641545772552492);
    builder.addLeafNode(treeId, nodeIds[14], 1, (DAAL_DATA_TYPE)0.00026889197804309703);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[13], 1, 5, (DAAL_DATA_TYPE)0.67850000000000021);
    builder.addLeafNode(treeId, nodeIds[17], 0, (DAAL_DATA_TYPE)-0.00028948388669801795);
    builder.addLeafNode(treeId, nodeIds[17], 1, (DAAL_DATA_TYPE)0.013949058475819502);
    builder.addLeafNode(treeId, nodeIds[10], 1, (DAAL_DATA_TYPE)-0.0047133078211790899);
    builder.addLeafNode(treeId, nodeIds[9], 1, (DAAL_DATA_TYPE)0.010129603892564773);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[8], 1, 25, (DAAL_DATA_TYPE)0.32150000000000006);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[22], 0, 14, (DAAL_DATA_TYPE)0.34350000000000008);
    builder.addLeafNode(treeId, nodeIds[23], 0, (DAAL_DATA_TYPE)-0.0068215455716619123);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[23], 1, 2, (DAAL_DATA_TYPE)-0.49549999999999994);
    builder.addLeafNode(treeId, nodeIds[25], 0, (DAAL_DATA_TYPE)-0.0035099136418309702);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[25], 1, 4, (DAAL_DATA_TYPE)-0.097499999999999989);
    builder.addLeafNode(treeId, nodeIds[27], 0, (DAAL_DATA_TYPE)0.017089730554393359);
    builder.addLeafNode(treeId, nodeIds[27], 1, (DAAL_DATA_TYPE)0.0026531106143286736);
    nodeIds[30] = builder.addSplitNode(treeId, nodeIds[22], 1, 18, (DAAL_DATA_TYPE)0.058500000000000003);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[30], 0, 11, (DAAL_DATA_TYPE)1.2075000000000002);
    builder.addLeafNode(treeId, nodeIds[31], 0, (DAAL_DATA_TYPE)-0.011636681329797616);
    builder.addLeafNode(treeId, nodeIds[31], 1, (DAAL_DATA_TYPE)0.0018793334918362752);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[30], 1, 17, (DAAL_DATA_TYPE)1.3915000000000002);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[34], 0, 5, (DAAL_DATA_TYPE)0.60750000000000004);
    builder.addLeafNode(treeId, nodeIds[35], 0, (DAAL_DATA_TYPE)0.0032901397661158913);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[35], 1, 1, (DAAL_DATA_TYPE)0.98550000000000015);
    builder.addLeafNode(treeId, nodeIds[37], 0, (DAAL_DATA_TYPE)-0.003516416277225111);
    builder.addLeafNode(treeId, nodeIds[37], 1, (DAAL_DATA_TYPE)-0.013200172889781626);
    builder.addLeafNode(treeId, nodeIds[34], 1, (DAAL_DATA_TYPE)0.0091323203407228);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[7], 1, 18, (DAAL_DATA_TYPE)-1.3404999999999998);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[41], 0, 21, (DAAL_DATA_TYPE)1.0425000000000002);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[42], 0, 5, (DAAL_DATA_TYPE)1.2955000000000003);
    builder.addLeafNode(treeId, nodeIds[43], 0, (DAAL_DATA_TYPE)-0.0019925420728175583);
    builder.addLeafNode(treeId, nodeIds[43], 1, (DAAL_DATA_TYPE)0.0064846697199391207);
    builder.addLeafNode(treeId, nodeIds[42], 1, (DAAL_DATA_TYPE)-0.0066829069289676057);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[41], 1, 25, (DAAL_DATA_TYPE)0.94550000000000012);
    builder.addLeafNode(treeId, nodeIds[47], 0, (DAAL_DATA_TYPE)0.0012619422319384869);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[47], 1, 24, (DAAL_DATA_TYPE)1.2895000000000001);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[49], 0, 15, (DAAL_DATA_TYPE)-1.6139999999999997);
    builder.addLeafNode(treeId, nodeIds[50], 0, (DAAL_DATA_TYPE)0.006601083278656006);
    builder.addLeafNode(treeId, nodeIds[50], 1, (DAAL_DATA_TYPE)-0.0012415749191079578);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[49], 1, 1, (DAAL_DATA_TYPE)0.66850000000000021);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[53], 0, 17, (DAAL_DATA_TYPE)1.0795000000000001);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[54], 0, 5, (DAAL_DATA_TYPE)1.5755000000000001);
    builder.addLeafNode(treeId, nodeIds[55], 0, (DAAL_DATA_TYPE)0.00485290008955277);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)-0.0058595255959960754);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)-0.003369208103171865);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[53], 1, 16, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)0.011193687207513042);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)-0.00091431435942649839);

}

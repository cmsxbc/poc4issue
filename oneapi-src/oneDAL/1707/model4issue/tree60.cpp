 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree60(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 5, (DAAL_DATA_TYPE)1.8805000000000003);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 27, (DAAL_DATA_TYPE)1.1835000000000002);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 22, (DAAL_DATA_TYPE)1.0705000000000002);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 22, (DAAL_DATA_TYPE)0.84650000000000014);
    builder.addLeafNode(treeId, nodeIds[4], 0, (DAAL_DATA_TYPE)0.0011083751900063457);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[4], 1, 21, (DAAL_DATA_TYPE)0.58250000000000013);
    builder.addLeafNode(treeId, nodeIds[6], 0, (DAAL_DATA_TYPE)0.0043044911509798481);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[6], 1, 9, (DAAL_DATA_TYPE)0.6735000000000001);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[8], 0, 23, (DAAL_DATA_TYPE)1.2810000000000004);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[9], 0, 18, (DAAL_DATA_TYPE)0.17350000000000002);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[10], 0, 1, (DAAL_DATA_TYPE)-0.26249999999999996);
    builder.addLeafNode(treeId, nodeIds[11], 0, (DAAL_DATA_TYPE)0.0015886632548201653);
    builder.addLeafNode(treeId, nodeIds[11], 1, (DAAL_DATA_TYPE)-0.0057061932482864973);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[10], 1, 21, (DAAL_DATA_TYPE)1.1525000000000001);
    builder.addLeafNode(treeId, nodeIds[14], 0, (DAAL_DATA_TYPE)0.0011578484302025445);
    builder.addLeafNode(treeId, nodeIds[14], 1, (DAAL_DATA_TYPE)0.015442893499958105);
    builder.addLeafNode(treeId, nodeIds[9], 1, (DAAL_DATA_TYPE)0.010481646649063902);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[8], 1, 9, (DAAL_DATA_TYPE)0.74950000000000017);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[18], 0, 17, (DAAL_DATA_TYPE)0.84250000000000014);
    builder.addLeafNode(treeId, nodeIds[19], 0, (DAAL_DATA_TYPE)-0.012069615455610413);
    builder.addLeafNode(treeId, nodeIds[19], 1, (DAAL_DATA_TYPE)-0.0035360649228096011);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[18], 1, 24, (DAAL_DATA_TYPE)0.93650000000000022);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[22], 0, 0, (DAAL_DATA_TYPE)0.99950000000000017);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[23], 0, 0, (DAAL_DATA_TYPE)0.95750000000000013);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[24], 0, 26, (DAAL_DATA_TYPE)0.98550000000000015);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[25], 0, 13, (DAAL_DATA_TYPE)1.2425000000000004);
    builder.addLeafNode(treeId, nodeIds[26], 0, (DAAL_DATA_TYPE)-0.0018474316964579734);
    builder.addLeafNode(treeId, nodeIds[26], 1, (DAAL_DATA_TYPE)0.0055363229708746079);
    builder.addLeafNode(treeId, nodeIds[25], 1, (DAAL_DATA_TYPE)-0.0072420283228405262);
    builder.addLeafNode(treeId, nodeIds[24], 1, (DAAL_DATA_TYPE)0.014014243910258468);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[23], 1, 26, (DAAL_DATA_TYPE)1.1235000000000002);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[31], 0, 23, (DAAL_DATA_TYPE)1.0255000000000003);
    builder.addLeafNode(treeId, nodeIds[32], 0, (DAAL_DATA_TYPE)-0.0095840946648802078);
    builder.addLeafNode(treeId, nodeIds[32], 1, (DAAL_DATA_TYPE)-0.00062695089727640154);
    builder.addLeafNode(treeId, nodeIds[31], 1, (DAAL_DATA_TYPE)0.0058127374878884962);
    builder.addLeafNode(treeId, nodeIds[22], 1, (DAAL_DATA_TYPE)0.00081952366403382809);
    builder.addLeafNode(treeId, nodeIds[3], 1, (DAAL_DATA_TYPE)0.0016895136109647904);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[2], 1, 18, (DAAL_DATA_TYPE)1.9655000000000002);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[38], 0, 24, (DAAL_DATA_TYPE)1.2895000000000001);
    builder.addLeafNode(treeId, nodeIds[39], 0, (DAAL_DATA_TYPE)-0.004722242267883342);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[39], 1, 14, (DAAL_DATA_TYPE)0.95550000000000013);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[41], 0, 5, (DAAL_DATA_TYPE)0.66350000000000009);
    builder.addLeafNode(treeId, nodeIds[42], 0, (DAAL_DATA_TYPE)0.013036544105181328);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[42], 1, 0, (DAAL_DATA_TYPE)1.5195000000000001);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[44], 0, 1, (DAAL_DATA_TYPE)-1.224);
    builder.addLeafNode(treeId, nodeIds[45], 0, (DAAL_DATA_TYPE)-0.0077725874316511741);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[45], 1, 0, (DAAL_DATA_TYPE)1.0935000000000004);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[47], 0, 9, (DAAL_DATA_TYPE)1.4195000000000002);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[48], 0, 15, (DAAL_DATA_TYPE)-0.65799999999999992);
    builder.addLeafNode(treeId, nodeIds[49], 0, (DAAL_DATA_TYPE)-0.01084234178332346);
    builder.addLeafNode(treeId, nodeIds[49], 1, (DAAL_DATA_TYPE)0.0021189632825553417);
    builder.addLeafNode(treeId, nodeIds[48], 1, (DAAL_DATA_TYPE)0.010238229571596574);
    builder.addLeafNode(treeId, nodeIds[47], 1, (DAAL_DATA_TYPE)0.014029458848138651);
    builder.addLeafNode(treeId, nodeIds[44], 1, (DAAL_DATA_TYPE)-0.0067445225556465723);
    builder.addLeafNode(treeId, nodeIds[41], 1, (DAAL_DATA_TYPE)-0.0077740331882970373);
    builder.addLeafNode(treeId, nodeIds[38], 1, (DAAL_DATA_TYPE)0.0062341221633392414);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[1], 1, 17, (DAAL_DATA_TYPE)0.64450000000000018);
    builder.addLeafNode(treeId, nodeIds[57], 0, (DAAL_DATA_TYPE)-0.0073643028545073977);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[57], 1, 15, (DAAL_DATA_TYPE)1.0755000000000001);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)0.0059439573458336089);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)-0.0033181912856312789);

}

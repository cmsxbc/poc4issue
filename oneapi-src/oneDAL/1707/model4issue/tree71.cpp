 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree71(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 23, (DAAL_DATA_TYPE)1.0625000000000002);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 3, (DAAL_DATA_TYPE)1.3505000000000003);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 17, (DAAL_DATA_TYPE)0.69850000000000001);
    builder.addLeafNode(treeId, nodeIds[3], 0, (DAAL_DATA_TYPE)-0.0011119709334539798);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[3], 1, 23, (DAAL_DATA_TYPE)1.0205000000000002);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 5, (DAAL_DATA_TYPE)1.9180000000000001);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[6], 0, 24, (DAAL_DATA_TYPE)0.74850000000000005);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 19, (DAAL_DATA_TYPE)1.1575000000000002);
    builder.addLeafNode(treeId, nodeIds[8], 0, (DAAL_DATA_TYPE)0.0039569040757251551);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[8], 1, 25, (DAAL_DATA_TYPE)0.76450000000000007);
    builder.addLeafNode(treeId, nodeIds[10], 0, (DAAL_DATA_TYPE)-0.009677241411991418);
    builder.addLeafNode(treeId, nodeIds[10], 1, (DAAL_DATA_TYPE)0.0037495621629059315);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[7], 1, 26, (DAAL_DATA_TYPE)0.73350000000000015);
    builder.addLeafNode(treeId, nodeIds[13], 0, (DAAL_DATA_TYPE)-0.0052228033076971775);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[13], 1, 17, (DAAL_DATA_TYPE)1.1765000000000001);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[15], 0, 18, (DAAL_DATA_TYPE)0.34900000000000003);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[16], 0, 25, (DAAL_DATA_TYPE)1.7355000000000003);
    builder.addLeafNode(treeId, nodeIds[17], 0, (DAAL_DATA_TYPE)0.0012460622952422376);
    builder.addLeafNode(treeId, nodeIds[17], 1, (DAAL_DATA_TYPE)-0.0079033081730206806);
    nodeIds[20] = builder.addSplitNode(treeId, nodeIds[16], 1, 1, (DAAL_DATA_TYPE)-0.55249999999999988);
    builder.addLeafNode(treeId, nodeIds[20], 0, (DAAL_DATA_TYPE)-0.0016249631392373438);
    builder.addLeafNode(treeId, nodeIds[20], 1, (DAAL_DATA_TYPE)0.0061562190702132043);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[15], 1, 11, (DAAL_DATA_TYPE)0.35350000000000004);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[23], 0, 0, (DAAL_DATA_TYPE)0.99950000000000017);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[24], 0, 3, (DAAL_DATA_TYPE)0.95600000000000007);
    builder.addLeafNode(treeId, nodeIds[25], 0, (DAAL_DATA_TYPE)0.0022052916571159253);
    builder.addLeafNode(treeId, nodeIds[25], 1, (DAAL_DATA_TYPE)-0.0069700203312095255);
    builder.addLeafNode(treeId, nodeIds[24], 1, (DAAL_DATA_TYPE)-0.0081295354969122199);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[23], 1, 24, (DAAL_DATA_TYPE)1.2685000000000002);
    builder.addLeafNode(treeId, nodeIds[29], 0, (DAAL_DATA_TYPE)0.00044549352575823202);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[29], 1, 15, (DAAL_DATA_TYPE)0.12700000000000003);
    builder.addLeafNode(treeId, nodeIds[31], 0, (DAAL_DATA_TYPE)0.014356854426510194);
    builder.addLeafNode(treeId, nodeIds[31], 1, (DAAL_DATA_TYPE)-0.00089341010898351674);
    builder.addLeafNode(treeId, nodeIds[6], 1, (DAAL_DATA_TYPE)0.0071963992336888487);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[5], 1, 10, (DAAL_DATA_TYPE)0.33950000000000008);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[35], 0, 10, (DAAL_DATA_TYPE)-0.18749999999999997);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[36], 0, 22, (DAAL_DATA_TYPE)1.1005000000000003);
    builder.addLeafNode(treeId, nodeIds[37], 0, (DAAL_DATA_TYPE)0.00093645004798536722);
    builder.addLeafNode(treeId, nodeIds[37], 1, (DAAL_DATA_TYPE)-0.014261370879553615);
    builder.addLeafNode(treeId, nodeIds[36], 1, (DAAL_DATA_TYPE)-0.018100832977021735);
    builder.addLeafNode(treeId, nodeIds[35], 1, (DAAL_DATA_TYPE)0.0046217692972615708);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[2], 1, 11, (DAAL_DATA_TYPE)0.24200000000000002);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[42], 0, 15, (DAAL_DATA_TYPE)1.0755000000000001);
    builder.addLeafNode(treeId, nodeIds[43], 0, (DAAL_DATA_TYPE)0.0013260322481488127);
    builder.addLeafNode(treeId, nodeIds[43], 1, (DAAL_DATA_TYPE)-0.0054562005805232194);
    builder.addLeafNode(treeId, nodeIds[42], 1, (DAAL_DATA_TYPE)-0.003772749293472637);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[1], 1, 0, (DAAL_DATA_TYPE)1.1685000000000001);
    builder.addLeafNode(treeId, nodeIds[47], 0, (DAAL_DATA_TYPE)0.0030618325587528855);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[47], 1, 4, (DAAL_DATA_TYPE)1.0155000000000001);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[49], 0, 2, (DAAL_DATA_TYPE)1.5225000000000002);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[50], 0, 11, (DAAL_DATA_TYPE)0.18250000000000002);
    builder.addLeafNode(treeId, nodeIds[51], 0, (DAAL_DATA_TYPE)0.0042282583141323047);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[51], 1, 22, (DAAL_DATA_TYPE)0.94450000000000001);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[53], 0, 2, (DAAL_DATA_TYPE)-0.11599999999999999);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[54], 0, 24, (DAAL_DATA_TYPE)0.98550000000000015);
    builder.addLeafNode(treeId, nodeIds[55], 0, (DAAL_DATA_TYPE)-0.0079810110637201712);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)0.0071164412035917245);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)-0.012462912448016662);
    builder.addLeafNode(treeId, nodeIds[53], 1, (DAAL_DATA_TYPE)0.0029823242471768308);
    builder.addLeafNode(treeId, nodeIds[50], 1, (DAAL_DATA_TYPE)-0.010386684641242028);
    builder.addLeafNode(treeId, nodeIds[49], 1, (DAAL_DATA_TYPE)-0.0057655454232272783);

}

 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree67(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 13, (DAAL_DATA_TYPE)1.5545000000000002);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 25, (DAAL_DATA_TYPE)1.7170000000000003);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 24, (DAAL_DATA_TYPE)2.3415000000000004);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 9, (DAAL_DATA_TYPE)0.90350000000000008);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 5, (DAAL_DATA_TYPE)1.0895000000000004);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 9, (DAAL_DATA_TYPE)0.89250000000000018);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[6], 0, 26, (DAAL_DATA_TYPE)1.4625000000000001);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 24, (DAAL_DATA_TYPE)0.86550000000000005);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[8], 0, 5, (DAAL_DATA_TYPE)0.37050000000000005);
    builder.addLeafNode(treeId, nodeIds[9], 0, (DAAL_DATA_TYPE)-0.0098629104307828806);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[9], 1, 23, (DAAL_DATA_TYPE)1.3315000000000003);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[11], 0, 6, (DAAL_DATA_TYPE)-0.37949999999999995);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[12], 0, 10, (DAAL_DATA_TYPE)0.57750000000000001);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[13], 0, 22, (DAAL_DATA_TYPE)0.72750000000000015);
    builder.addLeafNode(treeId, nodeIds[14], 0, (DAAL_DATA_TYPE)0.0110173548537272);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[14], 1, 1, (DAAL_DATA_TYPE)0.091500000000000012);
    builder.addLeafNode(treeId, nodeIds[16], 0, (DAAL_DATA_TYPE)0.0015281789408055778);
    builder.addLeafNode(treeId, nodeIds[16], 1, (DAAL_DATA_TYPE)-0.0065470260257522277);
    builder.addLeafNode(treeId, nodeIds[13], 1, (DAAL_DATA_TYPE)0.0083447369850344118);
    builder.addLeafNode(treeId, nodeIds[12], 1, (DAAL_DATA_TYPE)-0.0012057138138456261);
    builder.addLeafNode(treeId, nodeIds[11], 1, (DAAL_DATA_TYPE)0.012059786338359118);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[8], 1, 15, (DAAL_DATA_TYPE)-1.2014999999999998);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[22], 0, 26, (DAAL_DATA_TYPE)0.89050000000000018);
    builder.addLeafNode(treeId, nodeIds[23], 0, (DAAL_DATA_TYPE)-0.0038801031006920721);
    builder.addLeafNode(treeId, nodeIds[23], 1, (DAAL_DATA_TYPE)0.0065818589065729837);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[22], 1, 10, (DAAL_DATA_TYPE)-1.4604999999999999);
    builder.addLeafNode(treeId, nodeIds[26], 0, (DAAL_DATA_TYPE)-0.0089174448772398537);
    builder.addLeafNode(treeId, nodeIds[26], 1, (DAAL_DATA_TYPE)-0.0026171334892695335);
    builder.addLeafNode(treeId, nodeIds[7], 1, (DAAL_DATA_TYPE)0.0090972341863172403);
    nodeIds[30] = builder.addSplitNode(treeId, nodeIds[6], 1, 7, (DAAL_DATA_TYPE)-0.50249999999999984);
    builder.addLeafNode(treeId, nodeIds[30], 0, (DAAL_DATA_TYPE)-0.018344851842393047);
    builder.addLeafNode(treeId, nodeIds[30], 1, (DAAL_DATA_TYPE)-0.0010394571572542191);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[5], 1, 8, (DAAL_DATA_TYPE)1.6300000000000001);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[33], 0, 24, (DAAL_DATA_TYPE)0.75150000000000017);
    builder.addLeafNode(treeId, nodeIds[34], 0, (DAAL_DATA_TYPE)0.00396631528209481);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[34], 1, 1, (DAAL_DATA_TYPE)1.2215000000000003);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[36], 0, 26, (DAAL_DATA_TYPE)0.88850000000000018);
    builder.addLeafNode(treeId, nodeIds[37], 0, (DAAL_DATA_TYPE)-0.011873205884226731);
    builder.addLeafNode(treeId, nodeIds[37], 1, (DAAL_DATA_TYPE)-0.0021768875206487443);
    builder.addLeafNode(treeId, nodeIds[36], 1, (DAAL_DATA_TYPE)0.0070995976172742396);
    builder.addLeafNode(treeId, nodeIds[33], 1, (DAAL_DATA_TYPE)0.0045248058326693204);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[4], 1, 27, (DAAL_DATA_TYPE)0.68950000000000011);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[42], 0, 0, (DAAL_DATA_TYPE)0.6605000000000002);
    builder.addLeafNode(treeId, nodeIds[43], 0, (DAAL_DATA_TYPE)-0.00024835658432156952);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[43], 1, 23, (DAAL_DATA_TYPE)0.99350000000000016);
    builder.addLeafNode(treeId, nodeIds[45], 0, (DAAL_DATA_TYPE)0.015506580480270916);
    builder.addLeafNode(treeId, nodeIds[45], 1, (DAAL_DATA_TYPE)0.0018824620739273405);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[42], 1, 26, (DAAL_DATA_TYPE)0.80550000000000022);
    builder.addLeafNode(treeId, nodeIds[48], 0, (DAAL_DATA_TYPE)-0.0040618164964565419);
    builder.addLeafNode(treeId, nodeIds[48], 1, (DAAL_DATA_TYPE)0.00094339720947409715);
    builder.addLeafNode(treeId, nodeIds[3], 1, (DAAL_DATA_TYPE)-0.010038706549518817);
    nodeIds[52] = builder.addSplitNode(treeId, nodeIds[2], 1, 7, (DAAL_DATA_TYPE)-0.72549999999999992);
    builder.addLeafNode(treeId, nodeIds[52], 0, (DAAL_DATA_TYPE)0.0020654109071351983);
    builder.addLeafNode(treeId, nodeIds[52], 1, (DAAL_DATA_TYPE)-0.0064064313728102633);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[1], 1, 10, (DAAL_DATA_TYPE)-1.0664999999999998);
    builder.addLeafNode(treeId, nodeIds[55], 0, (DAAL_DATA_TYPE)-0.003751321237676008);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[55], 1, 15, (DAAL_DATA_TYPE)1.5750000000000004);
    nodeIds[58] = builder.addSplitNode(treeId, nodeIds[57], 0, 13, (DAAL_DATA_TYPE)1.6355000000000002);
    builder.addLeafNode(treeId, nodeIds[58], 0, (DAAL_DATA_TYPE)0.0084068589053671577);
    builder.addLeafNode(treeId, nodeIds[58], 1, (DAAL_DATA_TYPE)0.0023684183337309671);
    builder.addLeafNode(treeId, nodeIds[57], 1, (DAAL_DATA_TYPE)-0.0083983255908466319);

}

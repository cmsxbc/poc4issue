 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree35(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 27, (DAAL_DATA_TYPE)0.90450000000000019);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 26, (DAAL_DATA_TYPE)0.86550000000000005);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 27, (DAAL_DATA_TYPE)0.84050000000000014);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 9, (DAAL_DATA_TYPE)0.99050000000000005);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 25, (DAAL_DATA_TYPE)0.94850000000000001);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 26, (DAAL_DATA_TYPE)0.72850000000000004);
    builder.addLeafNode(treeId, nodeIds[6], 0, (DAAL_DATA_TYPE)-0.0024295255342359524);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[6], 1, 9, (DAAL_DATA_TYPE)0.68250000000000022);
    builder.addLeafNode(treeId, nodeIds[8], 0, (DAAL_DATA_TYPE)0.0046228275778921937);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[8], 1, 10, (DAAL_DATA_TYPE)-1.3779999999999999);
    builder.addLeafNode(treeId, nodeIds[10], 0, (DAAL_DATA_TYPE)-0.01674739523302941);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[10], 1, 24, (DAAL_DATA_TYPE)1.0755000000000001);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[12], 0, 11, (DAAL_DATA_TYPE)0.64950000000000008);
    builder.addLeafNode(treeId, nodeIds[13], 0, (DAAL_DATA_TYPE)0.0016157566988840699);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[13], 1, 18, (DAAL_DATA_TYPE)-0.29549999999999993);
    builder.addLeafNode(treeId, nodeIds[15], 0, (DAAL_DATA_TYPE)-0.016650106236338617);
    builder.addLeafNode(treeId, nodeIds[15], 1, (DAAL_DATA_TYPE)-0.00051053531467914581);
    builder.addLeafNode(treeId, nodeIds[12], 1, (DAAL_DATA_TYPE)0.012733395477490767);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[5], 1, 11, (DAAL_DATA_TYPE)0.97150000000000014);
    builder.addLeafNode(treeId, nodeIds[19], 0, (DAAL_DATA_TYPE)-0.0084442842532606692);
    builder.addLeafNode(treeId, nodeIds[19], 1, (DAAL_DATA_TYPE)0.0038857874624869402);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[4], 1, 23, (DAAL_DATA_TYPE)1.3445000000000003);
    builder.addLeafNode(treeId, nodeIds[22], 0, (DAAL_DATA_TYPE)0.0024056489223369401);
    builder.addLeafNode(treeId, nodeIds[22], 1, (DAAL_DATA_TYPE)0.016322032220306853);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[3], 1, 9, (DAAL_DATA_TYPE)0.76950000000000018);
    builder.addLeafNode(treeId, nodeIds[25], 0, (DAAL_DATA_TYPE)-0.00011992393031952874);
    builder.addLeafNode(treeId, nodeIds[25], 1, (DAAL_DATA_TYPE)-0.013364208726182818);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[2], 1, 25, (DAAL_DATA_TYPE)1.7785000000000002);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[28], 0, 13, (DAAL_DATA_TYPE)0.60050000000000014);
    nodeIds[30] = builder.addSplitNode(treeId, nodeIds[29], 0, 5, (DAAL_DATA_TYPE)1.0575000000000003);
    builder.addLeafNode(treeId, nodeIds[30], 0, (DAAL_DATA_TYPE)-0.0024292513792929446);
    builder.addLeafNode(treeId, nodeIds[30], 1, (DAAL_DATA_TYPE)0.0079611554064533928);
    builder.addLeafNode(treeId, nodeIds[29], 1, (DAAL_DATA_TYPE)0.0047399986482092316);
    builder.addLeafNode(treeId, nodeIds[28], 1, (DAAL_DATA_TYPE)-0.01054043425498782);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[1], 1, 24, (DAAL_DATA_TYPE)1.1375000000000002);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[35], 0, 22, (DAAL_DATA_TYPE)1.0465000000000002);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[36], 0, 17, (DAAL_DATA_TYPE)0.57250000000000012);
    builder.addLeafNode(treeId, nodeIds[37], 0, (DAAL_DATA_TYPE)-0.01104337970220198);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[37], 1, 24, (DAAL_DATA_TYPE)0.69150000000000011);
    builder.addLeafNode(treeId, nodeIds[39], 0, (DAAL_DATA_TYPE)0.0040265783886699116);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[39], 1, 22, (DAAL_DATA_TYPE)0.78450000000000009);
    builder.addLeafNode(treeId, nodeIds[41], 0, (DAAL_DATA_TYPE)0.0025678769463584536);
    builder.addLeafNode(treeId, nodeIds[41], 1, (DAAL_DATA_TYPE)-0.0063612048140496581);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[36], 1, 2, (DAAL_DATA_TYPE)0.73650000000000004);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[44], 0, 26, (DAAL_DATA_TYPE)1.3665000000000003);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[45], 0, 2, (DAAL_DATA_TYPE)-0.77149999999999996);
    builder.addLeafNode(treeId, nodeIds[46], 0, (DAAL_DATA_TYPE)0.0057399023395891379);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[46], 1, 3, (DAAL_DATA_TYPE)0.71050000000000002);
    builder.addLeafNode(treeId, nodeIds[48], 0, (DAAL_DATA_TYPE)-0.01027735739148089);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[48], 1, 25, (DAAL_DATA_TYPE)1.0625000000000002);
    builder.addLeafNode(treeId, nodeIds[50], 0, (DAAL_DATA_TYPE)0.0058317345003007165);
    builder.addLeafNode(treeId, nodeIds[50], 1, (DAAL_DATA_TYPE)-0.0095778575587657198);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[45], 1, 22, (DAAL_DATA_TYPE)1.9085000000000003);
    builder.addLeafNode(treeId, nodeIds[53], 0, (DAAL_DATA_TYPE)-0.01152347445085242);
    builder.addLeafNode(treeId, nodeIds[53], 1, (DAAL_DATA_TYPE)-0.00024235278086842235);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[44], 1, 13, (DAAL_DATA_TYPE)0.78050000000000008);
    builder.addLeafNode(treeId, nodeIds[56], 0, (DAAL_DATA_TYPE)-0.0062167068096724426);
    builder.addLeafNode(treeId, nodeIds[56], 1, (DAAL_DATA_TYPE)0.0082677323903356283);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[35], 1, 0, (DAAL_DATA_TYPE)2.4805000000000006);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)0.00084523928021450103);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)-0.0082998959523326952);

}

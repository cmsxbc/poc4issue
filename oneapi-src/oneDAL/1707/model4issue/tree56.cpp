 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree56(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 25, (DAAL_DATA_TYPE)1.4915000000000003);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 5, (DAAL_DATA_TYPE)2.3995000000000002);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 24, (DAAL_DATA_TYPE)2.3415000000000004);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 22, (DAAL_DATA_TYPE)0.72250000000000003);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 17, (DAAL_DATA_TYPE)0.64750000000000008);
    builder.addLeafNode(treeId, nodeIds[5], 0, (DAAL_DATA_TYPE)-0.00030082248190723402);
    builder.addLeafNode(treeId, nodeIds[5], 1, (DAAL_DATA_TYPE)0.0054536735846824917);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[4], 1, 22, (DAAL_DATA_TYPE)1.0265000000000002);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[8], 0, 24, (DAAL_DATA_TYPE)0.97750000000000015);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[9], 0, 16, (DAAL_DATA_TYPE)1.9110000000000003);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[10], 0, 7, (DAAL_DATA_TYPE)-1.6334999999999997);
    builder.addLeafNode(treeId, nodeIds[11], 0, (DAAL_DATA_TYPE)-0.010620609704743732);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[11], 1, 13, (DAAL_DATA_TYPE)1.2215000000000003);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[13], 0, 25, (DAAL_DATA_TYPE)0.62350000000000005);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[14], 0, 15, (DAAL_DATA_TYPE)1.4035000000000002);
    builder.addLeafNode(treeId, nodeIds[15], 0, (DAAL_DATA_TYPE)-0.0052785169782049689);
    builder.addLeafNode(treeId, nodeIds[15], 1, (DAAL_DATA_TYPE)0.0078716097054658107);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[14], 1, 8, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[18], 0, 0, (DAAL_DATA_TYPE)1.2285000000000001);
    nodeIds[20] = builder.addSplitNode(treeId, nodeIds[19], 0, 2, (DAAL_DATA_TYPE)-1.1404999999999996);
    builder.addLeafNode(treeId, nodeIds[20], 0, (DAAL_DATA_TYPE)-0.0097663357613548153);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[20], 1, 17, (DAAL_DATA_TYPE)0.73550000000000015);
    builder.addLeafNode(treeId, nodeIds[22], 0, (DAAL_DATA_TYPE)0.010201360633777034);
    builder.addLeafNode(treeId, nodeIds[22], 1, (DAAL_DATA_TYPE)-0.00078796010544831803);
    builder.addLeafNode(treeId, nodeIds[19], 1, (DAAL_DATA_TYPE)-0.0095868537417398061);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[18], 1, 24, (DAAL_DATA_TYPE)0.94750000000000012);
    builder.addLeafNode(treeId, nodeIds[26], 0, (DAAL_DATA_TYPE)0.0032125254046221612);
    builder.addLeafNode(treeId, nodeIds[26], 1, (DAAL_DATA_TYPE)-0.0082120969318426589);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[13], 1, 0, (DAAL_DATA_TYPE)1.0205000000000002);
    nodeIds[30] = builder.addSplitNode(treeId, nodeIds[29], 0, 0, (DAAL_DATA_TYPE)0.78150000000000019);
    builder.addLeafNode(treeId, nodeIds[30], 0, (DAAL_DATA_TYPE)0.0033421755436508133);
    builder.addLeafNode(treeId, nodeIds[30], 1, (DAAL_DATA_TYPE)0.015036822759679387);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[29], 1, 6, (DAAL_DATA_TYPE)0.024500000000000004);
    builder.addLeafNode(treeId, nodeIds[33], 0, (DAAL_DATA_TYPE)0.0063775688260793691);
    builder.addLeafNode(treeId, nodeIds[33], 1, (DAAL_DATA_TYPE)-0.010774962024556266);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[10], 1, 0, (DAAL_DATA_TYPE)0.54350000000000021);
    builder.addLeafNode(treeId, nodeIds[36], 0, (DAAL_DATA_TYPE)-0.0092669934605377445);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[36], 1, 11, (DAAL_DATA_TYPE)-1.5294999999999999);
    builder.addLeafNode(treeId, nodeIds[38], 0, (DAAL_DATA_TYPE)-0.013861084672120903);
    builder.addLeafNode(treeId, nodeIds[38], 1, (DAAL_DATA_TYPE)-0.0014360764132913964);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[9], 1, 11, (DAAL_DATA_TYPE)0.78050000000000008);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[41], 0, 1, (DAAL_DATA_TYPE)-0.19549999999999998);
    builder.addLeafNode(treeId, nodeIds[42], 0, (DAAL_DATA_TYPE)0.0048585840670720623);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[42], 1, 1, (DAAL_DATA_TYPE)-0.12749999999999997);
    builder.addLeafNode(treeId, nodeIds[44], 0, (DAAL_DATA_TYPE)-0.014519056826829911);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[44], 1, 11, (DAAL_DATA_TYPE)0.45350000000000007);
    builder.addLeafNode(treeId, nodeIds[46], 0, (DAAL_DATA_TYPE)-0.00041009496471711566);
    builder.addLeafNode(treeId, nodeIds[46], 1, (DAAL_DATA_TYPE)0.0080564351277608495);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[41], 1, 7, (DAAL_DATA_TYPE)0.74750000000000016);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[49], 0, 26, (DAAL_DATA_TYPE)0.82250000000000012);
    builder.addLeafNode(treeId, nodeIds[50], 0, (DAAL_DATA_TYPE)0.01036716350913048);
    builder.addLeafNode(treeId, nodeIds[50], 1, (DAAL_DATA_TYPE)-0.0016490308349733957);
    builder.addLeafNode(treeId, nodeIds[49], 1, (DAAL_DATA_TYPE)-0.010700385725381328);
    builder.addLeafNode(treeId, nodeIds[8], 1, (DAAL_DATA_TYPE)0.0013573816659045799);
    builder.addLeafNode(treeId, nodeIds[3], 1, (DAAL_DATA_TYPE)-0.011333464831113816);
    builder.addLeafNode(treeId, nodeIds[2], 1, (DAAL_DATA_TYPE)0.0067299966064125003);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[1], 1, 17, (DAAL_DATA_TYPE)2.1615000000000006);
    nodeIds[58] = builder.addSplitNode(treeId, nodeIds[57], 0, 7, (DAAL_DATA_TYPE)1.1355000000000002);
    builder.addLeafNode(treeId, nodeIds[58], 0, (DAAL_DATA_TYPE)-0.0022493965316373386);
    builder.addLeafNode(treeId, nodeIds[58], 1, (DAAL_DATA_TYPE)-0.0080319419879158714);
    builder.addLeafNode(treeId, nodeIds[57], 1, (DAAL_DATA_TYPE)0.0075012314090028747);

}

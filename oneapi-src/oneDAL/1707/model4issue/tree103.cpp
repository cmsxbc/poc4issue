 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree103(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 10, (DAAL_DATA_TYPE)-2.5549999999999993);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 16, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    builder.addLeafNode(treeId, nodeIds[2], 0, (DAAL_DATA_TYPE)-0.013619030901992863);
    builder.addLeafNode(treeId, nodeIds[2], 1, (DAAL_DATA_TYPE)0.0011434526382280248);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[1], 1, 3, (DAAL_DATA_TYPE)1.4915000000000003);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 24, (DAAL_DATA_TYPE)0.64150000000000007);
    builder.addLeafNode(treeId, nodeIds[6], 0, (DAAL_DATA_TYPE)0.0026344404154115524);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[6], 1, 4, (DAAL_DATA_TYPE)0.31550000000000006);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[8], 0, 23, (DAAL_DATA_TYPE)1.6180000000000001);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[9], 0, 0, (DAAL_DATA_TYPE)0.40750000000000003);
    builder.addLeafNode(treeId, nodeIds[10], 0, (DAAL_DATA_TYPE)0.005114754703483426);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[10], 1, 23, (DAAL_DATA_TYPE)1.3280000000000001);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[12], 0, 18, (DAAL_DATA_TYPE)0.012500000000000002);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[13], 0, 13, (DAAL_DATA_TYPE)0.40450000000000008);
    builder.addLeafNode(treeId, nodeIds[14], 0, (DAAL_DATA_TYPE)-0.010095227977786309);
    builder.addLeafNode(treeId, nodeIds[14], 1, (DAAL_DATA_TYPE)-0.00048858657222272661);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[13], 1, 1, (DAAL_DATA_TYPE)-1.1204999999999998);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[17], 0, 11, (DAAL_DATA_TYPE)-0.61449999999999994);
    builder.addLeafNode(treeId, nodeIds[18], 0, (DAAL_DATA_TYPE)-0.011079373329560807);
    nodeIds[20] = builder.addSplitNode(treeId, nodeIds[18], 1, 1, (DAAL_DATA_TYPE)-1.6564999999999996);
    builder.addLeafNode(treeId, nodeIds[20], 0, (DAAL_DATA_TYPE)-0.0086526120064297201);
    builder.addLeafNode(treeId, nodeIds[20], 1, (DAAL_DATA_TYPE)0.0035114346515224756);
    builder.addLeafNode(treeId, nodeIds[17], 1, (DAAL_DATA_TYPE)0.0022931923389396805);
    builder.addLeafNode(treeId, nodeIds[12], 1, (DAAL_DATA_TYPE)0.0054465440324487913);
    builder.addLeafNode(treeId, nodeIds[9], 1, (DAAL_DATA_TYPE)-0.0085894368689607929);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[8], 1, 13, (DAAL_DATA_TYPE)0.98050000000000004);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[26], 0, 24, (DAAL_DATA_TYPE)0.65450000000000019);
    builder.addLeafNode(treeId, nodeIds[27], 0, (DAAL_DATA_TYPE)-0.013013550844043494);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[27], 1, 0, (DAAL_DATA_TYPE)2.2790000000000004);
    builder.addLeafNode(treeId, nodeIds[29], 0, (DAAL_DATA_TYPE)-0.0014478678739335005);
    builder.addLeafNode(treeId, nodeIds[29], 1, (DAAL_DATA_TYPE)-0.0090624893757891151);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[26], 1, 6, (DAAL_DATA_TYPE)1.6475000000000002);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[32], 0, 17, (DAAL_DATA_TYPE)0.70550000000000013);
    builder.addLeafNode(treeId, nodeIds[33], 0, (DAAL_DATA_TYPE)-0.00223269510937951);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[33], 1, 24, (DAAL_DATA_TYPE)1.6305000000000003);
    builder.addLeafNode(treeId, nodeIds[35], 0, (DAAL_DATA_TYPE)0.0016164510704414178);
    builder.addLeafNode(treeId, nodeIds[35], 1, (DAAL_DATA_TYPE)0.013166692172703538);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[32], 1, 4, (DAAL_DATA_TYPE)0.84150000000000003);
    builder.addLeafNode(treeId, nodeIds[38], 0, (DAAL_DATA_TYPE)0.0013985052527416321);
    builder.addLeafNode(treeId, nodeIds[38], 1, (DAAL_DATA_TYPE)-0.015781622149405025);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[5], 1, 1, (DAAL_DATA_TYPE)0.011500000000000002);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[41], 0, 24, (DAAL_DATA_TYPE)0.96550000000000014);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[42], 0, 2, (DAAL_DATA_TYPE)0.67900000000000016);
    builder.addLeafNode(treeId, nodeIds[43], 0, (DAAL_DATA_TYPE)-0.0050602190818528842);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[43], 1, 1, (DAAL_DATA_TYPE)-0.44549999999999995);
    builder.addLeafNode(treeId, nodeIds[45], 0, (DAAL_DATA_TYPE)-0.0022305503697591087);
    builder.addLeafNode(treeId, nodeIds[45], 1, (DAAL_DATA_TYPE)0.0095223429388013384);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[42], 1, 18, (DAAL_DATA_TYPE)0.094500000000000015);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[48], 0, 9, (DAAL_DATA_TYPE)0.95150000000000012);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[49], 0, 2, (DAAL_DATA_TYPE)0.43550000000000005);
    builder.addLeafNode(treeId, nodeIds[50], 0, (DAAL_DATA_TYPE)0.014569608370463054);
    builder.addLeafNode(treeId, nodeIds[50], 1, (DAAL_DATA_TYPE)0.0018558366348346074);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[49], 1, 0, (DAAL_DATA_TYPE)0.56150000000000022);
    builder.addLeafNode(treeId, nodeIds[53], 0, (DAAL_DATA_TYPE)-0.0079553110152482988);
    builder.addLeafNode(treeId, nodeIds[53], 1, (DAAL_DATA_TYPE)0.0051225340293188188);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[48], 1, 26, (DAAL_DATA_TYPE)1.2135000000000002);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[56], 0, 6, (DAAL_DATA_TYPE)0.33450000000000008);
    builder.addLeafNode(treeId, nodeIds[57], 0, (DAAL_DATA_TYPE)-0.011440164942380995);
    builder.addLeafNode(treeId, nodeIds[57], 1, (DAAL_DATA_TYPE)0.001708020844186346);
    builder.addLeafNode(treeId, nodeIds[56], 1, (DAAL_DATA_TYPE)0.0043646569467253159);
    builder.addLeafNode(treeId, nodeIds[41], 1, (DAAL_DATA_TYPE)-0.0028797912396331012);

}

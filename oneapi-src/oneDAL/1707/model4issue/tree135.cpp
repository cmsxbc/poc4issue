 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree135(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 11, (DAAL_DATA_TYPE)1.6385000000000003);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 11, (DAAL_DATA_TYPE)1.4445000000000003);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 21, (DAAL_DATA_TYPE)0.88250000000000017);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 0, (DAAL_DATA_TYPE)1.3915000000000002);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 14, (DAAL_DATA_TYPE)-0.80449999999999988);
    builder.addLeafNode(treeId, nodeIds[5], 0, (DAAL_DATA_TYPE)-0.002203200901905406);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[5], 1, 25, (DAAL_DATA_TYPE)1.1555000000000002);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 6, (DAAL_DATA_TYPE)0.46750000000000008);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[8], 0, 0, (DAAL_DATA_TYPE)0.97550000000000014);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[9], 0, 26, (DAAL_DATA_TYPE)0.87750000000000006);
    builder.addLeafNode(treeId, nodeIds[10], 0, (DAAL_DATA_TYPE)-0.0010923133395408513);
    builder.addLeafNode(treeId, nodeIds[10], 1, (DAAL_DATA_TYPE)0.0033477558126936919);
    builder.addLeafNode(treeId, nodeIds[9], 1, (DAAL_DATA_TYPE)0.0053356592727083667);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[8], 1, 21, (DAAL_DATA_TYPE)0.86850000000000016);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[14], 0, 2, (DAAL_DATA_TYPE)0.37750000000000006);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[15], 0, 14, (DAAL_DATA_TYPE)-0.044499999999999991);
    builder.addLeafNode(treeId, nodeIds[16], 0, (DAAL_DATA_TYPE)-0.0087519554719328874);
    builder.addLeafNode(treeId, nodeIds[16], 1, (DAAL_DATA_TYPE)-0.00069369327906957452);
    builder.addLeafNode(treeId, nodeIds[15], 1, (DAAL_DATA_TYPE)0.0033520301296225477);
    builder.addLeafNode(treeId, nodeIds[14], 1, (DAAL_DATA_TYPE)-0.011945191002450884);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[7], 1, 25, (DAAL_DATA_TYPE)1.4095000000000002);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[21], 0, 7, (DAAL_DATA_TYPE)1.0740000000000001);
    builder.addLeafNode(treeId, nodeIds[22], 0, (DAAL_DATA_TYPE)-0.0079785142451458211);
    builder.addLeafNode(treeId, nodeIds[22], 1, (DAAL_DATA_TYPE)0.0066440722284217676);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[21], 1, 18, (DAAL_DATA_TYPE)0.81250000000000011);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[25], 0, 11, (DAAL_DATA_TYPE)-0.69249999999999978);
    builder.addLeafNode(treeId, nodeIds[26], 0, (DAAL_DATA_TYPE)0.0039955216405146267);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[26], 1, 14, (DAAL_DATA_TYPE)-0.46599999999999997);
    builder.addLeafNode(treeId, nodeIds[28], 0, (DAAL_DATA_TYPE)0.0055135154741860577);
    builder.addLeafNode(treeId, nodeIds[28], 1, (DAAL_DATA_TYPE)-0.0065484907796454373);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[25], 1, 7, (DAAL_DATA_TYPE)0.19950000000000004);
    builder.addLeafNode(treeId, nodeIds[31], 0, (DAAL_DATA_TYPE)0.017259810331439519);
    builder.addLeafNode(treeId, nodeIds[31], 1, (DAAL_DATA_TYPE)0.0022036068979650737);
    builder.addLeafNode(treeId, nodeIds[4], 1, (DAAL_DATA_TYPE)-0.0024108502209411907);
    builder.addLeafNode(treeId, nodeIds[3], 1, (DAAL_DATA_TYPE)0.00043770046547843923);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[2], 1, 0, (DAAL_DATA_TYPE)0.9165000000000002);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[36], 0, 3, (DAAL_DATA_TYPE)0.65250000000000019);
    builder.addLeafNode(treeId, nodeIds[37], 0, (DAAL_DATA_TYPE)-0.011075092615702978);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[37], 1, 9, (DAAL_DATA_TYPE)0.75250000000000006);
    builder.addLeafNode(treeId, nodeIds[39], 0, (DAAL_DATA_TYPE)-0.008323485222320225);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[39], 1, 26, (DAAL_DATA_TYPE)1.0535000000000003);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[41], 0, 4, (DAAL_DATA_TYPE)-0.58149999999999979);
    builder.addLeafNode(treeId, nodeIds[42], 0, (DAAL_DATA_TYPE)-0.0045622033675989278);
    builder.addLeafNode(treeId, nodeIds[42], 1, (DAAL_DATA_TYPE)0.0065468149464123137);
    builder.addLeafNode(treeId, nodeIds[41], 1, (DAAL_DATA_TYPE)-0.0052983699762262403);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[36], 1, 9, (DAAL_DATA_TYPE)0.69950000000000012);
    builder.addLeafNode(treeId, nodeIds[46], 0, (DAAL_DATA_TYPE)0.006706296515492898);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[46], 1, 19, (DAAL_DATA_TYPE)-0.66549999999999987);
    builder.addLeafNode(treeId, nodeIds[48], 0, (DAAL_DATA_TYPE)0.0041290677397046241);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[48], 1, 26, (DAAL_DATA_TYPE)1.1575000000000002);
    builder.addLeafNode(treeId, nodeIds[50], 0, (DAAL_DATA_TYPE)-0.0094508832263551206);
    builder.addLeafNode(treeId, nodeIds[50], 1, (DAAL_DATA_TYPE)0.00032839270960539582);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[1], 1, 19, (DAAL_DATA_TYPE)-0.25849999999999995);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[53], 0, 25, (DAAL_DATA_TYPE)0.90950000000000009);
    builder.addLeafNode(treeId, nodeIds[54], 0, (DAAL_DATA_TYPE)0.0052388796165328605);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)-0.0078666728564712688);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[53], 1, 15, (DAAL_DATA_TYPE)0.35400000000000004);
    nodeIds[58] = builder.addSplitNode(treeId, nodeIds[57], 0, 26, (DAAL_DATA_TYPE)1.0135000000000003);
    builder.addLeafNode(treeId, nodeIds[58], 0, (DAAL_DATA_TYPE)0.011295662861208413);
    builder.addLeafNode(treeId, nodeIds[58], 1, (DAAL_DATA_TYPE)0.0023556668581741474);
    builder.addLeafNode(treeId, nodeIds[57], 1, (DAAL_DATA_TYPE)-0.0024185775044315962);

}

 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree49(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 27, (DAAL_DATA_TYPE)1.0105000000000002);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 5, (DAAL_DATA_TYPE)1.0895000000000004);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 13, (DAAL_DATA_TYPE)1.4385000000000001);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 9, (DAAL_DATA_TYPE)0.90750000000000008);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 9, (DAAL_DATA_TYPE)0.68950000000000011);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 3, (DAAL_DATA_TYPE)0.42050000000000004);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[6], 0, 25, (DAAL_DATA_TYPE)0.95950000000000013);
    builder.addLeafNode(treeId, nodeIds[7], 0, (DAAL_DATA_TYPE)0.0083543920325058873);
    builder.addLeafNode(treeId, nodeIds[7], 1, (DAAL_DATA_TYPE)-0.0077291948420386159);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[6], 1, 26, (DAAL_DATA_TYPE)0.72450000000000003);
    builder.addLeafNode(treeId, nodeIds[10], 0, (DAAL_DATA_TYPE)-0.0046928692983096865);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[10], 1, 0, (DAAL_DATA_TYPE)0.7855000000000002);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[12], 0, 22, (DAAL_DATA_TYPE)0.99650000000000005);
    builder.addLeafNode(treeId, nodeIds[13], 0, (DAAL_DATA_TYPE)-0.0045812387497507958);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[13], 1, 24, (DAAL_DATA_TYPE)0.85750000000000004);
    builder.addLeafNode(treeId, nodeIds[15], 0, (DAAL_DATA_TYPE)0.0092449525879188029);
    builder.addLeafNode(treeId, nodeIds[15], 1, (DAAL_DATA_TYPE)-0.0059061407469786133);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[12], 1, 17, (DAAL_DATA_TYPE)0.73550000000000015);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[18], 0, 5, (DAAL_DATA_TYPE)0.71650000000000003);
    builder.addLeafNode(treeId, nodeIds[19], 0, (DAAL_DATA_TYPE)-0.0078287621693951745);
    builder.addLeafNode(treeId, nodeIds[19], 1, (DAAL_DATA_TYPE)0.0037872801064163125);
    builder.addLeafNode(treeId, nodeIds[18], 1, (DAAL_DATA_TYPE)0.0057198819504162973);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[5], 1, 19, (DAAL_DATA_TYPE)-1.1174999999999999);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[23], 0, 21, (DAAL_DATA_TYPE)0.96950000000000014);
    builder.addLeafNode(treeId, nodeIds[24], 0, (DAAL_DATA_TYPE)-0.002000183070960798);
    builder.addLeafNode(treeId, nodeIds[24], 1, (DAAL_DATA_TYPE)0.010510295375091273);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[23], 1, 10, (DAAL_DATA_TYPE)-1.2954999999999999);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[27], 0, 22, (DAAL_DATA_TYPE)0.91550000000000009);
    builder.addLeafNode(treeId, nodeIds[28], 0, (DAAL_DATA_TYPE)-0.022765693955478214);
    builder.addLeafNode(treeId, nodeIds[28], 1, (DAAL_DATA_TYPE)-0.0047048264827865829);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[27], 1, 22, (DAAL_DATA_TYPE)0.84650000000000014);
    builder.addLeafNode(treeId, nodeIds[31], 0, (DAAL_DATA_TYPE)0.00041839753222816132);
    builder.addLeafNode(treeId, nodeIds[31], 1, (DAAL_DATA_TYPE)-0.0050459434160079093);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[4], 1, 27, (DAAL_DATA_TYPE)0.67850000000000021);
    builder.addLeafNode(treeId, nodeIds[34], 0, (DAAL_DATA_TYPE)0.0086047706659883264);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[34], 1, 26, (DAAL_DATA_TYPE)0.8175);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[36], 0, 10, (DAAL_DATA_TYPE)0.20550000000000002);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[37], 0, 8, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    builder.addLeafNode(treeId, nodeIds[38], 0, (DAAL_DATA_TYPE)-0.013115143006847753);
    builder.addLeafNode(treeId, nodeIds[38], 1, (DAAL_DATA_TYPE)0.00056778969864050555);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[37], 1, 25, (DAAL_DATA_TYPE)0.63950000000000007);
    builder.addLeafNode(treeId, nodeIds[41], 0, (DAAL_DATA_TYPE)-0.0080378481688407749);
    builder.addLeafNode(treeId, nodeIds[41], 1, (DAAL_DATA_TYPE)0.0087186616133241093);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[36], 1, 27, (DAAL_DATA_TYPE)0.85050000000000014);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[44], 0, 19, (DAAL_DATA_TYPE)0.46850000000000008);
    builder.addLeafNode(treeId, nodeIds[45], 0, (DAAL_DATA_TYPE)0.0065525506700699525);
    builder.addLeafNode(treeId, nodeIds[45], 1, (DAAL_DATA_TYPE)2.4971707647008108e-05);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[44], 1, 19, (DAAL_DATA_TYPE)-1.2944999999999998);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[48], 0, 25, (DAAL_DATA_TYPE)0.89750000000000008);
    builder.addLeafNode(treeId, nodeIds[49], 0, (DAAL_DATA_TYPE)-0.021108100773847623);
    builder.addLeafNode(treeId, nodeIds[49], 1, (DAAL_DATA_TYPE)-0.00011516452217713381);
    builder.addLeafNode(treeId, nodeIds[48], 1, (DAAL_DATA_TYPE)0.00055742904154303813);
    builder.addLeafNode(treeId, nodeIds[3], 1, (DAAL_DATA_TYPE)0.0034335572729794991);
    builder.addLeafNode(treeId, nodeIds[2], 1, (DAAL_DATA_TYPE)0.0032368216246871626);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[1], 1, 3, (DAAL_DATA_TYPE)1.7675000000000003);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[55], 0, 5, (DAAL_DATA_TYPE)2.3045000000000004);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[56], 0, 0, (DAAL_DATA_TYPE)1.2625000000000002);
    builder.addLeafNode(treeId, nodeIds[57], 0, (DAAL_DATA_TYPE)-0.00033738615977667438);
    builder.addLeafNode(treeId, nodeIds[57], 1, (DAAL_DATA_TYPE)-0.0042431664655619272);
    builder.addLeafNode(treeId, nodeIds[56], 1, (DAAL_DATA_TYPE)0.0072538089293699998);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)-0.0052565977137618743);

}

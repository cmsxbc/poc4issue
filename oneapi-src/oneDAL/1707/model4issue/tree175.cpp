 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree175(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 9, (DAAL_DATA_TYPE)0.38650000000000007);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 18, (DAAL_DATA_TYPE)0.65250000000000019);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 19, (DAAL_DATA_TYPE)0.9255000000000001);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 18, (DAAL_DATA_TYPE)-0.11949999999999998);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 2, (DAAL_DATA_TYPE)0.29050000000000004);
    builder.addLeafNode(treeId, nodeIds[5], 0, (DAAL_DATA_TYPE)0.0081384146426405225);
    builder.addLeafNode(treeId, nodeIds[5], 1, (DAAL_DATA_TYPE)-0.0016122163788072374);
    builder.addLeafNode(treeId, nodeIds[4], 1, (DAAL_DATA_TYPE)0.0094236840553423209);
    builder.addLeafNode(treeId, nodeIds[3], 1, (DAAL_DATA_TYPE)-0.0046849864125251776);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[2], 1, 8, (DAAL_DATA_TYPE)1.6300000000000001);
    builder.addLeafNode(treeId, nodeIds[10], 0, (DAAL_DATA_TYPE)-0.0091225525031664555);
    builder.addLeafNode(treeId, nodeIds[10], 1, (DAAL_DATA_TYPE)0.0027673442882520183);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[1], 1, 3, (DAAL_DATA_TYPE)1.7785000000000002);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[13], 0, 19, (DAAL_DATA_TYPE)0.58550000000000002);
    builder.addLeafNode(treeId, nodeIds[14], 0, (DAAL_DATA_TYPE)-0.00015892906603641704);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[14], 1, 3, (DAAL_DATA_TYPE)1.3185000000000002);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[16], 0, 15, (DAAL_DATA_TYPE)0.8135);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[17], 0, 25, (DAAL_DATA_TYPE)1.5435000000000001);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[18], 0, 25, (DAAL_DATA_TYPE)0.82450000000000012);
    nodeIds[20] = builder.addSplitNode(treeId, nodeIds[19], 0, 1, (DAAL_DATA_TYPE)1.5845000000000002);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[20], 0, 1, (DAAL_DATA_TYPE)1.2045000000000001);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[21], 0, 22, (DAAL_DATA_TYPE)1.1135000000000004);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[22], 0, 10, (DAAL_DATA_TYPE)0.88150000000000006);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[23], 0, 13, (DAAL_DATA_TYPE)0.52750000000000019);
    builder.addLeafNode(treeId, nodeIds[24], 0, (DAAL_DATA_TYPE)-0.0083057815342077197);
    builder.addLeafNode(treeId, nodeIds[24], 1, (DAAL_DATA_TYPE)-0.00042574144614946865);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[23], 1, 11, (DAAL_DATA_TYPE)0.13950000000000004);
    builder.addLeafNode(treeId, nodeIds[27], 0, (DAAL_DATA_TYPE)-0.0023102784805275776);
    builder.addLeafNode(treeId, nodeIds[27], 1, (DAAL_DATA_TYPE)0.012223625872974042);
    builder.addLeafNode(treeId, nodeIds[22], 1, (DAAL_DATA_TYPE)-0.0080745946234938772);
    builder.addLeafNode(treeId, nodeIds[21], 1, (DAAL_DATA_TYPE)0.0082304828144885885);
    builder.addLeafNode(treeId, nodeIds[20], 1, (DAAL_DATA_TYPE)-0.010198857096167139);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[19], 1, 10, (DAAL_DATA_TYPE)0.11350000000000002);
    builder.addLeafNode(treeId, nodeIds[33], 0, (DAAL_DATA_TYPE)0.0035464168167446686);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[33], 1, 1, (DAAL_DATA_TYPE)0.12850000000000003);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[35], 0, 2, (DAAL_DATA_TYPE)-0.52699999999999991);
    builder.addLeafNode(treeId, nodeIds[36], 0, (DAAL_DATA_TYPE)-0.01187502029899727);
    builder.addLeafNode(treeId, nodeIds[36], 1, (DAAL_DATA_TYPE)3.2628614515546827e-05);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[35], 1, 1, (DAAL_DATA_TYPE)0.46700000000000008);
    builder.addLeafNode(treeId, nodeIds[39], 0, (DAAL_DATA_TYPE)0.0088789971737081516);
    builder.addLeafNode(treeId, nodeIds[39], 1, (DAAL_DATA_TYPE)1.2906268239021303e-06);
    builder.addLeafNode(treeId, nodeIds[18], 1, (DAAL_DATA_TYPE)-0.0046192689692940219);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[17], 1, 18, (DAAL_DATA_TYPE)-0.61749999999999983);
    builder.addLeafNode(treeId, nodeIds[43], 0, (DAAL_DATA_TYPE)-0.002445499177079603);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[43], 1, 23, (DAAL_DATA_TYPE)0.98050000000000004);
    builder.addLeafNode(treeId, nodeIds[45], 0, (DAAL_DATA_TYPE)-0.0041607714524226529);
    builder.addLeafNode(treeId, nodeIds[45], 1, (DAAL_DATA_TYPE)0.0055378098041413129);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[16], 1, 21, (DAAL_DATA_TYPE)0.70050000000000001);
    builder.addLeafNode(treeId, nodeIds[48], 0, (DAAL_DATA_TYPE)-0.0030517782794777307);
    builder.addLeafNode(treeId, nodeIds[48], 1, (DAAL_DATA_TYPE)0.0052373898474477416);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[13], 1, 13, (DAAL_DATA_TYPE)0.78850000000000009);
    nodeIds[52] = builder.addSplitNode(treeId, nodeIds[51], 0, 0, (DAAL_DATA_TYPE)0.42250000000000004);
    builder.addLeafNode(treeId, nodeIds[52], 0, (DAAL_DATA_TYPE)-0.0064201279423598727);
    builder.addLeafNode(treeId, nodeIds[52], 1, (DAAL_DATA_TYPE)0.0026787366882912935);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[51], 1, 3, (DAAL_DATA_TYPE)2.2815000000000007);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[55], 0, 17, (DAAL_DATA_TYPE)1.5715000000000001);
    builder.addLeafNode(treeId, nodeIds[56], 0, (DAAL_DATA_TYPE)-0.0035003389723201775);
    builder.addLeafNode(treeId, nodeIds[56], 1, (DAAL_DATA_TYPE)-0.011591539757864667);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[55], 1, 22, (DAAL_DATA_TYPE)0.9085000000000002);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)0.0067589451167732479);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)-0.0023659155302376339);

}

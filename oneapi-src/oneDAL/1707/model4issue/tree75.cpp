 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree75(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 23, (DAAL_DATA_TYPE)1.0625000000000002);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 4, (DAAL_DATA_TYPE)1.3485000000000003);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 3, (DAAL_DATA_TYPE)1.3505000000000003);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 17, (DAAL_DATA_TYPE)0.69850000000000001);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 3, (DAAL_DATA_TYPE)1.2865000000000002);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 17, (DAAL_DATA_TYPE)0.6735000000000001);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[6], 0, 4, (DAAL_DATA_TYPE)-1.3124999999999998);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 19, (DAAL_DATA_TYPE)0.97950000000000015);
    builder.addLeafNode(treeId, nodeIds[8], 0, (DAAL_DATA_TYPE)0.0070080891565745141);
    builder.addLeafNode(treeId, nodeIds[8], 1, (DAAL_DATA_TYPE)-0.0051156184282796138);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[7], 1, 6, (DAAL_DATA_TYPE)-1.8214999999999997);
    builder.addLeafNode(treeId, nodeIds[11], 0, (DAAL_DATA_TYPE)-0.013924762662500144);
    builder.addLeafNode(treeId, nodeIds[11], 1, (DAAL_DATA_TYPE)-0.0016116834656309546);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[6], 1, 0, (DAAL_DATA_TYPE)1.2775000000000001);
    builder.addLeafNode(treeId, nodeIds[14], 0, (DAAL_DATA_TYPE)-0.0031292152922537371);
    builder.addLeafNode(treeId, nodeIds[14], 1, (DAAL_DATA_TYPE)-0.017964215483516455);
    builder.addLeafNode(treeId, nodeIds[5], 1, (DAAL_DATA_TYPE)0.0086787888435301951);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[4], 1, 23, (DAAL_DATA_TYPE)1.0505000000000002);
    builder.addLeafNode(treeId, nodeIds[18], 0, (DAAL_DATA_TYPE)0.00086282176526981046);
    builder.addLeafNode(treeId, nodeIds[18], 1, (DAAL_DATA_TYPE)-0.0097451162283067362);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[3], 1, 7, (DAAL_DATA_TYPE)-1.3714999999999999);
    builder.addLeafNode(treeId, nodeIds[21], 0, (DAAL_DATA_TYPE)0.0037245229429022954);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[21], 1, 6, (DAAL_DATA_TYPE)-0.73249999999999982);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[23], 0, 3, (DAAL_DATA_TYPE)1.4915000000000003);
    builder.addLeafNode(treeId, nodeIds[24], 0, (DAAL_DATA_TYPE)-0.015532759402412923);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[24], 1, 12, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    builder.addLeafNode(treeId, nodeIds[26], 0, (DAAL_DATA_TYPE)-0.0080484265501620956);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[26], 1, 7, (DAAL_DATA_TYPE)-0.078499999999999986);
    builder.addLeafNode(treeId, nodeIds[28], 0, (DAAL_DATA_TYPE)0.011790679169020483);
    builder.addLeafNode(treeId, nodeIds[28], 1, (DAAL_DATA_TYPE)-0.0037495019021318169);
    builder.addLeafNode(treeId, nodeIds[23], 1, (DAAL_DATA_TYPE)-0.0017126191116971117);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[2], 1, 15, (DAAL_DATA_TYPE)1.2825000000000002);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[32], 0, 27, (DAAL_DATA_TYPE)1.2475000000000003);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[33], 0, 22, (DAAL_DATA_TYPE)0.87850000000000017);
    builder.addLeafNode(treeId, nodeIds[34], 0, (DAAL_DATA_TYPE)0.0036890592332929372);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[34], 1, 21, (DAAL_DATA_TYPE)0.69650000000000001);
    builder.addLeafNode(treeId, nodeIds[36], 0, (DAAL_DATA_TYPE)0.0084816018200438957);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[36], 1, 25, (DAAL_DATA_TYPE)1.0215000000000003);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[38], 0, 22, (DAAL_DATA_TYPE)0.94950000000000012);
    builder.addLeafNode(treeId, nodeIds[39], 0, (DAAL_DATA_TYPE)-0.0074368729721754796);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[39], 1, 4, (DAAL_DATA_TYPE)1.6155000000000002);
    builder.addLeafNode(treeId, nodeIds[41], 0, (DAAL_DATA_TYPE)0.0067334942089823579);
    builder.addLeafNode(treeId, nodeIds[41], 1, (DAAL_DATA_TYPE)-0.0055481789284385742);
    builder.addLeafNode(treeId, nodeIds[38], 1, (DAAL_DATA_TYPE)-0.0086407132811196479);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[33], 1, 4, (DAAL_DATA_TYPE)1.6155000000000002);
    builder.addLeafNode(treeId, nodeIds[45], 0, (DAAL_DATA_TYPE)0.015454938292882784);
    builder.addLeafNode(treeId, nodeIds[45], 1, (DAAL_DATA_TYPE)-0.00090158127963409901);
    builder.addLeafNode(treeId, nodeIds[32], 1, (DAAL_DATA_TYPE)0.0093308479007747445);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[1], 1, 0, (DAAL_DATA_TYPE)1.2285000000000001);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[49], 0, 2, (DAAL_DATA_TYPE)-1.2829999999999997);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[50], 0, 2, (DAAL_DATA_TYPE)-1.3964999999999999);
    builder.addLeafNode(treeId, nodeIds[51], 0, (DAAL_DATA_TYPE)0.0012186793397579877);
    builder.addLeafNode(treeId, nodeIds[51], 1, (DAAL_DATA_TYPE)-0.01124403613805771);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[50], 1, 10, (DAAL_DATA_TYPE)-1.8379999999999999);
    builder.addLeafNode(treeId, nodeIds[54], 0, (DAAL_DATA_TYPE)-0.0059954549973973868);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)0.0039371956634568052);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[49], 1, 4, (DAAL_DATA_TYPE)1.0155000000000001);
    nodeIds[58] = builder.addSplitNode(treeId, nodeIds[57], 0, 2, (DAAL_DATA_TYPE)1.5225000000000002);
    builder.addLeafNode(treeId, nodeIds[58], 0, (DAAL_DATA_TYPE)0.0014342493689847415);
    builder.addLeafNode(treeId, nodeIds[58], 1, (DAAL_DATA_TYPE)-0.0099578212276101117);
    builder.addLeafNode(treeId, nodeIds[57], 1, (DAAL_DATA_TYPE)-0.0057565780077129605);

}

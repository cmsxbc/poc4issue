 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree108(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 4, (DAAL_DATA_TYPE)1.7245000000000001);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 7, (DAAL_DATA_TYPE)-1.5754999999999997);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 0, (DAAL_DATA_TYPE)1.0205000000000002);
    builder.addLeafNode(treeId, nodeIds[3], 0, (DAAL_DATA_TYPE)0.00033146407925984365);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[3], 1, 13, (DAAL_DATA_TYPE)1.0675000000000001);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 26, (DAAL_DATA_TYPE)1.1055000000000004);
    builder.addLeafNode(treeId, nodeIds[6], 0, (DAAL_DATA_TYPE)-0.0063822866195724125);
    builder.addLeafNode(treeId, nodeIds[6], 1, (DAAL_DATA_TYPE)-0.01778059990278312);
    builder.addLeafNode(treeId, nodeIds[5], 1, (DAAL_DATA_TYPE)0.0010972080632853203);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[2], 1, 0, (DAAL_DATA_TYPE)0.6715000000000001);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[10], 0, 5, (DAAL_DATA_TYPE)0.46450000000000008);
    builder.addLeafNode(treeId, nodeIds[11], 0, (DAAL_DATA_TYPE)-0.0074544533882744436);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[11], 1, 7, (DAAL_DATA_TYPE)-1.1954999999999998);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[13], 0, 24, (DAAL_DATA_TYPE)0.6585000000000002);
    builder.addLeafNode(treeId, nodeIds[14], 0, (DAAL_DATA_TYPE)-0.0070401971997774166);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[14], 1, 6, (DAAL_DATA_TYPE)-1.1384999999999998);
    builder.addLeafNode(treeId, nodeIds[16], 0, (DAAL_DATA_TYPE)0.01650831623002887);
    builder.addLeafNode(treeId, nodeIds[16], 1, (DAAL_DATA_TYPE)0.0033376402592248454);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[13], 1, 21, (DAAL_DATA_TYPE)0.93650000000000022);
    nodeIds[20] = builder.addSplitNode(treeId, nodeIds[19], 0, 25, (DAAL_DATA_TYPE)0.34850000000000003);
    builder.addLeafNode(treeId, nodeIds[20], 0, (DAAL_DATA_TYPE)0.010549432784318925);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[20], 1, 19, (DAAL_DATA_TYPE)1.6045000000000003);
    builder.addLeafNode(treeId, nodeIds[22], 0, (DAAL_DATA_TYPE)-0.00027275268744936801);
    builder.addLeafNode(treeId, nodeIds[22], 1, (DAAL_DATA_TYPE)0.0079037614958360793);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[19], 1, 27, (DAAL_DATA_TYPE)0.73150000000000015);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[25], 0, 14, (DAAL_DATA_TYPE)0.30550000000000005);
    builder.addLeafNode(treeId, nodeIds[26], 0, (DAAL_DATA_TYPE)-0.014043652149848641);
    builder.addLeafNode(treeId, nodeIds[26], 1, (DAAL_DATA_TYPE)-0.00045446194708347325);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[25], 1, 24, (DAAL_DATA_TYPE)0.77650000000000008);
    builder.addLeafNode(treeId, nodeIds[29], 0, (DAAL_DATA_TYPE)0.0032992203840343606);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[29], 1, 13, (DAAL_DATA_TYPE)0.60950000000000004);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[31], 0, 26, (DAAL_DATA_TYPE)0.9295000000000001);
    builder.addLeafNode(treeId, nodeIds[32], 0, (DAAL_DATA_TYPE)-0.001494291295175967);
    builder.addLeafNode(treeId, nodeIds[32], 1, (DAAL_DATA_TYPE)-0.015432224316256389);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[31], 1, 4, (DAAL_DATA_TYPE)-1.0474999999999997);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[35], 0, 15, (DAAL_DATA_TYPE)-0.23249999999999998);
    builder.addLeafNode(treeId, nodeIds[36], 0, (DAAL_DATA_TYPE)0.0013346534029676999);
    builder.addLeafNode(treeId, nodeIds[36], 1, (DAAL_DATA_TYPE)-0.011742623259002966);
    builder.addLeafNode(treeId, nodeIds[35], 1, (DAAL_DATA_TYPE)-0.00024091475271679303);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[10], 1, 1, (DAAL_DATA_TYPE)1.3180000000000003);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[40], 0, 21, (DAAL_DATA_TYPE)0.91150000000000009);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[41], 0, 20, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    builder.addLeafNode(treeId, nodeIds[42], 0, (DAAL_DATA_TYPE)0.0011171938548903066);
    builder.addLeafNode(treeId, nodeIds[42], 1, (DAAL_DATA_TYPE)-0.0017862360066491475);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[41], 1, 4, (DAAL_DATA_TYPE)-0.63249999999999995);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[45], 0, 17, (DAAL_DATA_TYPE)1.5035000000000001);
    builder.addLeafNode(treeId, nodeIds[46], 0, (DAAL_DATA_TYPE)0.003066423648352161);
    builder.addLeafNode(treeId, nodeIds[46], 1, (DAAL_DATA_TYPE)0.0096428405646675902);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[45], 1, 5, (DAAL_DATA_TYPE)0.68250000000000022);
    builder.addLeafNode(treeId, nodeIds[49], 0, (DAAL_DATA_TYPE)0.0044380808371410826);
    builder.addLeafNode(treeId, nodeIds[49], 1, (DAAL_DATA_TYPE)-6.0246501062089652e-05);
    nodeIds[52] = builder.addSplitNode(treeId, nodeIds[40], 1, 5, (DAAL_DATA_TYPE)1.3745000000000003);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[52], 0, 6, (DAAL_DATA_TYPE)0.29550000000000004);
    builder.addLeafNode(treeId, nodeIds[53], 0, (DAAL_DATA_TYPE)-0.0086445316367854304);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[53], 1, 15, (DAAL_DATA_TYPE)0.80350000000000021);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[55], 0, 24, (DAAL_DATA_TYPE)0.96850000000000003);
    builder.addLeafNode(treeId, nodeIds[56], 0, (DAAL_DATA_TYPE)-0.0082117684380338899);
    builder.addLeafNode(treeId, nodeIds[56], 1, (DAAL_DATA_TYPE)0.0025718629631834729);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)0.0073964025729741818);
    builder.addLeafNode(treeId, nodeIds[52], 1, (DAAL_DATA_TYPE)0.0056902500649763125);
    builder.addLeafNode(treeId, nodeIds[1], 1, (DAAL_DATA_TYPE)-0.0068941821539474108);

}

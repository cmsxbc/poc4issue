 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree18(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 25, (DAAL_DATA_TYPE)1.2115000000000002);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 25, (DAAL_DATA_TYPE)0.59250000000000014);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 27, (DAAL_DATA_TYPE)0.83850000000000013);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 0, (DAAL_DATA_TYPE)0.9425);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 27, (DAAL_DATA_TYPE)0.81650000000000011);
    builder.addLeafNode(treeId, nodeIds[5], 0, (DAAL_DATA_TYPE)-0.0058302695194228753);
    builder.addLeafNode(treeId, nodeIds[5], 1, (DAAL_DATA_TYPE)0.012270529016300484);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[4], 1, 24, (DAAL_DATA_TYPE)0.94450000000000001);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[8], 0, 26, (DAAL_DATA_TYPE)0.55900000000000016);
    builder.addLeafNode(treeId, nodeIds[9], 0, (DAAL_DATA_TYPE)0.01667651968697707);
    builder.addLeafNode(treeId, nodeIds[9], 1, (DAAL_DATA_TYPE)-0.00026268532394238238);
    builder.addLeafNode(treeId, nodeIds[8], 1, (DAAL_DATA_TYPE)0.015345899931022101);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[3], 1, 5, (DAAL_DATA_TYPE)1.5755000000000001);
    builder.addLeafNode(treeId, nodeIds[13], 0, (DAAL_DATA_TYPE)-0.0071996812589132965);
    builder.addLeafNode(treeId, nodeIds[13], 1, (DAAL_DATA_TYPE)0.0057562747676121566);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[2], 1, 5, (DAAL_DATA_TYPE)0.88150000000000006);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[16], 0, 25, (DAAL_DATA_TYPE)0.96550000000000014);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[17], 0, 26, (DAAL_DATA_TYPE)0.76750000000000018);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[18], 0, 22, (DAAL_DATA_TYPE)1.0735000000000003);
    builder.addLeafNode(treeId, nodeIds[19], 0, (DAAL_DATA_TYPE)-0.0054052928315220976);
    builder.addLeafNode(treeId, nodeIds[19], 1, (DAAL_DATA_TYPE)0.010036312946767519);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[18], 1, 21, (DAAL_DATA_TYPE)1.0775000000000003);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[22], 0, 9, (DAAL_DATA_TYPE)1.0875000000000001);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[23], 0, 27, (DAAL_DATA_TYPE)0.90450000000000019);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[24], 0, 17, (DAAL_DATA_TYPE)1.6115000000000002);
    builder.addLeafNode(treeId, nodeIds[25], 0, (DAAL_DATA_TYPE)0.0048074277299853226);
    builder.addLeafNode(treeId, nodeIds[25], 1, (DAAL_DATA_TYPE)0.017314313963437692);
    builder.addLeafNode(treeId, nodeIds[24], 1, (DAAL_DATA_TYPE)-0.001263729938955018);
    builder.addLeafNode(treeId, nodeIds[23], 1, (DAAL_DATA_TYPE)0.011351888154338047);
    builder.addLeafNode(treeId, nodeIds[22], 1, (DAAL_DATA_TYPE)-0.003485103377274105);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[17], 1, 26, (DAAL_DATA_TYPE)0.88650000000000018);
    builder.addLeafNode(treeId, nodeIds[31], 0, (DAAL_DATA_TYPE)-0.0093769997455082944);
    builder.addLeafNode(treeId, nodeIds[31], 1, (DAAL_DATA_TYPE)-0.0010747504060285805);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[16], 1, 0, (DAAL_DATA_TYPE)1.7125000000000001);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[34], 0, 27, (DAAL_DATA_TYPE)1.2915000000000003);
    builder.addLeafNode(treeId, nodeIds[35], 0, (DAAL_DATA_TYPE)0.0069068717286109166);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[35], 1, 5, (DAAL_DATA_TYPE)2.0505000000000004);
    builder.addLeafNode(treeId, nodeIds[37], 0, (DAAL_DATA_TYPE)-0.0023792632042415559);
    builder.addLeafNode(treeId, nodeIds[37], 1, (DAAL_DATA_TYPE)0.015533906842271487);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[34], 1, 24, (DAAL_DATA_TYPE)0.6665000000000002);
    builder.addLeafNode(treeId, nodeIds[40], 0, (DAAL_DATA_TYPE)0.015657129697501659);
    builder.addLeafNode(treeId, nodeIds[40], 1, (DAAL_DATA_TYPE)-0.0045105041441868762);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[1], 1, 24, (DAAL_DATA_TYPE)1.3295000000000001);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[43], 0, 27, (DAAL_DATA_TYPE)0.97750000000000015);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[44], 0, 15, (DAAL_DATA_TYPE)-1.4964999999999999);
    builder.addLeafNode(treeId, nodeIds[45], 0, (DAAL_DATA_TYPE)0.014424788157145183);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[45], 1, 22, (DAAL_DATA_TYPE)1.0885000000000002);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[47], 0, 21, (DAAL_DATA_TYPE)0.57350000000000001);
    builder.addLeafNode(treeId, nodeIds[48], 0, (DAAL_DATA_TYPE)0.0069575060068107243);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[48], 1, 21, (DAAL_DATA_TYPE)1.0925000000000002);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[50], 0, 17, (DAAL_DATA_TYPE)0.70250000000000001);
    builder.addLeafNode(treeId, nodeIds[51], 0, (DAAL_DATA_TYPE)-0.015486587682268122);
    builder.addLeafNode(treeId, nodeIds[51], 1, (DAAL_DATA_TYPE)-0.0063489327780329261);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[50], 1, 26, (DAAL_DATA_TYPE)1.0065000000000002);
    builder.addLeafNode(treeId, nodeIds[54], 0, (DAAL_DATA_TYPE)0.01650036470248149);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)-0.0089707602560520176);
    builder.addLeafNode(treeId, nodeIds[47], 1, (DAAL_DATA_TYPE)0.0070047044367701917);
    builder.addLeafNode(treeId, nodeIds[44], 1, (DAAL_DATA_TYPE)-0.0099194004400960933);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[43], 1, 11, (DAAL_DATA_TYPE)-0.94399999999999984);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)0.007355739265235502);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)-0.0033770508814656565);

}

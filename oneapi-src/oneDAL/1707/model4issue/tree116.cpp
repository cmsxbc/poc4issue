 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree116(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 18, (DAAL_DATA_TYPE)-0.05849999999999999);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 2, (DAAL_DATA_TYPE)1.7240000000000004);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 27, (DAAL_DATA_TYPE)0.62050000000000016);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 19, (DAAL_DATA_TYPE)0.74050000000000005);
    builder.addLeafNode(treeId, nodeIds[4], 0, (DAAL_DATA_TYPE)-0.0011661566655944897);
    builder.addLeafNode(treeId, nodeIds[4], 1, (DAAL_DATA_TYPE)-0.012007903395330206);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[3], 1, 4, (DAAL_DATA_TYPE)-1.6224999999999998);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 18, (DAAL_DATA_TYPE)-0.65849999999999997);
    builder.addLeafNode(treeId, nodeIds[8], 0, (DAAL_DATA_TYPE)0.00031569456817427032);
    builder.addLeafNode(treeId, nodeIds[8], 1, (DAAL_DATA_TYPE)0.0096661644408831734);
    builder.addLeafNode(treeId, nodeIds[7], 1, (DAAL_DATA_TYPE)-0.00084982066355662419);
    builder.addLeafNode(treeId, nodeIds[2], 1, (DAAL_DATA_TYPE)0.0082474136725068092);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[1], 1, 25, (DAAL_DATA_TYPE)1.5165000000000002);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[13], 0, 7, (DAAL_DATA_TYPE)1.3160000000000001);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[14], 0, 27, (DAAL_DATA_TYPE)0.70350000000000013);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[15], 0, 22, (DAAL_DATA_TYPE)1.0915000000000001);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[16], 0, 2, (DAAL_DATA_TYPE)-1.4984999999999997);
    builder.addLeafNode(treeId, nodeIds[17], 0, (DAAL_DATA_TYPE)0.011336101296668252);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[17], 1, 9, (DAAL_DATA_TYPE)0.82350000000000001);
    nodeIds[20] = builder.addSplitNode(treeId, nodeIds[19], 0, 18, (DAAL_DATA_TYPE)0.33550000000000008);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[20], 0, 11, (DAAL_DATA_TYPE)-0.13649999999999998);
    builder.addLeafNode(treeId, nodeIds[21], 0, (DAAL_DATA_TYPE)0.011337840634173361);
    builder.addLeafNode(treeId, nodeIds[21], 1, (DAAL_DATA_TYPE)-0.0018034517765045167);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[20], 1, 11, (DAAL_DATA_TYPE)0.098500000000000018);
    builder.addLeafNode(treeId, nodeIds[24], 0, (DAAL_DATA_TYPE)-0.0075248624877752484);
    builder.addLeafNode(treeId, nodeIds[24], 1, (DAAL_DATA_TYPE)0.0015778893175033425);
    builder.addLeafNode(treeId, nodeIds[19], 1, (DAAL_DATA_TYPE)0.0056484295463521189);
    builder.addLeafNode(treeId, nodeIds[16], 1, (DAAL_DATA_TYPE)0.013172212172122229);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[15], 1, 10, (DAAL_DATA_TYPE)-1.0264999999999997);
    nodeIds[30] = builder.addSplitNode(treeId, nodeIds[29], 0, 11, (DAAL_DATA_TYPE)-1.1194999999999997);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[30], 0, 25, (DAAL_DATA_TYPE)0.90350000000000008);
    builder.addLeafNode(treeId, nodeIds[31], 0, (DAAL_DATA_TYPE)-0.005739673817979879);
    builder.addLeafNode(treeId, nodeIds[31], 1, (DAAL_DATA_TYPE)-0.019904810320585969);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[30], 1, 19, (DAAL_DATA_TYPE)0.93750000000000011);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[34], 0, 5, (DAAL_DATA_TYPE)0.88150000000000006);
    builder.addLeafNode(treeId, nodeIds[35], 0, (DAAL_DATA_TYPE)-0.0092828492122426845);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[35], 1, 6, (DAAL_DATA_TYPE)0.098500000000000018);
    builder.addLeafNode(treeId, nodeIds[37], 0, (DAAL_DATA_TYPE)0.0055300723188944781);
    builder.addLeafNode(treeId, nodeIds[37], 1, (DAAL_DATA_TYPE)-0.0037598974647976104);
    builder.addLeafNode(treeId, nodeIds[34], 1, (DAAL_DATA_TYPE)0.0069954768109780092);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[29], 1, 27, (DAAL_DATA_TYPE)0.71350000000000013);
    builder.addLeafNode(treeId, nodeIds[41], 0, (DAAL_DATA_TYPE)-0.0072501936448471889);
    builder.addLeafNode(treeId, nodeIds[41], 1, (DAAL_DATA_TYPE)0.00061642136229775595);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[14], 1, 25, (DAAL_DATA_TYPE)1.2615000000000001);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[44], 0, 2, (DAAL_DATA_TYPE)1.1325000000000001);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[45], 0, 1, (DAAL_DATA_TYPE)1.1045000000000003);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[46], 0, 10, (DAAL_DATA_TYPE)1.1615000000000002);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[47], 0, 13, (DAAL_DATA_TYPE)0.52250000000000008);
    builder.addLeafNode(treeId, nodeIds[48], 0, (DAAL_DATA_TYPE)0.01030317743619283);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[48], 1, 5, (DAAL_DATA_TYPE)0.60750000000000004);
    builder.addLeafNode(treeId, nodeIds[50], 0, (DAAL_DATA_TYPE)-0.0066453180883241734);
    builder.addLeafNode(treeId, nodeIds[50], 1, (DAAL_DATA_TYPE)0.003343861543816393);
    builder.addLeafNode(treeId, nodeIds[47], 1, (DAAL_DATA_TYPE)0.012636522640442028);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[46], 1, 1, (DAAL_DATA_TYPE)1.5310000000000004);
    builder.addLeafNode(treeId, nodeIds[54], 0, (DAAL_DATA_TYPE)-0.010559337450699374);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)0.0052159180492162708);
    builder.addLeafNode(treeId, nodeIds[45], 1, (DAAL_DATA_TYPE)-0.0075725464615970855);
    builder.addLeafNode(treeId, nodeIds[44], 1, (DAAL_DATA_TYPE)0.016851865446993283);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[13], 1, 18, (DAAL_DATA_TYPE)0.33550000000000008);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)-0.0063852721491612771);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)-0.00061497859876706367);

}

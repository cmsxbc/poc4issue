 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree66(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 9, (DAAL_DATA_TYPE)0.90350000000000008);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 9, (DAAL_DATA_TYPE)0.70250000000000001);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 26, (DAAL_DATA_TYPE)0.99350000000000016);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 3, (DAAL_DATA_TYPE)0.45550000000000007);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 0, (DAAL_DATA_TYPE)0.98850000000000005);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 7, (DAAL_DATA_TYPE)0.9195000000000001);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[6], 0, 6, (DAAL_DATA_TYPE)-0.51849999999999985);
    builder.addLeafNode(treeId, nodeIds[7], 0, (DAAL_DATA_TYPE)-0.0057195227423852144);
    builder.addLeafNode(treeId, nodeIds[7], 1, (DAAL_DATA_TYPE)0.0092810896140607928);
    builder.addLeafNode(treeId, nodeIds[6], 1, (DAAL_DATA_TYPE)0.018358918408984723);
    builder.addLeafNode(treeId, nodeIds[5], 1, (DAAL_DATA_TYPE)0.00045035729893076596);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[4], 1, 1, (DAAL_DATA_TYPE)0.89550000000000007);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[12], 0, 25, (DAAL_DATA_TYPE)1.2185000000000004);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[13], 0, 24, (DAAL_DATA_TYPE)1.2215000000000003);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[14], 0, 5, (DAAL_DATA_TYPE)0.39950000000000008);
    builder.addLeafNode(treeId, nodeIds[15], 0, (DAAL_DATA_TYPE)-0.0082486306685347881);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[15], 1, 21, (DAAL_DATA_TYPE)0.79950000000000021);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[17], 0, 26, (DAAL_DATA_TYPE)0.74950000000000017);
    builder.addLeafNode(treeId, nodeIds[18], 0, (DAAL_DATA_TYPE)-0.0072839457914233218);
    nodeIds[20] = builder.addSplitNode(treeId, nodeIds[18], 1, 10, (DAAL_DATA_TYPE)-1.3779999999999999);
    builder.addLeafNode(treeId, nodeIds[20], 0, (DAAL_DATA_TYPE)-0.012130388598889113);
    builder.addLeafNode(treeId, nodeIds[20], 1, (DAAL_DATA_TYPE)0.0035283730238676071);
    builder.addLeafNode(treeId, nodeIds[17], 1, (DAAL_DATA_TYPE)0.0024584211669862275);
    builder.addLeafNode(treeId, nodeIds[14], 1, (DAAL_DATA_TYPE)-0.0085331218110190499);
    builder.addLeafNode(treeId, nodeIds[13], 1, (DAAL_DATA_TYPE)-0.011789658305973843);
    builder.addLeafNode(treeId, nodeIds[12], 1, (DAAL_DATA_TYPE)-0.0057824271979141188);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[3], 1, 24, (DAAL_DATA_TYPE)1.9665000000000001);
    builder.addLeafNode(treeId, nodeIds[27], 0, (DAAL_DATA_TYPE)0.0032727646310223451);
    builder.addLeafNode(treeId, nodeIds[27], 1, (DAAL_DATA_TYPE)-0.011067918408662081);
    nodeIds[30] = builder.addSplitNode(treeId, nodeIds[2], 1, 25, (DAAL_DATA_TYPE)0.32150000000000006);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[30], 0, 7, (DAAL_DATA_TYPE)-0.39849999999999997);
    builder.addLeafNode(treeId, nodeIds[31], 0, (DAAL_DATA_TYPE)-0.0011949713741030014);
    builder.addLeafNode(treeId, nodeIds[31], 1, (DAAL_DATA_TYPE)0.017819260839711536);
    builder.addLeafNode(treeId, nodeIds[30], 1, (DAAL_DATA_TYPE)-0.0025070317108600608);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[1], 1, 25, (DAAL_DATA_TYPE)1.8325000000000002);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[35], 0, 15, (DAAL_DATA_TYPE)-0.18399999999999997);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[36], 0, 21, (DAAL_DATA_TYPE)1.2185000000000004);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[37], 0, 24, (DAAL_DATA_TYPE)1.2485000000000002);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[38], 0, 27, (DAAL_DATA_TYPE)0.72050000000000003);
    builder.addLeafNode(treeId, nodeIds[39], 0, (DAAL_DATA_TYPE)0.007773455969758869);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[39], 1, 4, (DAAL_DATA_TYPE)1.2045000000000001);
    builder.addLeafNode(treeId, nodeIds[41], 0, (DAAL_DATA_TYPE)0.0023770549686462487);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[41], 1, 27, (DAAL_DATA_TYPE)0.92250000000000021);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[43], 0, 18, (DAAL_DATA_TYPE)-0.44949999999999996);
    builder.addLeafNode(treeId, nodeIds[44], 0, (DAAL_DATA_TYPE)-0.0087380243930965662);
    builder.addLeafNode(treeId, nodeIds[44], 1, (DAAL_DATA_TYPE)0.0058804744334761492);
    builder.addLeafNode(treeId, nodeIds[43], 1, (DAAL_DATA_TYPE)-0.012295366374447066);
    builder.addLeafNode(treeId, nodeIds[38], 1, (DAAL_DATA_TYPE)0.0075107708113428991);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[37], 1, 5, (DAAL_DATA_TYPE)1.1575000000000002);
    builder.addLeafNode(treeId, nodeIds[49], 0, (DAAL_DATA_TYPE)-0.0055548152049719277);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[49], 1, 27, (DAAL_DATA_TYPE)1.397);
    builder.addLeafNode(treeId, nodeIds[51], 0, (DAAL_DATA_TYPE)0.007720733878522879);
    builder.addLeafNode(treeId, nodeIds[51], 1, (DAAL_DATA_TYPE)-0.0040642451998349786);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[36], 1, 15, (DAAL_DATA_TYPE)0.12700000000000003);
    builder.addLeafNode(treeId, nodeIds[54], 0, (DAAL_DATA_TYPE)-0.0032556331599013764);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)0.00071509404359078625);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[35], 1, 10, (DAAL_DATA_TYPE)0.85850000000000015);
    builder.addLeafNode(treeId, nodeIds[57], 0, (DAAL_DATA_TYPE)-0.0048335922761478635);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[57], 1, 25, (DAAL_DATA_TYPE)2.1950000000000007);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)0.014885323103922217);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)-0.0023921326460207212);

}

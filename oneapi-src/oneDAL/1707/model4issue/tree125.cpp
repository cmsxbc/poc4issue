 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree125(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 24, (DAAL_DATA_TYPE)1.0755000000000001);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 18, (DAAL_DATA_TYPE)0.21850000000000003);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 24, (DAAL_DATA_TYPE)1.0675000000000001);
    builder.addLeafNode(treeId, nodeIds[3], 0, (DAAL_DATA_TYPE)-0.00075085799463591666);
    builder.addLeafNode(treeId, nodeIds[3], 1, (DAAL_DATA_TYPE)-0.010028864326886834);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[2], 1, 10, (DAAL_DATA_TYPE)-0.47449999999999992);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[6], 0, 13, (DAAL_DATA_TYPE)0.81050000000000011);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 24, (DAAL_DATA_TYPE)0.60750000000000004);
    builder.addLeafNode(treeId, nodeIds[8], 0, (DAAL_DATA_TYPE)0.0055276964977383622);
    builder.addLeafNode(treeId, nodeIds[8], 1, (DAAL_DATA_TYPE)-0.005430150075222958);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[7], 1, 3, (DAAL_DATA_TYPE)0.73550000000000015);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[11], 0, 22, (DAAL_DATA_TYPE)0.9125000000000002);
    builder.addLeafNode(treeId, nodeIds[12], 0, (DAAL_DATA_TYPE)-0.011559155900031329);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[12], 1, 2, (DAAL_DATA_TYPE)-1.0084999999999997);
    builder.addLeafNode(treeId, nodeIds[14], 0, (DAAL_DATA_TYPE)0.0076744804836132319);
    builder.addLeafNode(treeId, nodeIds[14], 1, (DAAL_DATA_TYPE)-0.0040214007339355621);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[11], 1, 18, (DAAL_DATA_TYPE)0.71350000000000013);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[17], 0, 0, (DAAL_DATA_TYPE)0.53450000000000009);
    builder.addLeafNode(treeId, nodeIds[18], 0, (DAAL_DATA_TYPE)-5.1598689918007174e-05);
    builder.addLeafNode(treeId, nodeIds[18], 1, (DAAL_DATA_TYPE)0.01162529055592279);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[17], 1, 11, (DAAL_DATA_TYPE)0.5375000000000002);
    builder.addLeafNode(treeId, nodeIds[21], 0, (DAAL_DATA_TYPE)-0.0048484222139590066);
    builder.addLeafNode(treeId, nodeIds[21], 1, (DAAL_DATA_TYPE)0.0064341094090857301);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[6], 1, 21, (DAAL_DATA_TYPE)1.5685000000000002);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[24], 0, 13, (DAAL_DATA_TYPE)0.9085000000000002);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[25], 0, 4, (DAAL_DATA_TYPE)0.86550000000000005);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[26], 0, 15, (DAAL_DATA_TYPE)0.77850000000000008);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[27], 0, 0, (DAAL_DATA_TYPE)0.53850000000000009);
    builder.addLeafNode(treeId, nodeIds[28], 0, (DAAL_DATA_TYPE)-0.0013421995754195554);
    nodeIds[30] = builder.addSplitNode(treeId, nodeIds[28], 1, 0, (DAAL_DATA_TYPE)0.64750000000000008);
    builder.addLeafNode(treeId, nodeIds[30], 0, (DAAL_DATA_TYPE)0.016584702829519907);
    builder.addLeafNode(treeId, nodeIds[30], 1, (DAAL_DATA_TYPE)0.0046202521098793704);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[27], 1, 13, (DAAL_DATA_TYPE)0.74050000000000005);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[33], 0, 5, (DAAL_DATA_TYPE)0.93450000000000022);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[34], 0, 3, (DAAL_DATA_TYPE)0.88750000000000007);
    builder.addLeafNode(treeId, nodeIds[35], 0, (DAAL_DATA_TYPE)-0.0041107466444373136);
    builder.addLeafNode(treeId, nodeIds[35], 1, (DAAL_DATA_TYPE)-0.016066374759311261);
    builder.addLeafNode(treeId, nodeIds[34], 1, (DAAL_DATA_TYPE)0.0057618880543757129);
    builder.addLeafNode(treeId, nodeIds[33], 1, (DAAL_DATA_TYPE)0.006627254971768708);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[26], 1, 2, (DAAL_DATA_TYPE)0.59600000000000009);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[40], 0, 14, (DAAL_DATA_TYPE)1.0765000000000002);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[41], 0, 18, (DAAL_DATA_TYPE)0.93150000000000011);
    builder.addLeafNode(treeId, nodeIds[42], 0, (DAAL_DATA_TYPE)0.005960601976802273);
    builder.addLeafNode(treeId, nodeIds[42], 1, (DAAL_DATA_TYPE)-0.0068601342042287202);
    builder.addLeafNode(treeId, nodeIds[41], 1, (DAAL_DATA_TYPE)-0.014102948003489039);
    builder.addLeafNode(treeId, nodeIds[40], 1, (DAAL_DATA_TYPE)0.0044464752310886977);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[25], 1, 18, (DAAL_DATA_TYPE)1.4295000000000002);
    builder.addLeafNode(treeId, nodeIds[47], 0, (DAAL_DATA_TYPE)0.00065020454235084515);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[47], 1, 7, (DAAL_DATA_TYPE)0.58350000000000002);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[49], 0, 11, (DAAL_DATA_TYPE)0.11150000000000002);
    builder.addLeafNode(treeId, nodeIds[50], 0, (DAAL_DATA_TYPE)-0.016734371090499352);
    builder.addLeafNode(treeId, nodeIds[50], 1, (DAAL_DATA_TYPE)-0.0019706105606423483);
    builder.addLeafNode(treeId, nodeIds[49], 1, (DAAL_DATA_TYPE)-0.00014684568469723068);
    builder.addLeafNode(treeId, nodeIds[24], 1, (DAAL_DATA_TYPE)0.0067304329434409744);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[1], 1, 5, (DAAL_DATA_TYPE)0.41850000000000004);
    builder.addLeafNode(treeId, nodeIds[55], 0, (DAAL_DATA_TYPE)0.0085264875700599273);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[55], 1, 21, (DAAL_DATA_TYPE)1.2310000000000001);
    builder.addLeafNode(treeId, nodeIds[57], 0, (DAAL_DATA_TYPE)0.0011444764969551083);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[57], 1, 17, (DAAL_DATA_TYPE)0.49050000000000005);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)0.0089971471577882777);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)-0.0021402816619342248);

}

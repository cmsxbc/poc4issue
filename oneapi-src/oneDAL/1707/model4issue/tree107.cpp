 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree107(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 4, (DAAL_DATA_TYPE)1.7245000000000001);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 18, (DAAL_DATA_TYPE)-0.63249999999999995);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 1, (DAAL_DATA_TYPE)0.33550000000000008);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 24, (DAAL_DATA_TYPE)1.4355000000000002);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 3, (DAAL_DATA_TYPE)0.47250000000000003);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 11, (DAAL_DATA_TYPE)-1.3074999999999999);
    builder.addLeafNode(treeId, nodeIds[6], 0, (DAAL_DATA_TYPE)0.015103274158069066);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[6], 1, 1, (DAAL_DATA_TYPE)-1.0874999999999997);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[8], 0, 6, (DAAL_DATA_TYPE)-0.85249999999999992);
    builder.addLeafNode(treeId, nodeIds[9], 0, (DAAL_DATA_TYPE)0.0039517729904036975);
    builder.addLeafNode(treeId, nodeIds[9], 1, (DAAL_DATA_TYPE)-0.01002549841519325);
    builder.addLeafNode(treeId, nodeIds[8], 1, (DAAL_DATA_TYPE)0.0044904737784606163);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[5], 1, 24, (DAAL_DATA_TYPE)0.68350000000000011);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[13], 0, 26, (DAAL_DATA_TYPE)0.87350000000000005);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[14], 0, 26, (DAAL_DATA_TYPE)0.74650000000000005);
    builder.addLeafNode(treeId, nodeIds[15], 0, (DAAL_DATA_TYPE)-0.0054605568801476198);
    builder.addLeafNode(treeId, nodeIds[15], 1, (DAAL_DATA_TYPE)-0.018903939527544111);
    builder.addLeafNode(treeId, nodeIds[14], 1, (DAAL_DATA_TYPE)0.00027614147169515492);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[13], 1, 24, (DAAL_DATA_TYPE)0.75750000000000017);
    builder.addLeafNode(treeId, nodeIds[19], 0, (DAAL_DATA_TYPE)0.0053181110322475435);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[19], 1, 3, (DAAL_DATA_TYPE)1.2205000000000001);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[21], 0, 23, (DAAL_DATA_TYPE)1.1595000000000002);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[22], 0, 3, (DAAL_DATA_TYPE)1.1345000000000003);
    builder.addLeafNode(treeId, nodeIds[23], 0, (DAAL_DATA_TYPE)-0.0027727993025971382);
    builder.addLeafNode(treeId, nodeIds[23], 1, (DAAL_DATA_TYPE)-0.014955226260991323);
    builder.addLeafNode(treeId, nodeIds[22], 1, (DAAL_DATA_TYPE)0.0038161111786715034);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[21], 1, 17, (DAAL_DATA_TYPE)0.82850000000000013);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[27], 0, 22, (DAAL_DATA_TYPE)0.97350000000000014);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[28], 0, 22, (DAAL_DATA_TYPE)0.80150000000000021);
    builder.addLeafNode(treeId, nodeIds[29], 0, (DAAL_DATA_TYPE)0.0098846605190863988);
    builder.addLeafNode(treeId, nodeIds[29], 1, (DAAL_DATA_TYPE)-0.0034826728392063698);
    builder.addLeafNode(treeId, nodeIds[28], 1, (DAAL_DATA_TYPE)0.013326081557151599);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[27], 1, 1, (DAAL_DATA_TYPE)-0.44549999999999995);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[33], 0, 7, (DAAL_DATA_TYPE)-0.79749999999999999);
    builder.addLeafNode(treeId, nodeIds[34], 0, (DAAL_DATA_TYPE)0.0024538540188223123);
    builder.addLeafNode(treeId, nodeIds[34], 1, (DAAL_DATA_TYPE)-0.012941548030357809);
    builder.addLeafNode(treeId, nodeIds[33], 1, (DAAL_DATA_TYPE)0.0029421903261983838);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[4], 1, 5, (DAAL_DATA_TYPE)1.5970000000000002);
    builder.addLeafNode(treeId, nodeIds[38], 0, (DAAL_DATA_TYPE)0.0080999344354495406);
    builder.addLeafNode(treeId, nodeIds[38], 1, (DAAL_DATA_TYPE)-0.0033454883986940749);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[3], 1, 0, (DAAL_DATA_TYPE)1.2355000000000003);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[41], 0, 3, (DAAL_DATA_TYPE)1.4275000000000002);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[42], 0, 10, (DAAL_DATA_TYPE)0.012500000000000002);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[43], 0, 6, (DAAL_DATA_TYPE)-0.097499999999999989);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[44], 0, 6, (DAAL_DATA_TYPE)-0.52949999999999997);
    builder.addLeafNode(treeId, nodeIds[45], 0, (DAAL_DATA_TYPE)-0.0049047567627646706);
    builder.addLeafNode(treeId, nodeIds[45], 1, (DAAL_DATA_TYPE)0.010134922200813891);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[44], 1, 15, (DAAL_DATA_TYPE)0.7915000000000002);
    builder.addLeafNode(treeId, nodeIds[48], 0, (DAAL_DATA_TYPE)-0.011362643953475913);
    builder.addLeafNode(treeId, nodeIds[48], 1, (DAAL_DATA_TYPE)0.0023779813877560876);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[43], 1, 21, (DAAL_DATA_TYPE)0.92250000000000021);
    nodeIds[52] = builder.addSplitNode(treeId, nodeIds[51], 0, 7, (DAAL_DATA_TYPE)-0.088499999999999981);
    builder.addLeafNode(treeId, nodeIds[52], 0, (DAAL_DATA_TYPE)0.0061551460634089181);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[52], 1, 19, (DAAL_DATA_TYPE)-0.36249999999999993);
    builder.addLeafNode(treeId, nodeIds[54], 0, (DAAL_DATA_TYPE)0.001526627980172634);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)-0.014505323310467331);
    builder.addLeafNode(treeId, nodeIds[51], 1, (DAAL_DATA_TYPE)0.0071644985303282744);
    builder.addLeafNode(treeId, nodeIds[42], 1, (DAAL_DATA_TYPE)-0.0083715918603047609);
    builder.addLeafNode(treeId, nodeIds[41], 1, (DAAL_DATA_TYPE)-0.0085206039272892626);
    builder.addLeafNode(treeId, nodeIds[2], 1, (DAAL_DATA_TYPE)0.00049562739749052422);
    builder.addLeafNode(treeId, nodeIds[1], 1, (DAAL_DATA_TYPE)-0.0072570339145679634);

}

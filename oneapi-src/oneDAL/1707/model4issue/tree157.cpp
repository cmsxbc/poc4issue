 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree157(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 18, (DAAL_DATA_TYPE)-2.0784999999999996);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 25, (DAAL_DATA_TYPE)1.3245000000000002);
    builder.addLeafNode(treeId, nodeIds[2], 0, (DAAL_DATA_TYPE)0.0054482605340408878);
    builder.addLeafNode(treeId, nodeIds[2], 1, (DAAL_DATA_TYPE)-0.0040351643493132935);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[1], 1, 24, (DAAL_DATA_TYPE)0.64150000000000007);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 7, (DAAL_DATA_TYPE)1.5615000000000003);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[6], 0, 4, (DAAL_DATA_TYPE)0.21250000000000002);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 5, (DAAL_DATA_TYPE)1.1275000000000002);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[8], 0, 5, (DAAL_DATA_TYPE)0.77450000000000008);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[9], 0, 16, (DAAL_DATA_TYPE)1.9110000000000003);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[10], 0, 22, (DAAL_DATA_TYPE)0.9125000000000002);
    builder.addLeafNode(treeId, nodeIds[11], 0, (DAAL_DATA_TYPE)0.010496272759572153);
    builder.addLeafNode(treeId, nodeIds[11], 1, (DAAL_DATA_TYPE)-5.3364081451526052e-05);
    builder.addLeafNode(treeId, nodeIds[10], 1, (DAAL_DATA_TYPE)-0.0054139106128460327);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[9], 1, 2, (DAAL_DATA_TYPE)0.80950000000000022);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[15], 0, 24, (DAAL_DATA_TYPE)0.55950000000000022);
    builder.addLeafNode(treeId, nodeIds[16], 0, (DAAL_DATA_TYPE)-0.0082160712400030696);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[16], 1, 21, (DAAL_DATA_TYPE)0.87450000000000017);
    builder.addLeafNode(treeId, nodeIds[18], 0, (DAAL_DATA_TYPE)-0.0017844169802794406);
    builder.addLeafNode(treeId, nodeIds[18], 1, (DAAL_DATA_TYPE)0.0090489943238461143);
    builder.addLeafNode(treeId, nodeIds[15], 1, (DAAL_DATA_TYPE)-0.014553841225931358);
    builder.addLeafNode(treeId, nodeIds[8], 1, (DAAL_DATA_TYPE)0.0048367229509217995);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[7], 1, 3, (DAAL_DATA_TYPE)0.42750000000000005);
    builder.addLeafNode(treeId, nodeIds[23], 0, (DAAL_DATA_TYPE)0.0072063257496449212);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[23], 1, 22, (DAAL_DATA_TYPE)0.93050000000000022);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[25], 0, 11, (DAAL_DATA_TYPE)-0.61449999999999994);
    builder.addLeafNode(treeId, nodeIds[26], 0, (DAAL_DATA_TYPE)-0.00034764336333388372);
    builder.addLeafNode(treeId, nodeIds[26], 1, (DAAL_DATA_TYPE)0.010543952254331947);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[25], 1, 14, (DAAL_DATA_TYPE)0.078500000000000014);
    nodeIds[30] = builder.addSplitNode(treeId, nodeIds[29], 0, 11, (DAAL_DATA_TYPE)-0.045499999999999992);
    builder.addLeafNode(treeId, nodeIds[30], 0, (DAAL_DATA_TYPE)-0.0024474807382960408);
    builder.addLeafNode(treeId, nodeIds[30], 1, (DAAL_DATA_TYPE)0.0075016117693545922);
    builder.addLeafNode(treeId, nodeIds[29], 1, (DAAL_DATA_TYPE)-0.0060754973356696692);
    builder.addLeafNode(treeId, nodeIds[6], 1, (DAAL_DATA_TYPE)0.011077304439538201);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[5], 1, 2, (DAAL_DATA_TYPE)-1.5444999999999998);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[35], 0, 1, (DAAL_DATA_TYPE)1.2215000000000003);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[36], 0, 17, (DAAL_DATA_TYPE)1.6815000000000002);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[37], 0, 5, (DAAL_DATA_TYPE)0.57750000000000001);
    builder.addLeafNode(treeId, nodeIds[38], 0, (DAAL_DATA_TYPE)-0.0064808803133484796);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[38], 1, 9, (DAAL_DATA_TYPE)1.4585000000000001);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[40], 0, 21, (DAAL_DATA_TYPE)0.87250000000000016);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[41], 0, 2, (DAAL_DATA_TYPE)-1.6174999999999999);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[42], 0, 15, (DAAL_DATA_TYPE)0.5415000000000002);
    builder.addLeafNode(treeId, nodeIds[43], 0, (DAAL_DATA_TYPE)0.0085647351906767907);
    builder.addLeafNode(treeId, nodeIds[43], 1, (DAAL_DATA_TYPE)-0.0023036920687272435);
    builder.addLeafNode(treeId, nodeIds[42], 1, (DAAL_DATA_TYPE)-0.0077602707780897624);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[41], 1, 5, (DAAL_DATA_TYPE)0.80150000000000021);
    builder.addLeafNode(treeId, nodeIds[47], 0, (DAAL_DATA_TYPE)0.011965696712334953);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[47], 1, 0, (DAAL_DATA_TYPE)0.89350000000000007);
    builder.addLeafNode(treeId, nodeIds[49], 0, (DAAL_DATA_TYPE)-0.0053764110350090523);
    builder.addLeafNode(treeId, nodeIds[49], 1, (DAAL_DATA_TYPE)0.008920195636649926);
    builder.addLeafNode(treeId, nodeIds[40], 1, (DAAL_DATA_TYPE)-0.0064307371415197852);
    builder.addLeafNode(treeId, nodeIds[37], 1, (DAAL_DATA_TYPE)-0.013067046790383757);
    builder.addLeafNode(treeId, nodeIds[36], 1, (DAAL_DATA_TYPE)-0.0092165108406689119);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[35], 1, 5, (DAAL_DATA_TYPE)0.41850000000000004);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[55], 0, 22, (DAAL_DATA_TYPE)0.92850000000000021);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[56], 0, 6, (DAAL_DATA_TYPE)-1.0064999999999997);
    builder.addLeafNode(treeId, nodeIds[57], 0, (DAAL_DATA_TYPE)0.0079078835124770808);
    builder.addLeafNode(treeId, nodeIds[57], 1, (DAAL_DATA_TYPE)-0.0041281427190239936);
    builder.addLeafNode(treeId, nodeIds[56], 1, (DAAL_DATA_TYPE)0.0085202042634288482);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)-0.00017042466344181501);

}

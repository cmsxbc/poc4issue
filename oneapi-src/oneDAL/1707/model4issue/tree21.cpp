 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree21(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 25, (DAAL_DATA_TYPE)1.0565000000000002);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 25, (DAAL_DATA_TYPE)0.68250000000000022);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 5, (DAAL_DATA_TYPE)1.3365000000000002);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 22, (DAAL_DATA_TYPE)0.60950000000000004);
    builder.addLeafNode(treeId, nodeIds[4], 0, (DAAL_DATA_TYPE)0.011451069824397565);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[4], 1, 21, (DAAL_DATA_TYPE)0.90950000000000009);
    builder.addLeafNode(treeId, nodeIds[6], 0, (DAAL_DATA_TYPE)-0.0055591024515283015);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[6], 1, 0, (DAAL_DATA_TYPE)0.43350000000000005);
    builder.addLeafNode(treeId, nodeIds[8], 0, (DAAL_DATA_TYPE)-0.012130142424417579);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[8], 1, 19, (DAAL_DATA_TYPE)1.0525000000000002);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[10], 0, 27, (DAAL_DATA_TYPE)1.1515000000000002);
    builder.addLeafNode(treeId, nodeIds[11], 0, (DAAL_DATA_TYPE)0.0038601750655135277);
    builder.addLeafNode(treeId, nodeIds[11], 1, (DAAL_DATA_TYPE)-0.013271975638093176);
    builder.addLeafNode(treeId, nodeIds[10], 1, (DAAL_DATA_TYPE)-0.0076507336135660658);
    builder.addLeafNode(treeId, nodeIds[3], 1, (DAAL_DATA_TYPE)0.0064729195724173294);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[2], 1, 5, (DAAL_DATA_TYPE)0.86450000000000016);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[16], 0, 25, (DAAL_DATA_TYPE)0.94550000000000012);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[17], 0, 26, (DAAL_DATA_TYPE)0.77250000000000008);
    builder.addLeafNode(treeId, nodeIds[18], 0, (DAAL_DATA_TYPE)-0.0024494973006942465);
    nodeIds[20] = builder.addSplitNode(treeId, nodeIds[18], 1, 23, (DAAL_DATA_TYPE)0.99950000000000017);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[20], 0, 27, (DAAL_DATA_TYPE)0.82250000000000012);
    builder.addLeafNode(treeId, nodeIds[21], 0, (DAAL_DATA_TYPE)0.0055733437019009745);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[21], 1, 25, (DAAL_DATA_TYPE)0.86750000000000005);
    builder.addLeafNode(treeId, nodeIds[23], 0, (DAAL_DATA_TYPE)-0.0045549054104120626);
    builder.addLeafNode(treeId, nodeIds[23], 1, (DAAL_DATA_TYPE)0.0050860919838034832);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[20], 1, 19, (DAAL_DATA_TYPE)-0.17149999999999996);
    builder.addLeafNode(treeId, nodeIds[26], 0, (DAAL_DATA_TYPE)0.0029327799533975536);
    builder.addLeafNode(treeId, nodeIds[26], 1, (DAAL_DATA_TYPE)0.01233089377055876);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[17], 1, 26, (DAAL_DATA_TYPE)0.80850000000000011);
    builder.addLeafNode(treeId, nodeIds[29], 0, (DAAL_DATA_TYPE)-0.013776775312666989);
    builder.addLeafNode(treeId, nodeIds[29], 1, (DAAL_DATA_TYPE)-0.0022135546952486039);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[16], 1, 27, (DAAL_DATA_TYPE)1.0105000000000002);
    builder.addLeafNode(treeId, nodeIds[32], 0, (DAAL_DATA_TYPE)0.0072928141320937256);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[32], 1, 4, (DAAL_DATA_TYPE)1.2535000000000001);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[34], 0, 3, (DAAL_DATA_TYPE)2.0675000000000003);
    builder.addLeafNode(treeId, nodeIds[35], 0, (DAAL_DATA_TYPE)0.0044392141446568606);
    builder.addLeafNode(treeId, nodeIds[35], 1, (DAAL_DATA_TYPE)-0.0079100203845236042);
    builder.addLeafNode(treeId, nodeIds[34], 1, (DAAL_DATA_TYPE)-0.011345660158743462);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[1], 1, 22, (DAAL_DATA_TYPE)1.0265000000000002);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[39], 0, 22, (DAAL_DATA_TYPE)0.77950000000000019);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[40], 0, 13, (DAAL_DATA_TYPE)0.60950000000000004);
    builder.addLeafNode(treeId, nodeIds[41], 0, (DAAL_DATA_TYPE)-0.0083065143613903613);
    builder.addLeafNode(treeId, nodeIds[41], 1, (DAAL_DATA_TYPE)0.0067931949189215003);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[40], 1, 27, (DAAL_DATA_TYPE)1.0835000000000001);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[44], 0, 15, (DAAL_DATA_TYPE)-1.5714999999999997);
    builder.addLeafNode(treeId, nodeIds[45], 0, (DAAL_DATA_TYPE)0.010208194255828858);
    builder.addLeafNode(treeId, nodeIds[45], 1, (DAAL_DATA_TYPE)-0.0057341067975570448);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[44], 1, 24, (DAAL_DATA_TYPE)1.5945000000000003);
    builder.addLeafNode(treeId, nodeIds[48], 0, (DAAL_DATA_TYPE)-0.014138386012513405);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[48], 1, 3, (DAAL_DATA_TYPE)1.2105000000000004);
    builder.addLeafNode(treeId, nodeIds[50], 0, (DAAL_DATA_TYPE)0.0087003763603127528);
    builder.addLeafNode(treeId, nodeIds[50], 1, (DAAL_DATA_TYPE)-0.010685068223534561);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[39], 1, 25, (DAAL_DATA_TYPE)1.5165000000000002);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[53], 0, 1, (DAAL_DATA_TYPE)1.3180000000000003);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[54], 0, 2, (DAAL_DATA_TYPE)0.49150000000000005);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[55], 0, 19, (DAAL_DATA_TYPE)1.0965000000000003);
    builder.addLeafNode(treeId, nodeIds[56], 0, (DAAL_DATA_TYPE)-0.0020146046944011916);
    builder.addLeafNode(treeId, nodeIds[56], 1, (DAAL_DATA_TYPE)0.012332016726334889);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)0.0096171095283753283);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)-0.010181439448805417);
    builder.addLeafNode(treeId, nodeIds[53], 1, (DAAL_DATA_TYPE)-0.0042959760847117974);

}

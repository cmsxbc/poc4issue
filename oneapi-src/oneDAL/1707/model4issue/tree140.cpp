 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree140(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 21, (DAAL_DATA_TYPE)1.2310000000000001);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 21, (DAAL_DATA_TYPE)1.1775000000000002);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 13, (DAAL_DATA_TYPE)1.9140000000000001);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 18, (DAAL_DATA_TYPE)1.2925000000000002);
    builder.addLeafNode(treeId, nodeIds[4], 0, (DAAL_DATA_TYPE)6.5772347473633098e-05);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[4], 1, 23, (DAAL_DATA_TYPE)0.98350000000000015);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[6], 0, 5, (DAAL_DATA_TYPE)1.0105000000000002);
    builder.addLeafNode(treeId, nodeIds[7], 0, (DAAL_DATA_TYPE)-0.0046051717496344022);
    builder.addLeafNode(treeId, nodeIds[7], 1, (DAAL_DATA_TYPE)-0.016857022334906189);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[6], 1, 2, (DAAL_DATA_TYPE)1.4685000000000004);
    builder.addLeafNode(treeId, nodeIds[10], 0, (DAAL_DATA_TYPE)-4.4339186887242901e-05);
    builder.addLeafNode(treeId, nodeIds[10], 1, (DAAL_DATA_TYPE)-0.010597141493450512);
    builder.addLeafNode(treeId, nodeIds[3], 1, (DAAL_DATA_TYPE)0.0029016588054433029);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[2], 1, 4, (DAAL_DATA_TYPE)0.95950000000000013);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[14], 0, 7, (DAAL_DATA_TYPE)0.36250000000000004);
    builder.addLeafNode(treeId, nodeIds[15], 0, (DAAL_DATA_TYPE)0.011931553728094228);
    builder.addLeafNode(treeId, nodeIds[15], 1, (DAAL_DATA_TYPE)0.0017099858639994638);
    builder.addLeafNode(treeId, nodeIds[14], 1, (DAAL_DATA_TYPE)-0.0023474832453454536);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[1], 1, 9, (DAAL_DATA_TYPE)0.59350000000000003);
    nodeIds[20] = builder.addSplitNode(treeId, nodeIds[19], 0, 10, (DAAL_DATA_TYPE)0.19350000000000003);
    builder.addLeafNode(treeId, nodeIds[20], 0, (DAAL_DATA_TYPE)0.010852157687529541);
    builder.addLeafNode(treeId, nodeIds[20], 1, (DAAL_DATA_TYPE)-0.0031157401926589735);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[19], 1, 25, (DAAL_DATA_TYPE)0.32150000000000006);
    builder.addLeafNode(treeId, nodeIds[23], 0, (DAAL_DATA_TYPE)0.0075417795097050466);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[23], 1, 25, (DAAL_DATA_TYPE)0.46200000000000008);
    builder.addLeafNode(treeId, nodeIds[25], 0, (DAAL_DATA_TYPE)-0.011708721034228802);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[25], 1, 2, (DAAL_DATA_TYPE)-1.5894999999999999);
    builder.addLeafNode(treeId, nodeIds[27], 0, (DAAL_DATA_TYPE)0.0058162785368040208);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[27], 1, 23, (DAAL_DATA_TYPE)0.97850000000000004);
    builder.addLeafNode(treeId, nodeIds[29], 0, (DAAL_DATA_TYPE)-0.0095471246977761066);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[29], 1, 21, (DAAL_DATA_TYPE)1.5405000000000002);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[31], 0, 11, (DAAL_DATA_TYPE)0.31950000000000006);
    builder.addLeafNode(treeId, nodeIds[32], 0, (DAAL_DATA_TYPE)-0.0012970524235763623);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[32], 1, 26, (DAAL_DATA_TYPE)0.90350000000000008);
    builder.addLeafNode(treeId, nodeIds[34], 0, (DAAL_DATA_TYPE)-0.014072824514005334);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[34], 1, 10, (DAAL_DATA_TYPE)0.049000000000000009);
    builder.addLeafNode(treeId, nodeIds[36], 0, (DAAL_DATA_TYPE)-0.0090570475796566303);
    builder.addLeafNode(treeId, nodeIds[36], 1, (DAAL_DATA_TYPE)0.0010917940735816955);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[31], 1, 19, (DAAL_DATA_TYPE)0.12150000000000001);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[39], 0, 25, (DAAL_DATA_TYPE)0.64450000000000018);
    builder.addLeafNode(treeId, nodeIds[40], 0, (DAAL_DATA_TYPE)0.0099849926233291642);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[40], 1, 23, (DAAL_DATA_TYPE)1.0795000000000001);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[42], 0, 25, (DAAL_DATA_TYPE)0.7915000000000002);
    builder.addLeafNode(treeId, nodeIds[43], 0, (DAAL_DATA_TYPE)-0.009226269653901973);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[43], 1, 19, (DAAL_DATA_TYPE)-0.58149999999999979);
    builder.addLeafNode(treeId, nodeIds[45], 0, (DAAL_DATA_TYPE)-0.0023828200945580327);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[45], 1, 19, (DAAL_DATA_TYPE)-0.28149999999999992);
    builder.addLeafNode(treeId, nodeIds[47], 0, (DAAL_DATA_TYPE)0.011175022336343925);
    builder.addLeafNode(treeId, nodeIds[47], 1, (DAAL_DATA_TYPE)-0.00028551542200148109);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[42], 1, 17, (DAAL_DATA_TYPE)0.87350000000000005);
    builder.addLeafNode(treeId, nodeIds[50], 0, (DAAL_DATA_TYPE)0.013464411720633507);
    builder.addLeafNode(treeId, nodeIds[50], 1, (DAAL_DATA_TYPE)0.001233852502385465);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[39], 1, 18, (DAAL_DATA_TYPE)0.64350000000000007);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[53], 0, 7, (DAAL_DATA_TYPE)-0.17199999999999996);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[54], 0, 7, (DAAL_DATA_TYPE)-0.59699999999999986);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[55], 0, 6, (DAAL_DATA_TYPE)-0.43549999999999994);
    builder.addLeafNode(treeId, nodeIds[56], 0, (DAAL_DATA_TYPE)-0.015006410665810108);
    builder.addLeafNode(treeId, nodeIds[56], 1, (DAAL_DATA_TYPE)-0.00067911084933096875);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)0.012260307781398298);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)-0.0100187954492867);
    builder.addLeafNode(treeId, nodeIds[53], 1, (DAAL_DATA_TYPE)0.0051994946992231748);

}

 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree118(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 18, (DAAL_DATA_TYPE)-0.05849999999999999);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 2, (DAAL_DATA_TYPE)1.2080000000000004);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 4, (DAAL_DATA_TYPE)-1.4884999999999999);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 0, (DAAL_DATA_TYPE)0.73450000000000004);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 23, (DAAL_DATA_TYPE)0.98650000000000004);
    builder.addLeafNode(treeId, nodeIds[5], 0, (DAAL_DATA_TYPE)-0.01379531583748758);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[5], 1, 7, (DAAL_DATA_TYPE)0.24650000000000002);
    builder.addLeafNode(treeId, nodeIds[7], 0, (DAAL_DATA_TYPE)-0.00644645641388541);
    builder.addLeafNode(treeId, nodeIds[7], 1, (DAAL_DATA_TYPE)0.0087404183205217114);
    builder.addLeafNode(treeId, nodeIds[4], 1, (DAAL_DATA_TYPE)0.0062822657396956793);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[3], 1, 23, (DAAL_DATA_TYPE)0.98750000000000016);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[11], 0, 13, (DAAL_DATA_TYPE)1.1035000000000001);
    builder.addLeafNode(treeId, nodeIds[12], 0, (DAAL_DATA_TYPE)-0.0016315520025288561);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[12], 1, 4, (DAAL_DATA_TYPE)0.29750000000000004);
    builder.addLeafNode(treeId, nodeIds[14], 0, (DAAL_DATA_TYPE)-0.00047226802406596469);
    builder.addLeafNode(treeId, nodeIds[14], 1, (DAAL_DATA_TYPE)0.0076493386563699726);
    builder.addLeafNode(treeId, nodeIds[11], 1, (DAAL_DATA_TYPE)-0.0019582978784546006);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[2], 1, 26, (DAAL_DATA_TYPE)0.9255000000000001);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[18], 0, 18, (DAAL_DATA_TYPE)-0.28349999999999992);
    nodeIds[20] = builder.addSplitNode(treeId, nodeIds[19], 0, 20, (DAAL_DATA_TYPE)2.3265000000000002);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[20], 0, 10, (DAAL_DATA_TYPE)-0.74849999999999983);
    builder.addLeafNode(treeId, nodeIds[21], 0, (DAAL_DATA_TYPE)-0.010036935985964888);
    builder.addLeafNode(treeId, nodeIds[21], 1, (DAAL_DATA_TYPE)0.00043217141721998493);
    builder.addLeafNode(treeId, nodeIds[20], 1, (DAAL_DATA_TYPE)0.0060285945392311796);
    builder.addLeafNode(treeId, nodeIds[19], 1, (DAAL_DATA_TYPE)-0.0090792218502610926);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[18], 1, 15, (DAAL_DATA_TYPE)-1.2404999999999997);
    builder.addLeafNode(treeId, nodeIds[26], 0, (DAAL_DATA_TYPE)-0.0052255792552993322);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[26], 1, 21, (DAAL_DATA_TYPE)0.75550000000000017);
    builder.addLeafNode(treeId, nodeIds[28], 0, (DAAL_DATA_TYPE)0.014408528575530419);
    nodeIds[30] = builder.addSplitNode(treeId, nodeIds[28], 1, 5, (DAAL_DATA_TYPE)0.88450000000000017);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[30], 0, 17, (DAAL_DATA_TYPE)1.0035000000000001);
    builder.addLeafNode(treeId, nodeIds[31], 0, (DAAL_DATA_TYPE)0.0052600622662187868);
    builder.addLeafNode(treeId, nodeIds[31], 1, (DAAL_DATA_TYPE)-0.007579131986130961);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[30], 1, 1, (DAAL_DATA_TYPE)0.59750000000000003);
    builder.addLeafNode(treeId, nodeIds[34], 0, (DAAL_DATA_TYPE)0.0092580560788318705);
    builder.addLeafNode(treeId, nodeIds[34], 1, (DAAL_DATA_TYPE)-0.0021608862467110156);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[1], 1, 25, (DAAL_DATA_TYPE)1.5165000000000002);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[37], 0, 7, (DAAL_DATA_TYPE)1.3160000000000001);
    builder.addLeafNode(treeId, nodeIds[38], 0, (DAAL_DATA_TYPE)0.00034366428378005987);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[38], 1, 25, (DAAL_DATA_TYPE)1.2725000000000002);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[40], 0, 2, (DAAL_DATA_TYPE)1.1325000000000001);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[41], 0, 0, (DAAL_DATA_TYPE)0.59150000000000003);
    builder.addLeafNode(treeId, nodeIds[42], 0, (DAAL_DATA_TYPE)0.0090305206401703458);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[42], 1, 0, (DAAL_DATA_TYPE)0.66750000000000009);
    builder.addLeafNode(treeId, nodeIds[44], 0, (DAAL_DATA_TYPE)-0.0078079046215862036);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[44], 1, 27, (DAAL_DATA_TYPE)1.1345000000000003);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[46], 0, 15, (DAAL_DATA_TYPE)0.55750000000000022);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[47], 0, 3, (DAAL_DATA_TYPE)0.78150000000000019);
    builder.addLeafNode(treeId, nodeIds[48], 0, (DAAL_DATA_TYPE)-0.0033587879025273855);
    builder.addLeafNode(treeId, nodeIds[48], 1, (DAAL_DATA_TYPE)0.0054220633583287872);
    builder.addLeafNode(treeId, nodeIds[47], 1, (DAAL_DATA_TYPE)0.0090839272939289614);
    builder.addLeafNode(treeId, nodeIds[46], 1, (DAAL_DATA_TYPE)-0.0057068811324627504);
    builder.addLeafNode(treeId, nodeIds[41], 1, (DAAL_DATA_TYPE)-0.0071061324062091967);
    builder.addLeafNode(treeId, nodeIds[40], 1, (DAAL_DATA_TYPE)0.016128394193947317);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[37], 1, 23, (DAAL_DATA_TYPE)0.98550000000000015);
    builder.addLeafNode(treeId, nodeIds[55], 0, (DAAL_DATA_TYPE)0.0035202527143916151);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[55], 1, 0, (DAAL_DATA_TYPE)0.62350000000000005);
    builder.addLeafNode(treeId, nodeIds[57], 0, (DAAL_DATA_TYPE)-0.0081935375473800708);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[57], 1, 22, (DAAL_DATA_TYPE)0.87050000000000016);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)0.006558921404585645);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)-0.0024676663366876342);

}

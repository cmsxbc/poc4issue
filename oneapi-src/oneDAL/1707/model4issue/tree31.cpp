 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree31(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 25, (DAAL_DATA_TYPE)0.98450000000000004);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 25, (DAAL_DATA_TYPE)0.6695000000000001);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 13, (DAAL_DATA_TYPE)1.2465000000000004);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 27, (DAAL_DATA_TYPE)0.85250000000000015);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 0, (DAAL_DATA_TYPE)0.90350000000000008);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 5, (DAAL_DATA_TYPE)0.89350000000000007);
    builder.addLeafNode(treeId, nodeIds[6], 0, (DAAL_DATA_TYPE)-0.005835001201465212);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[6], 1, 3, (DAAL_DATA_TYPE)0.73050000000000004);
    builder.addLeafNode(treeId, nodeIds[8], 0, (DAAL_DATA_TYPE)0.013481979051397908);
    builder.addLeafNode(treeId, nodeIds[8], 1, (DAAL_DATA_TYPE)-0.0024668821832165124);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[5], 1, 14, (DAAL_DATA_TYPE)-0.7104999999999998);
    builder.addLeafNode(treeId, nodeIds[11], 0, (DAAL_DATA_TYPE)0.0088550163060426706);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[11], 1, 24, (DAAL_DATA_TYPE)0.95050000000000001);
    builder.addLeafNode(treeId, nodeIds[13], 0, (DAAL_DATA_TYPE)-0.0018558645821061016);
    builder.addLeafNode(treeId, nodeIds[13], 1, (DAAL_DATA_TYPE)0.0088103722780942927);
    builder.addLeafNode(treeId, nodeIds[4], 1, (DAAL_DATA_TYPE)-0.0049856783546410599);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[3], 1, 27, (DAAL_DATA_TYPE)1.0925000000000002);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[17], 0, 14, (DAAL_DATA_TYPE)-0.79249999999999987);
    builder.addLeafNode(treeId, nodeIds[18], 0, (DAAL_DATA_TYPE)-0.0036973751017025541);
    builder.addLeafNode(treeId, nodeIds[18], 1, (DAAL_DATA_TYPE)0.0099397073927763348);
    builder.addLeafNode(treeId, nodeIds[17], 1, (DAAL_DATA_TYPE)-0.0062451061606407163);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[2], 1, 26, (DAAL_DATA_TYPE)0.77250000000000008);
    nodeIds[23] = builder.addSplitNode(treeId, nodeIds[22], 0, 25, (DAAL_DATA_TYPE)0.70050000000000001);
    builder.addLeafNode(treeId, nodeIds[23], 0, (DAAL_DATA_TYPE)0.008296666810145745);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[23], 1, 27, (DAAL_DATA_TYPE)0.72450000000000003);
    builder.addLeafNode(treeId, nodeIds[25], 0, (DAAL_DATA_TYPE)-0.0006041187755387239);
    builder.addLeafNode(treeId, nodeIds[25], 1, (DAAL_DATA_TYPE)-0.0095897801808620762);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[22], 1, 3, (DAAL_DATA_TYPE)1.1225000000000003);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[28], 0, 10, (DAAL_DATA_TYPE)-1.4304999999999997);
    builder.addLeafNode(treeId, nodeIds[29], 0, (DAAL_DATA_TYPE)-0.0012155987180414655);
    builder.addLeafNode(treeId, nodeIds[29], 1, (DAAL_DATA_TYPE)0.0054661989555237081);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[28], 1, 27, (DAAL_DATA_TYPE)1.1895000000000002);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[32], 0, 0, (DAAL_DATA_TYPE)0.36850000000000005);
    builder.addLeafNode(treeId, nodeIds[33], 0, (DAAL_DATA_TYPE)-0.010669367979554568);
    builder.addLeafNode(treeId, nodeIds[33], 1, (DAAL_DATA_TYPE)0.0038716898080960629);
    builder.addLeafNode(treeId, nodeIds[32], 1, (DAAL_DATA_TYPE)-0.0056651055260940842);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[1], 1, 0, (DAAL_DATA_TYPE)2.4805000000000006);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[37], 0, 3, (DAAL_DATA_TYPE)1.8795000000000002);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[38], 0, 24, (DAAL_DATA_TYPE)0.6585000000000002);
    builder.addLeafNode(treeId, nodeIds[39], 0, (DAAL_DATA_TYPE)0.0064292927635343465);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[39], 1, 24, (DAAL_DATA_TYPE)0.93650000000000022);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[41], 0, 14, (DAAL_DATA_TYPE)0.41050000000000003);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[42], 0, 0, (DAAL_DATA_TYPE)1.2435000000000003);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[43], 0, 13, (DAAL_DATA_TYPE)0.60550000000000004);
    builder.addLeafNode(treeId, nodeIds[44], 0, (DAAL_DATA_TYPE)-0.010177683206845305);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[44], 1, 11, (DAAL_DATA_TYPE)0.028500000000000004);
    builder.addLeafNode(treeId, nodeIds[46], 0, (DAAL_DATA_TYPE)-0.0031463879837382658);
    builder.addLeafNode(treeId, nodeIds[46], 1, (DAAL_DATA_TYPE)0.0047909873678828735);
    builder.addLeafNode(treeId, nodeIds[43], 1, (DAAL_DATA_TYPE)-0.010118123978376388);
    builder.addLeafNode(treeId, nodeIds[42], 1, (DAAL_DATA_TYPE)-0.0089535865692877466);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[41], 1, 5, (DAAL_DATA_TYPE)1.0615000000000003);
    nodeIds[52] = builder.addSplitNode(treeId, nodeIds[51], 0, 25, (DAAL_DATA_TYPE)1.5035000000000001);
    builder.addLeafNode(treeId, nodeIds[52], 0, (DAAL_DATA_TYPE)-0.00092657775565505919);
    builder.addLeafNode(treeId, nodeIds[52], 1, (DAAL_DATA_TYPE)-0.0089209053569879303);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[51], 1, 25, (DAAL_DATA_TYPE)1.8525000000000003);
    builder.addLeafNode(treeId, nodeIds[55], 0, (DAAL_DATA_TYPE)0.0048423779164167013);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[55], 1, 27, (DAAL_DATA_TYPE)1.6205000000000003);
    builder.addLeafNode(treeId, nodeIds[57], 0, (DAAL_DATA_TYPE)-0.0048077777028083801);
    builder.addLeafNode(treeId, nodeIds[57], 1, (DAAL_DATA_TYPE)0.010667608758168561);
    builder.addLeafNode(treeId, nodeIds[38], 1, (DAAL_DATA_TYPE)-0.0074307364060894237);
    builder.addLeafNode(treeId, nodeIds[37], 1, (DAAL_DATA_TYPE)-0.012897129221396013);

}

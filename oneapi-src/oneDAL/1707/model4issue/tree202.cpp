 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree202(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 3, (DAAL_DATA_TYPE)0.13550000000000004);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 6, (DAAL_DATA_TYPE)-0.37949999999999995);
    builder.addLeafNode(treeId, nodeIds[2], 0, (DAAL_DATA_TYPE)0.0045125436065718534);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[2], 1, 19, (DAAL_DATA_TYPE)0.17650000000000002);
    builder.addLeafNode(treeId, nodeIds[4], 0, (DAAL_DATA_TYPE)-0.0013617431181633184);
    builder.addLeafNode(treeId, nodeIds[4], 1, (DAAL_DATA_TYPE)-0.012160006426274777);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[1], 1, 14, (DAAL_DATA_TYPE)0.7855000000000002);
    builder.addLeafNode(treeId, nodeIds[7], 0, (DAAL_DATA_TYPE)-1.493990430077659e-05);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[7], 1, 25, (DAAL_DATA_TYPE)1.0255000000000003);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[9], 0, 2, (DAAL_DATA_TYPE)1.5765000000000002);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[10], 0, 9, (DAAL_DATA_TYPE)1.1275000000000002);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[11], 0, 6, (DAAL_DATA_TYPE)1.4200000000000002);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[12], 0, 24, (DAAL_DATA_TYPE)0.72450000000000003);
    builder.addLeafNode(treeId, nodeIds[13], 0, (DAAL_DATA_TYPE)-0.0014184969625520435);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[13], 1, 2, (DAAL_DATA_TYPE)-1.5134999999999998);
    builder.addLeafNode(treeId, nodeIds[15], 0, (DAAL_DATA_TYPE)0.011179903184529395);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[15], 1, 0, (DAAL_DATA_TYPE)1.9325000000000003);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[17], 0, 6, (DAAL_DATA_TYPE)0.72350000000000014);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[18], 0, 7, (DAAL_DATA_TYPE)-1.0224999999999997);
    builder.addLeafNode(treeId, nodeIds[19], 0, (DAAL_DATA_TYPE)-0.0016761758364737035);
    builder.addLeafNode(treeId, nodeIds[19], 1, (DAAL_DATA_TYPE)0.0059965183128020162);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[18], 1, 4, (DAAL_DATA_TYPE)-0.58149999999999979);
    builder.addLeafNode(treeId, nodeIds[22], 0, (DAAL_DATA_TYPE)-0.0065998841513646772);
    builder.addLeafNode(treeId, nodeIds[22], 1, (DAAL_DATA_TYPE)0.0030641188687429979);
    builder.addLeafNode(treeId, nodeIds[17], 1, (DAAL_DATA_TYPE)-0.0054455876917294836);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[12], 1, 3, (DAAL_DATA_TYPE)0.72150000000000014);
    builder.addLeafNode(treeId, nodeIds[26], 0, (DAAL_DATA_TYPE)0.00095083994418382648);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[26], 1, 21, (DAAL_DATA_TYPE)0.88650000000000018);
    builder.addLeafNode(treeId, nodeIds[28], 0, (DAAL_DATA_TYPE)0.0061409976482391356);
    builder.addLeafNode(treeId, nodeIds[28], 1, (DAAL_DATA_TYPE)0.017588309740478342);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[11], 1, 11, (DAAL_DATA_TYPE)-0.87049999999999994);
    builder.addLeafNode(treeId, nodeIds[31], 0, (DAAL_DATA_TYPE)0.0062501878208584263);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[31], 1, 22, (DAAL_DATA_TYPE)0.90650000000000019);
    builder.addLeafNode(treeId, nodeIds[33], 0, (DAAL_DATA_TYPE)-0.0069181784876525612);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[33], 1, 10, (DAAL_DATA_TYPE)0.30850000000000005);
    builder.addLeafNode(treeId, nodeIds[35], 0, (DAAL_DATA_TYPE)-0.0062312205335021851);
    builder.addLeafNode(treeId, nodeIds[35], 1, (DAAL_DATA_TYPE)0.0062356172690606615);
    builder.addLeafNode(treeId, nodeIds[10], 1, (DAAL_DATA_TYPE)-0.0043723559183244769);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[9], 1, 25, (DAAL_DATA_TYPE)1.1785000000000003);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[39], 0, 2, (DAAL_DATA_TYPE)0.99850000000000005);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[40], 0, 19, (DAAL_DATA_TYPE)0.75350000000000017);
    builder.addLeafNode(treeId, nodeIds[41], 0, (DAAL_DATA_TYPE)-0.010612738425670952);
    builder.addLeafNode(treeId, nodeIds[41], 1, (DAAL_DATA_TYPE)-0.0017191254464840448);
    builder.addLeafNode(treeId, nodeIds[40], 1, (DAAL_DATA_TYPE)0.0013449717797338963);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[39], 1, 4, (DAAL_DATA_TYPE)-0.062499999999999993);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[45], 0, 6, (DAAL_DATA_TYPE)0.62050000000000016);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[46], 0, 3, (DAAL_DATA_TYPE)0.95600000000000007);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[47], 0, 15, (DAAL_DATA_TYPE)-0.58149999999999979);
    builder.addLeafNode(treeId, nodeIds[48], 0, (DAAL_DATA_TYPE)-0.0025331841199658814);
    builder.addLeafNode(treeId, nodeIds[48], 1, (DAAL_DATA_TYPE)0.008983249598018387);
    builder.addLeafNode(treeId, nodeIds[47], 1, (DAAL_DATA_TYPE)-0.0064843239649609828);
    nodeIds[52] = builder.addSplitNode(treeId, nodeIds[46], 1, 0, (DAAL_DATA_TYPE)0.84550000000000003);
    builder.addLeafNode(treeId, nodeIds[52], 0, (DAAL_DATA_TYPE)0.016729533177429059);
    builder.addLeafNode(treeId, nodeIds[52], 1, (DAAL_DATA_TYPE)0.0032107827597824129);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[45], 1, 1, (DAAL_DATA_TYPE)-0.20549999999999996);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[55], 0, 19, (DAAL_DATA_TYPE)0.20250000000000004);
    builder.addLeafNode(treeId, nodeIds[56], 0, (DAAL_DATA_TYPE)-0.00022625102367448179);
    builder.addLeafNode(treeId, nodeIds[56], 1, (DAAL_DATA_TYPE)-0.011220075337276343);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[55], 1, 7, (DAAL_DATA_TYPE)-0.29349999999999993);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)0.0063231269859610811);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)-0.0035393109354613858);

}

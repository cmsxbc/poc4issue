 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree64(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 0, (DAAL_DATA_TYPE)1.3375000000000001);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 15, (DAAL_DATA_TYPE)1.7085000000000001);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 9, (DAAL_DATA_TYPE)0.90350000000000008);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 5, (DAAL_DATA_TYPE)1.0315000000000001);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 17, (DAAL_DATA_TYPE)0.70250000000000001);
    builder.addLeafNode(treeId, nodeIds[5], 0, (DAAL_DATA_TYPE)-0.0032902535795851888);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[5], 1, 13, (DAAL_DATA_TYPE)0.60050000000000014);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[7], 0, 10, (DAAL_DATA_TYPE)0.067500000000000018);
    builder.addLeafNode(treeId, nodeIds[8], 0, (DAAL_DATA_TYPE)-0.0083224186263636726);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[8], 1, 5, (DAAL_DATA_TYPE)0.85650000000000015);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[10], 0, 27, (DAAL_DATA_TYPE)0.77650000000000008);
    builder.addLeafNode(treeId, nodeIds[11], 0, (DAAL_DATA_TYPE)-0.0036602659280910049);
    builder.addLeafNode(treeId, nodeIds[11], 1, (DAAL_DATA_TYPE)0.0084899409565814717);
    builder.addLeafNode(treeId, nodeIds[10], 1, (DAAL_DATA_TYPE)-0.010932908114045859);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[7], 1, 22, (DAAL_DATA_TYPE)0.82750000000000001);
    nodeIds[16] = builder.addSplitNode(treeId, nodeIds[15], 0, 10, (DAAL_DATA_TYPE)-0.35349999999999993);
    builder.addLeafNode(treeId, nodeIds[16], 0, (DAAL_DATA_TYPE)0.01046710324192804);
    builder.addLeafNode(treeId, nodeIds[16], 1, (DAAL_DATA_TYPE)0.0013536781309680505);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[15], 1, 22, (DAAL_DATA_TYPE)0.92650000000000021);
    nodeIds[20] = builder.addSplitNode(treeId, nodeIds[19], 0, 19, (DAAL_DATA_TYPE)0.059500000000000004);
    builder.addLeafNode(treeId, nodeIds[20], 0, (DAAL_DATA_TYPE)-0.0085062883857987878);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[20], 1, 17, (DAAL_DATA_TYPE)0.82850000000000013);
    builder.addLeafNode(treeId, nodeIds[22], 0, (DAAL_DATA_TYPE)-0.0092926643043756488);
    builder.addLeafNode(treeId, nodeIds[22], 1, (DAAL_DATA_TYPE)0.0041084865794370051);
    builder.addLeafNode(treeId, nodeIds[19], 1, (DAAL_DATA_TYPE)0.0011954442207258516);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[4], 1, 6, (DAAL_DATA_TYPE)-1.3624999999999998);
    builder.addLeafNode(treeId, nodeIds[26], 0, (DAAL_DATA_TYPE)-0.010409778282046318);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[26], 1, 0, (DAAL_DATA_TYPE)0.94850000000000001);
    builder.addLeafNode(treeId, nodeIds[28], 0, (DAAL_DATA_TYPE)0.00037740496977503547);
    builder.addLeafNode(treeId, nodeIds[28], 1, (DAAL_DATA_TYPE)0.0061587515314493113);
    nodeIds[31] = builder.addSplitNode(treeId, nodeIds[3], 1, 9, (DAAL_DATA_TYPE)0.93050000000000022);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[31], 0, 18, (DAAL_DATA_TYPE)0.30450000000000005);
    builder.addLeafNode(treeId, nodeIds[32], 0, (DAAL_DATA_TYPE)0.011229504664738973);
    builder.addLeafNode(treeId, nodeIds[32], 1, (DAAL_DATA_TYPE)-9.2953435924588422e-05);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[31], 1, 23, (DAAL_DATA_TYPE)1.3445000000000003);
    builder.addLeafNode(treeId, nodeIds[35], 0, (DAAL_DATA_TYPE)0.00045623135049392347);
    builder.addLeafNode(treeId, nodeIds[35], 1, (DAAL_DATA_TYPE)0.0081975433251096144);
    builder.addLeafNode(treeId, nodeIds[2], 1, (DAAL_DATA_TYPE)0.010038121667031837);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[1], 1, 27, (DAAL_DATA_TYPE)1.0855000000000004);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[39], 0, 26, (DAAL_DATA_TYPE)1.1475000000000002);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[40], 0, 8, (DAAL_DATA_TYPE)1.6300000000000001);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[41], 0, 11, (DAAL_DATA_TYPE)1.1535000000000002);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[42], 0, 5, (DAAL_DATA_TYPE)0.52350000000000019);
    builder.addLeafNode(treeId, nodeIds[43], 0, (DAAL_DATA_TYPE)0.0028672878891229632);
    builder.addLeafNode(treeId, nodeIds[43], 1, (DAAL_DATA_TYPE)-0.0057135221449184353);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[42], 1, 23, (DAAL_DATA_TYPE)1.0845000000000002);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[46], 0, 9, (DAAL_DATA_TYPE)0.8155);
    builder.addLeafNode(treeId, nodeIds[47], 0, (DAAL_DATA_TYPE)0.015892097298745755);
    builder.addLeafNode(treeId, nodeIds[47], 1, (DAAL_DATA_TYPE)0.0001102293176310403);
    builder.addLeafNode(treeId, nodeIds[46], 1, (DAAL_DATA_TYPE)-0.010895515304236186);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[41], 1, 25, (DAAL_DATA_TYPE)1.3425000000000002);
    builder.addLeafNode(treeId, nodeIds[51], 0, (DAAL_DATA_TYPE)0.0024442670966110264);
    builder.addLeafNode(treeId, nodeIds[51], 1, (DAAL_DATA_TYPE)-0.010923758264759491);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[40], 1, 11, (DAAL_DATA_TYPE)0.28550000000000003);
    builder.addLeafNode(treeId, nodeIds[54], 0, (DAAL_DATA_TYPE)0.016720281601432834);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)0.0011385173960165545);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[39], 1, 21, (DAAL_DATA_TYPE)3.1825000000000006);
    nodeIds[58] = builder.addSplitNode(treeId, nodeIds[57], 0, 6, (DAAL_DATA_TYPE)1.4510000000000003);
    builder.addLeafNode(treeId, nodeIds[58], 0, (DAAL_DATA_TYPE)-0.0063004183939012375);
    builder.addLeafNode(treeId, nodeIds[58], 1, (DAAL_DATA_TYPE)0.0055613805742367461);
    builder.addLeafNode(treeId, nodeIds[57], 1, (DAAL_DATA_TYPE)0.0057935326187698935);

}

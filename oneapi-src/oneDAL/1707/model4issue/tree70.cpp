 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree70(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 13, (DAAL_DATA_TYPE)1.4705000000000001);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 24, (DAAL_DATA_TYPE)0.73950000000000016);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 19, (DAAL_DATA_TYPE)1.4605000000000004);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 11, (DAAL_DATA_TYPE)0.26850000000000007);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 11, (DAAL_DATA_TYPE)-0.41949999999999993);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 19, (DAAL_DATA_TYPE)-0.065499999999999989);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[6], 0, 11, (DAAL_DATA_TYPE)-1.3809999999999996);
    builder.addLeafNode(treeId, nodeIds[7], 0, (DAAL_DATA_TYPE)-0.0094582173155575277);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[7], 1, 5, (DAAL_DATA_TYPE)0.69450000000000001);
    builder.addLeafNode(treeId, nodeIds[9], 0, (DAAL_DATA_TYPE)-0.0061528436457499482);
    builder.addLeafNode(treeId, nodeIds[9], 1, (DAAL_DATA_TYPE)0.0037346475591000759);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[6], 1, 5, (DAAL_DATA_TYPE)0.83150000000000002);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[12], 0, 27, (DAAL_DATA_TYPE)0.63650000000000018);
    builder.addLeafNode(treeId, nodeIds[13], 0, (DAAL_DATA_TYPE)-0.00090336043919835767);
    builder.addLeafNode(treeId, nodeIds[13], 1, (DAAL_DATA_TYPE)0.0099677120451815426);
    builder.addLeafNode(treeId, nodeIds[12], 1, (DAAL_DATA_TYPE)-0.00069797468562442146);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[5], 1, 24, (DAAL_DATA_TYPE)0.55950000000000022);
    builder.addLeafNode(treeId, nodeIds[17], 0, (DAAL_DATA_TYPE)-0.0033634951263666157);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[17], 1, 15, (DAAL_DATA_TYPE)1.4535000000000002);
    nodeIds[20] = builder.addSplitNode(treeId, nodeIds[19], 0, 18, (DAAL_DATA_TYPE)1.0215000000000003);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[20], 0, 11, (DAAL_DATA_TYPE)-0.28099999999999997);
    builder.addLeafNode(treeId, nodeIds[21], 0, (DAAL_DATA_TYPE)0.016430018855524916);
    builder.addLeafNode(treeId, nodeIds[21], 1, (DAAL_DATA_TYPE)0.005279790251426256);
    builder.addLeafNode(treeId, nodeIds[20], 1, (DAAL_DATA_TYPE)0.020537425834862962);
    builder.addLeafNode(treeId, nodeIds[19], 1, (DAAL_DATA_TYPE)-0.0025558715239167216);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[4], 1, 14, (DAAL_DATA_TYPE)1.0625000000000002);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[26], 0, 4, (DAAL_DATA_TYPE)1.0045000000000002);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[27], 0, 25, (DAAL_DATA_TYPE)0.29250000000000004);
    builder.addLeafNode(treeId, nodeIds[28], 0, (DAAL_DATA_TYPE)-0.011133869964143506);
    nodeIds[30] = builder.addSplitNode(treeId, nodeIds[28], 1, 25, (DAAL_DATA_TYPE)0.92450000000000021);
    builder.addLeafNode(treeId, nodeIds[30], 0, (DAAL_DATA_TYPE)0.0024845669222943612);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[30], 1, 7, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[32], 0, 26, (DAAL_DATA_TYPE)0.90350000000000008);
    builder.addLeafNode(treeId, nodeIds[33], 0, (DAAL_DATA_TYPE)-0.015930402039417198);
    builder.addLeafNode(treeId, nodeIds[33], 1, (DAAL_DATA_TYPE)-0.0019562517465264713);
    builder.addLeafNode(treeId, nodeIds[32], 1, (DAAL_DATA_TYPE)0.0051187105228503553);
    builder.addLeafNode(treeId, nodeIds[27], 1, (DAAL_DATA_TYPE)0.0057980350384565253);
    builder.addLeafNode(treeId, nodeIds[26], 1, (DAAL_DATA_TYPE)-0.0071419950277405849);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[3], 1, 14, (DAAL_DATA_TYPE)-0.51049999999999984);
    builder.addLeafNode(treeId, nodeIds[39], 0, (DAAL_DATA_TYPE)0.0039879698508783531);
    nodeIds[41] = builder.addSplitNode(treeId, nodeIds[39], 1, 7, (DAAL_DATA_TYPE)-0.6825);
    builder.addLeafNode(treeId, nodeIds[41], 0, (DAAL_DATA_TYPE)-0.0015010889386758209);
    builder.addLeafNode(treeId, nodeIds[41], 1, (DAAL_DATA_TYPE)-0.014893933238331662);
    nodeIds[44] = builder.addSplitNode(treeId, nodeIds[2], 1, 26, (DAAL_DATA_TYPE)0.59450000000000014);
    builder.addLeafNode(treeId, nodeIds[44], 0, (DAAL_DATA_TYPE)-0.011408194340765477);
    builder.addLeafNode(treeId, nodeIds[44], 1, (DAAL_DATA_TYPE)-0.00072529148469935019);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[1], 1, 14, (DAAL_DATA_TYPE)0.088500000000000009);
    builder.addLeafNode(treeId, nodeIds[47], 0, (DAAL_DATA_TYPE)-0.00019620692876393898);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[47], 1, 23, (DAAL_DATA_TYPE)1.0085000000000002);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[49], 0, 2, (DAAL_DATA_TYPE)-1.4204999999999999);
    builder.addLeafNode(treeId, nodeIds[50], 0, (DAAL_DATA_TYPE)-0.0068009027732270112);
    nodeIds[52] = builder.addSplitNode(treeId, nodeIds[50], 1, 23, (DAAL_DATA_TYPE)0.99350000000000016);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[52], 0, 0, (DAAL_DATA_TYPE)0.89350000000000007);
    builder.addLeafNode(treeId, nodeIds[53], 0, (DAAL_DATA_TYPE)0.0077254268778928041);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[53], 1, 14, (DAAL_DATA_TYPE)0.6645000000000002);
    builder.addLeafNode(treeId, nodeIds[55], 0, (DAAL_DATA_TYPE)0.0054299786531676851);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)-0.0049703086811033166);
    builder.addLeafNode(treeId, nodeIds[52], 1, (DAAL_DATA_TYPE)-0.0062673168496764969);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[49], 1, 27, (DAAL_DATA_TYPE)1.2325000000000002);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)0.011789622332787875);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)-0.00050686869770288467);

}

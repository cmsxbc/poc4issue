 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree195(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 25, (DAAL_DATA_TYPE)0.94550000000000012);
    builder.addLeafNode(treeId, nodeIds[1], 0, (DAAL_DATA_TYPE)0.0003152784993294292);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[1], 1, 26, (DAAL_DATA_TYPE)0.92450000000000021);
    builder.addLeafNode(treeId, nodeIds[3], 0, (DAAL_DATA_TYPE)-0.0020402043551350653);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[3], 1, 27, (DAAL_DATA_TYPE)0.9295000000000001);
    nodeIds[6] = builder.addSplitNode(treeId, nodeIds[5], 0, 1, (DAAL_DATA_TYPE)-1.6234999999999997);
    builder.addLeafNode(treeId, nodeIds[6], 0, (DAAL_DATA_TYPE)0.011256813878902573);
    nodeIds[8] = builder.addSplitNode(treeId, nodeIds[6], 1, 22, (DAAL_DATA_TYPE)1.1895000000000002);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[8], 0, 22, (DAAL_DATA_TYPE)0.87650000000000017);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[9], 0, 17, (DAAL_DATA_TYPE)0.84250000000000014);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[10], 0, 13, (DAAL_DATA_TYPE)0.86050000000000015);
    builder.addLeafNode(treeId, nodeIds[11], 0, (DAAL_DATA_TYPE)-0.0027329791611783319);
    builder.addLeafNode(treeId, nodeIds[11], 1, (DAAL_DATA_TYPE)0.0055598596110939986);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[10], 1, 25, (DAAL_DATA_TYPE)1.1705000000000003);
    builder.addLeafNode(treeId, nodeIds[14], 0, (DAAL_DATA_TYPE)0.0020918018950690188);
    builder.addLeafNode(treeId, nodeIds[14], 1, (DAAL_DATA_TYPE)0.015445910906419159);
    nodeIds[17] = builder.addSplitNode(treeId, nodeIds[9], 1, 22, (DAAL_DATA_TYPE)0.89350000000000007);
    builder.addLeafNode(treeId, nodeIds[17], 0, (DAAL_DATA_TYPE)-0.01068266004971836);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[17], 1, 2, (DAAL_DATA_TYPE)0.9235000000000001);
    nodeIds[20] = builder.addSplitNode(treeId, nodeIds[19], 0, 25, (DAAL_DATA_TYPE)1.2450000000000003);
    builder.addLeafNode(treeId, nodeIds[20], 0, (DAAL_DATA_TYPE)0.0045915576112747656);
    nodeIds[22] = builder.addSplitNode(treeId, nodeIds[20], 1, 1, (DAAL_DATA_TYPE)-0.61549999999999983);
    builder.addLeafNode(treeId, nodeIds[22], 0, (DAAL_DATA_TYPE)0.0076491650814811398);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[22], 1, 13, (DAAL_DATA_TYPE)1.1445000000000001);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[24], 0, 19, (DAAL_DATA_TYPE)0.35750000000000004);
    builder.addLeafNode(treeId, nodeIds[25], 0, (DAAL_DATA_TYPE)-0.0043721818336934755);
    builder.addLeafNode(treeId, nodeIds[25], 1, (DAAL_DATA_TYPE)0.0067054566319869925);
    builder.addLeafNode(treeId, nodeIds[24], 1, (DAAL_DATA_TYPE)-0.010031296060450617);
    nodeIds[29] = builder.addSplitNode(treeId, nodeIds[19], 1, 2, (DAAL_DATA_TYPE)1.1675000000000002);
    builder.addLeafNode(treeId, nodeIds[29], 0, (DAAL_DATA_TYPE)-0.012594880195822389);
    builder.addLeafNode(treeId, nodeIds[29], 1, (DAAL_DATA_TYPE)-0.0013588612480089071);
    builder.addLeafNode(treeId, nodeIds[8], 1, (DAAL_DATA_TYPE)0.0090860581375846582);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[5], 1, 10, (DAAL_DATA_TYPE)0.76400000000000012);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[33], 0, 25, (DAAL_DATA_TYPE)1.1275000000000002);
    nodeIds[35] = builder.addSplitNode(treeId, nodeIds[34], 0, 8, (DAAL_DATA_TYPE)1.6300000000000001);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[35], 0, 7, (DAAL_DATA_TYPE)-0.13749999999999998);
    builder.addLeafNode(treeId, nodeIds[36], 0, (DAAL_DATA_TYPE)-0.013509499309866719);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[36], 1, 14, (DAAL_DATA_TYPE)0.69750000000000012);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[38], 0, 6, (DAAL_DATA_TYPE)-0.55649999999999988);
    builder.addLeafNode(treeId, nodeIds[39], 0, (DAAL_DATA_TYPE)-0.0058988827901581926);
    builder.addLeafNode(treeId, nodeIds[39], 1, (DAAL_DATA_TYPE)0.0082275280030444271);
    builder.addLeafNode(treeId, nodeIds[38], 1, (DAAL_DATA_TYPE)-0.010993700607546739);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[35], 1, 13, (DAAL_DATA_TYPE)1.1195000000000002);
    builder.addLeafNode(treeId, nodeIds[43], 0, (DAAL_DATA_TYPE)-0.0025128167823968844);
    nodeIds[45] = builder.addSplitNode(treeId, nodeIds[43], 1, 9, (DAAL_DATA_TYPE)1.0205000000000002);
    builder.addLeafNode(treeId, nodeIds[45], 0, (DAAL_DATA_TYPE)0.012863864165476777);
    builder.addLeafNode(treeId, nodeIds[45], 1, (DAAL_DATA_TYPE)-0.0016894884407520295);
    nodeIds[48] = builder.addSplitNode(treeId, nodeIds[34], 1, 25, (DAAL_DATA_TYPE)1.1555000000000002);
    builder.addLeafNode(treeId, nodeIds[48], 0, (DAAL_DATA_TYPE)0.0086614248320637712);
    builder.addLeafNode(treeId, nodeIds[48], 1, (DAAL_DATA_TYPE)-0.00088214175903311839);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[33], 1, 23, (DAAL_DATA_TYPE)0.99050000000000005);
    nodeIds[52] = builder.addSplitNode(treeId, nodeIds[51], 0, 14, (DAAL_DATA_TYPE)1.0765000000000002);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[52], 0, 7, (DAAL_DATA_TYPE)-0.83849999999999991);
    builder.addLeafNode(treeId, nodeIds[53], 0, (DAAL_DATA_TYPE)0.011096956524433512);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[53], 1, 11, (DAAL_DATA_TYPE)0.60650000000000015);
    builder.addLeafNode(treeId, nodeIds[55], 0, (DAAL_DATA_TYPE)-0.0060991293392502347);
    builder.addLeafNode(treeId, nodeIds[55], 1, (DAAL_DATA_TYPE)0.0037403254099190237);
    builder.addLeafNode(treeId, nodeIds[52], 1, (DAAL_DATA_TYPE)-0.0088183111567614655);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[51], 1, 25, (DAAL_DATA_TYPE)1.3145000000000002);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)0.010020011855910222);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)0.00096917626382064023);

}

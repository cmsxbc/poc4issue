 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree9(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 25, (DAAL_DATA_TYPE)1.0675000000000001);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 26, (DAAL_DATA_TYPE)0.79050000000000009);
    nodeIds[3] = builder.addSplitNode(treeId, nodeIds[2], 0, 5, (DAAL_DATA_TYPE)1.3365000000000002);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[3], 0, 24, (DAAL_DATA_TYPE)0.73550000000000015);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 17, (DAAL_DATA_TYPE)0.63950000000000007);
    builder.addLeafNode(treeId, nodeIds[5], 0, (DAAL_DATA_TYPE)-0.0069743345327237076);
    nodeIds[7] = builder.addSplitNode(treeId, nodeIds[5], 1, 22, (DAAL_DATA_TYPE)0.73150000000000015);
    builder.addLeafNode(treeId, nodeIds[7], 0, (DAAL_DATA_TYPE)0.016457746922969817);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[7], 1, 19, (DAAL_DATA_TYPE)1.4845000000000004);
    nodeIds[10] = builder.addSplitNode(treeId, nodeIds[9], 0, 22, (DAAL_DATA_TYPE)1.0265000000000002);
    builder.addLeafNode(treeId, nodeIds[10], 0, (DAAL_DATA_TYPE)-0.0023467829779667015);
    nodeIds[12] = builder.addSplitNode(treeId, nodeIds[10], 1, 6, (DAAL_DATA_TYPE)0.057500000000000009);
    builder.addLeafNode(treeId, nodeIds[12], 0, (DAAL_DATA_TYPE)0.016454377062618732);
    builder.addLeafNode(treeId, nodeIds[12], 1, (DAAL_DATA_TYPE)-0.0017352641531915376);
    builder.addLeafNode(treeId, nodeIds[9], 1, (DAAL_DATA_TYPE)-0.015018274088700613);
    builder.addLeafNode(treeId, nodeIds[4], 1, (DAAL_DATA_TYPE)-0.0074359899295158077);
    builder.addLeafNode(treeId, nodeIds[3], 1, (DAAL_DATA_TYPE)0.0082483207885648176);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[2], 1, 27, (DAAL_DATA_TYPE)0.90450000000000019);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[18], 0, 26, (DAAL_DATA_TYPE)0.85650000000000015);
    nodeIds[20] = builder.addSplitNode(treeId, nodeIds[19], 0, 25, (DAAL_DATA_TYPE)0.89550000000000007);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[20], 0, 25, (DAAL_DATA_TYPE)0.52350000000000019);
    builder.addLeafNode(treeId, nodeIds[21], 0, (DAAL_DATA_TYPE)-0.0035537133754139217);
    builder.addLeafNode(treeId, nodeIds[21], 1, (DAAL_DATA_TYPE)0.0085160162311476717);
    nodeIds[24] = builder.addSplitNode(treeId, nodeIds[20], 1, 23, (DAAL_DATA_TYPE)1.1525000000000001);
    builder.addLeafNode(treeId, nodeIds[24], 0, (DAAL_DATA_TYPE)-0.0020415953564934613);
    builder.addLeafNode(treeId, nodeIds[24], 1, (DAAL_DATA_TYPE)-0.020971224705378214);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[19], 1, 25, (DAAL_DATA_TYPE)0.68650000000000022);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[27], 0, 13, (DAAL_DATA_TYPE)0.9405);
    builder.addLeafNode(treeId, nodeIds[28], 0, (DAAL_DATA_TYPE)-0.00065384492758781677);
    builder.addLeafNode(treeId, nodeIds[28], 1, (DAAL_DATA_TYPE)0.011901490822915108);
    builder.addLeafNode(treeId, nodeIds[27], 1, (DAAL_DATA_TYPE)0.012317764662720006);
    nodeIds[32] = builder.addSplitNode(treeId, nodeIds[18], 1, 25, (DAAL_DATA_TYPE)0.64950000000000008);
    nodeIds[33] = builder.addSplitNode(treeId, nodeIds[32], 0, 9, (DAAL_DATA_TYPE)1.6725000000000001);
    builder.addLeafNode(treeId, nodeIds[33], 0, (DAAL_DATA_TYPE)-0.0079153582563295088);
    builder.addLeafNode(treeId, nodeIds[33], 1, (DAAL_DATA_TYPE)0.0080205130080382037);
    nodeIds[36] = builder.addSplitNode(treeId, nodeIds[32], 1, 24, (DAAL_DATA_TYPE)1.0265000000000002);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[36], 0, 22, (DAAL_DATA_TYPE)1.0605000000000002);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[37], 0, 24, (DAAL_DATA_TYPE)0.73250000000000004);
    builder.addLeafNode(treeId, nodeIds[38], 0, (DAAL_DATA_TYPE)0.0021372981156621662);
    nodeIds[40] = builder.addSplitNode(treeId, nodeIds[38], 1, 22, (DAAL_DATA_TYPE)0.80150000000000021);
    builder.addLeafNode(treeId, nodeIds[40], 0, (DAAL_DATA_TYPE)0.005086745321750641);
    builder.addLeafNode(treeId, nodeIds[40], 1, (DAAL_DATA_TYPE)-0.015812655860983481);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[37], 1, 21, (DAAL_DATA_TYPE)0.99750000000000016);
    builder.addLeafNode(treeId, nodeIds[43], 0, (DAAL_DATA_TYPE)0.0131601181668295);
    builder.addLeafNode(treeId, nodeIds[43], 1, (DAAL_DATA_TYPE)0.0015047217612383797);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[36], 1, 3, (DAAL_DATA_TYPE)1.5655000000000003);
    builder.addLeafNode(treeId, nodeIds[46], 0, (DAAL_DATA_TYPE)0.0074083921750212655);
    builder.addLeafNode(treeId, nodeIds[46], 1, (DAAL_DATA_TYPE)-5.8821329833767942e-05);
    nodeIds[49] = builder.addSplitNode(treeId, nodeIds[1], 1, 25, (DAAL_DATA_TYPE)1.5585000000000002);
    nodeIds[50] = builder.addSplitNode(treeId, nodeIds[49], 0, 22, (DAAL_DATA_TYPE)1.0265000000000002);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[50], 0, 21, (DAAL_DATA_TYPE)0.54750000000000021);
    builder.addLeafNode(treeId, nodeIds[51], 0, (DAAL_DATA_TYPE)0.0058327757062450539);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[51], 1, 24, (DAAL_DATA_TYPE)1.0605000000000002);
    nodeIds[54] = builder.addSplitNode(treeId, nodeIds[53], 0, 27, (DAAL_DATA_TYPE)1.0655000000000003);
    builder.addLeafNode(treeId, nodeIds[54], 0, (DAAL_DATA_TYPE)-0.0094200924552720177);
    builder.addLeafNode(treeId, nodeIds[54], 1, (DAAL_DATA_TYPE)-0.020849468790251634);
    nodeIds[57] = builder.addSplitNode(treeId, nodeIds[53], 1, 27, (DAAL_DATA_TYPE)1.0175000000000003);
    builder.addLeafNode(treeId, nodeIds[57], 0, (DAAL_DATA_TYPE)0.0021141791852509104);
    builder.addLeafNode(treeId, nodeIds[57], 1, (DAAL_DATA_TYPE)-0.01080834970031817);
    builder.addLeafNode(treeId, nodeIds[50], 1, (DAAL_DATA_TYPE)0.0013884785252686448);
    builder.addLeafNode(treeId, nodeIds[49], 1, (DAAL_DATA_TYPE)-0.010717323510381465);

}

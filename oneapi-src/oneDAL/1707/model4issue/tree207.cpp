 /*
This file is auto generated by compile_lightgbm_model,
DO NOT MODIFY IT.
*/

#include <daal.h>
using namespace daal::algorithms::gbt::regression;
void buildTree207(ModelBuilder &builder, ModelBuilder::NodeId nodeIds[]) {
    ModelBuilder::TreeId treeId;
    treeId = builder.createTree(61);
    nodeIds[1] = builder.addSplitNode(treeId, nodeIds[0], 0, 15, (DAAL_DATA_TYPE)1.2575000000000001);
    nodeIds[2] = builder.addSplitNode(treeId, nodeIds[1], 0, 5, (DAAL_DATA_TYPE)1.6890000000000003);
    builder.addLeafNode(treeId, nodeIds[2], 0, (DAAL_DATA_TYPE)-0.00023417173002492637);
    nodeIds[4] = builder.addSplitNode(treeId, nodeIds[2], 1, 14, (DAAL_DATA_TYPE)1.1370000000000002);
    nodeIds[5] = builder.addSplitNode(treeId, nodeIds[4], 0, 14, (DAAL_DATA_TYPE)-0.43749999999999994);
    builder.addLeafNode(treeId, nodeIds[5], 0, (DAAL_DATA_TYPE)-0.00057078601592885599);
    builder.addLeafNode(treeId, nodeIds[5], 1, (DAAL_DATA_TYPE)0.003690555963012709);
    builder.addLeafNode(treeId, nodeIds[4], 1, (DAAL_DATA_TYPE)-0.0041371212246117351);
    nodeIds[9] = builder.addSplitNode(treeId, nodeIds[1], 1, 6, (DAAL_DATA_TYPE)-1.8214999999999997);
    builder.addLeafNode(treeId, nodeIds[9], 0, (DAAL_DATA_TYPE)0.0094872198806240648);
    nodeIds[11] = builder.addSplitNode(treeId, nodeIds[9], 1, 10, (DAAL_DATA_TYPE)-1.9754999999999998);
    builder.addLeafNode(treeId, nodeIds[11], 0, (DAAL_DATA_TYPE)0.0085328545600462432);
    nodeIds[13] = builder.addSplitNode(treeId, nodeIds[11], 1, 24, (DAAL_DATA_TYPE)0.7855000000000002);
    nodeIds[14] = builder.addSplitNode(treeId, nodeIds[13], 0, 10, (DAAL_DATA_TYPE)-0.47449999999999992);
    nodeIds[15] = builder.addSplitNode(treeId, nodeIds[14], 0, 1, (DAAL_DATA_TYPE)-0.08249999999999999);
    builder.addLeafNode(treeId, nodeIds[15], 0, (DAAL_DATA_TYPE)0.0029448143605675017);
    builder.addLeafNode(treeId, nodeIds[15], 1, (DAAL_DATA_TYPE)-0.010656581551302224);
    nodeIds[18] = builder.addSplitNode(treeId, nodeIds[14], 1, 11, (DAAL_DATA_TYPE)0.7350000000000001);
    nodeIds[19] = builder.addSplitNode(treeId, nodeIds[18], 0, 4, (DAAL_DATA_TYPE)-0.46549999999999997);
    builder.addLeafNode(treeId, nodeIds[19], 0, (DAAL_DATA_TYPE)-0.00053556691855192182);
    nodeIds[21] = builder.addSplitNode(treeId, nodeIds[19], 1, 8, (DAAL_DATA_TYPE)1.0000000180025095e-35);
    builder.addLeafNode(treeId, nodeIds[21], 0, (DAAL_DATA_TYPE)0.0025939252331025073);
    builder.addLeafNode(treeId, nodeIds[21], 1, (DAAL_DATA_TYPE)0.0095152600969680978);
    builder.addLeafNode(treeId, nodeIds[18], 1, (DAAL_DATA_TYPE)0.011964368990258031);
    nodeIds[25] = builder.addSplitNode(treeId, nodeIds[13], 1, 9, (DAAL_DATA_TYPE)0.74550000000000016);
    nodeIds[26] = builder.addSplitNode(treeId, nodeIds[25], 0, 5, (DAAL_DATA_TYPE)0.97650000000000003);
    nodeIds[27] = builder.addSplitNode(treeId, nodeIds[26], 0, 10, (DAAL_DATA_TYPE)1.2545000000000002);
    nodeIds[28] = builder.addSplitNode(treeId, nodeIds[27], 0, 2, (DAAL_DATA_TYPE)-0.33299999999999996);
    builder.addLeafNode(treeId, nodeIds[28], 0, (DAAL_DATA_TYPE)-0.011955864289992077);
    nodeIds[30] = builder.addSplitNode(treeId, nodeIds[28], 1, 2, (DAAL_DATA_TYPE)0.22350000000000003);
    builder.addLeafNode(treeId, nodeIds[30], 0, (DAAL_DATA_TYPE)0.0043622077969105348);
    builder.addLeafNode(treeId, nodeIds[30], 1, (DAAL_DATA_TYPE)-0.0089695636623513871);
    builder.addLeafNode(treeId, nodeIds[27], 1, (DAAL_DATA_TYPE)0.0025455651381476362);
    nodeIds[34] = builder.addSplitNode(treeId, nodeIds[26], 1, 3, (DAAL_DATA_TYPE)1.0895000000000004);
    builder.addLeafNode(treeId, nodeIds[34], 0, (DAAL_DATA_TYPE)0.0084537576024348911);
    builder.addLeafNode(treeId, nodeIds[34], 1, (DAAL_DATA_TYPE)-0.0033540549812771919);
    nodeIds[37] = builder.addSplitNode(treeId, nodeIds[25], 1, 17, (DAAL_DATA_TYPE)1.0565000000000002);
    nodeIds[38] = builder.addSplitNode(treeId, nodeIds[37], 0, 14, (DAAL_DATA_TYPE)-0.17749999999999996);
    nodeIds[39] = builder.addSplitNode(treeId, nodeIds[38], 0, 1, (DAAL_DATA_TYPE)-0.11649999999999999);
    builder.addLeafNode(treeId, nodeIds[39], 0, (DAAL_DATA_TYPE)0.0013151549427819096);
    builder.addLeafNode(treeId, nodeIds[39], 1, (DAAL_DATA_TYPE)0.011397533504249054);
    nodeIds[42] = builder.addSplitNode(treeId, nodeIds[38], 1, 4, (DAAL_DATA_TYPE)-0.38549999999999995);
    nodeIds[43] = builder.addSplitNode(treeId, nodeIds[42], 0, 4, (DAAL_DATA_TYPE)-1.0474999999999997);
    builder.addLeafNode(treeId, nodeIds[43], 0, (DAAL_DATA_TYPE)0.0028312574489973486);
    builder.addLeafNode(treeId, nodeIds[43], 1, (DAAL_DATA_TYPE)-0.0097805921239062007);
    nodeIds[46] = builder.addSplitNode(treeId, nodeIds[42], 1, 3, (DAAL_DATA_TYPE)1.1045000000000003);
    nodeIds[47] = builder.addSplitNode(treeId, nodeIds[46], 0, 14, (DAAL_DATA_TYPE)0.39950000000000008);
    builder.addLeafNode(treeId, nodeIds[47], 0, (DAAL_DATA_TYPE)-0.0046928228721732183);
    builder.addLeafNode(treeId, nodeIds[47], 1, (DAAL_DATA_TYPE)0.0042567168332396021);
    builder.addLeafNode(treeId, nodeIds[46], 1, (DAAL_DATA_TYPE)0.0097268154848397029);
    nodeIds[51] = builder.addSplitNode(treeId, nodeIds[37], 1, 4, (DAAL_DATA_TYPE)-1.0599999999999998);
    builder.addLeafNode(treeId, nodeIds[51], 0, (DAAL_DATA_TYPE)0.0064796280078589915);
    nodeIds[53] = builder.addSplitNode(treeId, nodeIds[51], 1, 5, (DAAL_DATA_TYPE)0.7985000000000001);
    builder.addLeafNode(treeId, nodeIds[53], 0, (DAAL_DATA_TYPE)0.0019188033533282579);
    nodeIds[55] = builder.addSplitNode(treeId, nodeIds[53], 1, 27, (DAAL_DATA_TYPE)1.0175000000000003);
    nodeIds[56] = builder.addSplitNode(treeId, nodeIds[55], 0, 23, (DAAL_DATA_TYPE)0.99450000000000005);
    builder.addLeafNode(treeId, nodeIds[56], 0, (DAAL_DATA_TYPE)-0.0071723896240734539);
    builder.addLeafNode(treeId, nodeIds[56], 1, (DAAL_DATA_TYPE)0.0062083460390567786);
    nodeIds[59] = builder.addSplitNode(treeId, nodeIds[55], 1, 25, (DAAL_DATA_TYPE)1.3980000000000004);
    builder.addLeafNode(treeId, nodeIds[59], 0, (DAAL_DATA_TYPE)-0.015490902785211803);
    builder.addLeafNode(treeId, nodeIds[59], 1, (DAAL_DATA_TYPE)-0.0032547199122962504);

}
